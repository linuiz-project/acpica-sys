#![no_std]
#![allow(
    dead_code,
    unused_imports,
    improper_ctypes,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    unsafe_op_in_unsafe_fn,
    clippy::missing_safety_doc
)]

/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const ACPI_BINARY_SEMAPHORE: u32 = 0;
pub const ACPI_OSL_MUTEX: u32 = 1;
pub const DEBUGGER_SINGLE_THREADED: u32 = 0;
pub const DEBUGGER_MULTI_THREADED: u32 = 1;
pub const ACPI_SRC_OS_LF_ONLY: u32 = 0;
pub const COMPILER_VA_MACRO: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ACPI_MACHINE_WIDTH: u32 = 64;
pub const ACPI_MUTEX_TYPE: u32 = 0;
pub const DEBUGGER_THREADING: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const ACPI_ASCII_MAX: u32 = 127;
pub const ACPI_MAX_GPE_BLOCKS: u32 = 2;
pub const ACPI_GPE_REGISTER_WIDTH: u32 = 8;
pub const ACPI_PM1_REGISTER_WIDTH: u32 = 16;
pub const ACPI_PM2_REGISTER_WIDTH: u32 = 8;
pub const ACPI_PM_TIMER_WIDTH: u32 = 32;
pub const ACPI_RESET_REGISTER_WIDTH: u32 = 8;
pub const ACPI_NAMESEG_SIZE: u32 = 4;
pub const ACPI_PATH_SEGMENT_LENGTH: u32 = 5;
pub const ACPI_PATH_SEPARATOR: u8 = 46u8;
pub const ACPI_OEM_ID_SIZE: u32 = 6;
pub const ACPI_OEM_TABLE_ID_SIZE: u32 = 8;
pub const PCI_ROOT_HID_STRING: &[u8; 8] = b"PNP0A03\0";
pub const PCI_EXPRESS_ROOT_HID_STRING: &[u8; 8] = b"PNP0A08\0";
pub const ACPI_PM_TIMER_FREQUENCY: u32 = 3579545;
pub const ACPI_MSEC_PER_SEC: u32 = 1000;
pub const ACPI_USEC_PER_MSEC: u32 = 1000;
pub const ACPI_USEC_PER_SEC: u32 = 1000000;
pub const ACPI_100NSEC_PER_USEC: u32 = 10;
pub const ACPI_100NSEC_PER_MSEC: u32 = 10000;
pub const ACPI_100NSEC_PER_SEC: u32 = 10000000;
pub const ACPI_NSEC_PER_USEC: u32 = 1000;
pub const ACPI_NSEC_PER_MSEC: u32 = 1000000;
pub const ACPI_NSEC_PER_SEC: u32 = 1000000000;
pub const ACPI_OWNER_ID_MAX: u32 = 4095;
pub const ACPI_INTEGER_BIT_SIZE: u32 = 64;
pub const ACPI_MAX_DECIMAL_DIGITS: u32 = 20;
pub const ACPI_MAX64_DECIMAL_DIGITS: u32 = 20;
pub const ACPI_MAX32_DECIMAL_DIGITS: u32 = 10;
pub const ACPI_MAX16_DECIMAL_DIGITS: u32 = 5;
pub const ACPI_MAX8_DECIMAL_DIGITS: u32 = 3;
pub const ACPI_WAIT_FOREVER: u32 = 65535;
pub const ACPI_DO_NOT_WAIT: u32 = 0;
pub const ACPI_ACCESS_BIT_SHIFT: u32 = 2;
pub const ACPI_ACCESS_BYTE_SHIFT: i32 = -1;
pub const ACPI_ACCESS_BIT_MAX: u32 = 29;
pub const ACPI_ACCESS_BYTE_MAX: u32 = 32;
pub const ACPI_ACCESS_BIT_DEFAULT: u32 = 6;
pub const ACPI_ACCESS_BYTE_DEFAULT: u32 = 9;
pub const ACPI_FULL_INITIALIZATION: u32 = 0;
pub const ACPI_NO_FACS_INIT: u32 = 1;
pub const ACPI_NO_ACPI_ENABLE: u32 = 2;
pub const ACPI_NO_HARDWARE_INIT: u32 = 4;
pub const ACPI_NO_EVENT_INIT: u32 = 8;
pub const ACPI_NO_HANDLER_INIT: u32 = 16;
pub const ACPI_NO_OBJECT_INIT: u32 = 32;
pub const ACPI_NO_DEVICE_INIT: u32 = 64;
pub const ACPI_NO_ADDRESS_SPACE_INIT: u32 = 128;
pub const ACPI_SUBSYSTEM_INITIALIZE: u32 = 1;
pub const ACPI_INITIALIZED_OK: u32 = 2;
pub const ACPI_S_STATE_COUNT: u32 = 6;
pub const ACPI_D_STATE_COUNT: u32 = 4;
pub const ACPI_C_STATE_COUNT: u32 = 4;
pub const ACPI_SLEEP_TYPE_MAX: u32 = 7;
pub const ACPI_SLEEP_TYPE_INVALID: u32 = 255;
pub const ACPI_GENERIC_NOTIFY_MAX: u32 = 15;
pub const ACPI_SPECIFIC_NOTIFY_MAX: u32 = 132;
pub const ACPI_TYPE_ANY: u32 = 0;
pub const ACPI_TYPE_INTEGER: u32 = 1;
pub const ACPI_TYPE_STRING: u32 = 2;
pub const ACPI_TYPE_BUFFER: u32 = 3;
pub const ACPI_TYPE_PACKAGE: u32 = 4;
pub const ACPI_TYPE_FIELD_UNIT: u32 = 5;
pub const ACPI_TYPE_DEVICE: u32 = 6;
pub const ACPI_TYPE_EVENT: u32 = 7;
pub const ACPI_TYPE_METHOD: u32 = 8;
pub const ACPI_TYPE_MUTEX: u32 = 9;
pub const ACPI_TYPE_REGION: u32 = 10;
pub const ACPI_TYPE_POWER: u32 = 11;
pub const ACPI_TYPE_PROCESSOR: u32 = 12;
pub const ACPI_TYPE_THERMAL: u32 = 13;
pub const ACPI_TYPE_BUFFER_FIELD: u32 = 14;
pub const ACPI_TYPE_DDB_HANDLE: u32 = 15;
pub const ACPI_TYPE_DEBUG_OBJECT: u32 = 16;
pub const ACPI_TYPE_EXTERNAL_MAX: u32 = 16;
pub const ACPI_NUM_TYPES: u32 = 17;
pub const ACPI_TYPE_LOCAL_REGION_FIELD: u32 = 17;
pub const ACPI_TYPE_LOCAL_BANK_FIELD: u32 = 18;
pub const ACPI_TYPE_LOCAL_INDEX_FIELD: u32 = 19;
pub const ACPI_TYPE_LOCAL_REFERENCE: u32 = 20;
pub const ACPI_TYPE_LOCAL_ALIAS: u32 = 21;
pub const ACPI_TYPE_LOCAL_METHOD_ALIAS: u32 = 22;
pub const ACPI_TYPE_LOCAL_NOTIFY: u32 = 23;
pub const ACPI_TYPE_LOCAL_ADDRESS_HANDLER: u32 = 24;
pub const ACPI_TYPE_LOCAL_RESOURCE: u32 = 25;
pub const ACPI_TYPE_LOCAL_RESOURCE_FIELD: u32 = 26;
pub const ACPI_TYPE_LOCAL_SCOPE: u32 = 27;
pub const ACPI_TYPE_NS_NODE_MAX: u32 = 27;
pub const ACPI_TOTAL_TYPES: u32 = 28;
pub const ACPI_TYPE_LOCAL_EXTRA: u32 = 28;
pub const ACPI_TYPE_LOCAL_DATA: u32 = 29;
pub const ACPI_TYPE_LOCAL_MAX: u32 = 29;
pub const ACPI_TYPE_INVALID: u32 = 30;
pub const ACPI_TYPE_NOT_FOUND: u32 = 255;
pub const ACPI_NUM_NS_TYPES: u32 = 31;
pub const ACPI_READ: u32 = 0;
pub const ACPI_WRITE: u32 = 1;
pub const ACPI_IO_MASK: u32 = 1;
pub const ACPI_EVENT_PMTIMER: u32 = 0;
pub const ACPI_EVENT_GLOBAL: u32 = 1;
pub const ACPI_EVENT_POWER_BUTTON: u32 = 2;
pub const ACPI_EVENT_SLEEP_BUTTON: u32 = 3;
pub const ACPI_EVENT_RTC: u32 = 4;
pub const ACPI_EVENT_MAX: u32 = 4;
pub const ACPI_NUM_FIXED_EVENTS: u32 = 5;
pub const ACPI_GPE_ENABLE: u32 = 0;
pub const ACPI_GPE_DISABLE: u32 = 1;
pub const ACPI_GPE_CONDITIONAL_ENABLE: u32 = 2;
pub const ACPI_NOT_ISR: u32 = 1;
pub const ACPI_ISR: u32 = 0;
pub const ACPI_SYSTEM_NOTIFY: u32 = 1;
pub const ACPI_DEVICE_NOTIFY: u32 = 2;
pub const ACPI_ALL_NOTIFY: u32 = 3;
pub const ACPI_MAX_NOTIFY_HANDLER_TYPE: u32 = 3;
pub const ACPI_NUM_NOTIFY_TYPES: u32 = 2;
pub const ACPI_MAX_SYS_NOTIFY: u32 = 127;
pub const ACPI_MAX_DEVICE_SPECIFIC_NOTIFY: u32 = 191;
pub const ACPI_SYSTEM_HANDLER_LIST: u32 = 0;
pub const ACPI_DEVICE_HANDLER_LIST: u32 = 1;
pub const ACPI_NUM_PREDEFINED_REGIONS: u32 = 12;
pub const ACPI_REG_DISCONNECT: u32 = 0;
pub const ACPI_REG_CONNECT: u32 = 1;
pub const ACPI_BITREG_TIMER_STATUS: u32 = 0;
pub const ACPI_BITREG_BUS_MASTER_STATUS: u32 = 1;
pub const ACPI_BITREG_GLOBAL_LOCK_STATUS: u32 = 2;
pub const ACPI_BITREG_POWER_BUTTON_STATUS: u32 = 3;
pub const ACPI_BITREG_SLEEP_BUTTON_STATUS: u32 = 4;
pub const ACPI_BITREG_RT_CLOCK_STATUS: u32 = 5;
pub const ACPI_BITREG_WAKE_STATUS: u32 = 6;
pub const ACPI_BITREG_PCIEXP_WAKE_STATUS: u32 = 7;
pub const ACPI_BITREG_TIMER_ENABLE: u32 = 8;
pub const ACPI_BITREG_GLOBAL_LOCK_ENABLE: u32 = 9;
pub const ACPI_BITREG_POWER_BUTTON_ENABLE: u32 = 10;
pub const ACPI_BITREG_SLEEP_BUTTON_ENABLE: u32 = 11;
pub const ACPI_BITREG_RT_CLOCK_ENABLE: u32 = 12;
pub const ACPI_BITREG_PCIEXP_WAKE_DISABLE: u32 = 13;
pub const ACPI_BITREG_SCI_ENABLE: u32 = 14;
pub const ACPI_BITREG_BUS_MASTER_RLD: u32 = 15;
pub const ACPI_BITREG_GLOBAL_LOCK_RELEASE: u32 = 16;
pub const ACPI_BITREG_SLEEP_TYPE: u32 = 17;
pub const ACPI_BITREG_SLEEP_ENABLE: u32 = 18;
pub const ACPI_BITREG_ARB_DISABLE: u32 = 19;
pub const ACPI_BITREG_MAX: u32 = 19;
pub const ACPI_NUM_BITREG: u32 = 20;
pub const ACPI_CLEAR_STATUS: u32 = 1;
pub const ACPI_ENABLE_EVENT: u32 = 1;
pub const ACPI_DISABLE_EVENT: u32 = 0;
pub const ACPI_NO_BUFFER: u32 = 0;
pub const ACPI_FULL_PATHNAME: u32 = 0;
pub const ACPI_SINGLE_NAME: u32 = 1;
pub const ACPI_FULL_PATHNAME_NO_TRAILING: u32 = 2;
pub const ACPI_NAME_TYPE_MAX: u32 = 2;
pub const ACPI_SYS_MODE_UNKNOWN: u32 = 0;
pub const ACPI_SYS_MODE_ACPI: u32 = 1;
pub const ACPI_SYS_MODE_LEGACY: u32 = 2;
pub const ACPI_SYS_MODES_MASK: u32 = 3;
pub const ACPI_EVENT_TYPE_GPE: u32 = 0;
pub const ACPI_EVENT_TYPE_FIXED: u32 = 1;
pub const ACPI_INIT_DEVICE_INI: u32 = 1;
pub const ACPI_TABLE_EVENT_LOAD: u32 = 0;
pub const ACPI_TABLE_EVENT_UNLOAD: u32 = 1;
pub const ACPI_TABLE_EVENT_INSTALL: u32 = 2;
pub const ACPI_TABLE_EVENT_UNINSTALL: u32 = 3;
pub const ACPI_NUM_TABLE_EVENTS: u32 = 4;
pub const ACPI_REGION_ACTIVATE: u32 = 0;
pub const ACPI_REGION_DEACTIVATE: u32 = 1;
pub const ACPI_INTERRUPT_NOT_HANDLED: u32 = 0;
pub const ACPI_INTERRUPT_HANDLED: u32 = 1;
pub const ACPI_REENABLE_GPE: u32 = 128;
pub const ACPI_EISAID_STRING_SIZE: u32 = 8;
pub const ACPI_UUID_LENGTH: u32 = 16;
pub const ACPI_PCICLS_STRING_SIZE: u32 = 7;
pub const ACPI_PCI_ROOT_BRIDGE: u32 = 1;
pub const ACPI_VALID_ADR: u32 = 2;
pub const ACPI_VALID_HID: u32 = 4;
pub const ACPI_VALID_UID: u32 = 8;
pub const ACPI_VALID_CID: u32 = 32;
pub const ACPI_VALID_CLS: u32 = 64;
pub const ACPI_VALID_SXDS: u32 = 256;
pub const ACPI_VALID_SXWS: u32 = 512;
pub const ACPI_STA_DEVICE_PRESENT: u32 = 1;
pub const ACPI_STA_DEVICE_ENABLED: u32 = 2;
pub const ACPI_STA_DEVICE_UI: u32 = 4;
pub const ACPI_STA_DEVICE_FUNCTIONING: u32 = 8;
pub const ACPI_STA_DEVICE_OK: u32 = 8;
pub const ACPI_STA_BATTERY_PRESENT: u32 = 16;
pub const ACPI_VENDOR_STRINGS: u32 = 1;
pub const ACPI_FEATURE_STRINGS: u32 = 2;
pub const ACPI_ENABLE_INTERFACES: u32 = 0;
pub const ACPI_DISABLE_INTERFACES: u32 = 4;
pub const ACPI_DISABLE_ALL_VENDOR_STRINGS: u32 = 5;
pub const ACPI_DISABLE_ALL_FEATURE_STRINGS: u32 = 6;
pub const ACPI_DISABLE_ALL_STRINGS: u32 = 7;
pub const ACPI_ENABLE_ALL_VENDOR_STRINGS: u32 = 1;
pub const ACPI_ENABLE_ALL_FEATURE_STRINGS: u32 = 2;
pub const ACPI_ENABLE_ALL_STRINGS: u32 = 3;
pub const ACPI_OSI_WIN_2000: u32 = 1;
pub const ACPI_OSI_WIN_XP: u32 = 2;
pub const ACPI_OSI_WIN_XP_SP1: u32 = 3;
pub const ACPI_OSI_WINSRV_2003: u32 = 4;
pub const ACPI_OSI_WIN_XP_SP2: u32 = 5;
pub const ACPI_OSI_WINSRV_2003_SP1: u32 = 6;
pub const ACPI_OSI_WIN_VISTA: u32 = 7;
pub const ACPI_OSI_WINSRV_2008: u32 = 8;
pub const ACPI_OSI_WIN_VISTA_SP1: u32 = 9;
pub const ACPI_OSI_WIN_VISTA_SP2: u32 = 10;
pub const ACPI_OSI_WIN_7: u32 = 11;
pub const ACPI_OSI_WIN_8: u32 = 12;
pub const ACPI_OSI_WIN_8_1: u32 = 13;
pub const ACPI_OSI_WIN_10: u32 = 14;
pub const ACPI_OSI_WIN_10_RS1: u32 = 15;
pub const ACPI_OSI_WIN_10_RS2: u32 = 16;
pub const ACPI_OSI_WIN_10_RS3: u32 = 17;
pub const ACPI_OSI_WIN_10_RS4: u32 = 18;
pub const ACPI_OSI_WIN_10_RS5: u32 = 19;
pub const ACPI_OSI_WIN_10_19H1: u32 = 20;
pub const ACPI_OSI_WIN_10_20H1: u32 = 21;
pub const ACPI_OSI_WIN_11: u32 = 22;
pub const ACPI_OSI_WIN_11_22H2: u32 = 23;
pub const ACPI_OPT_END: i32 = -1;
pub const METHOD_NAME__ADR: &[u8; 5] = b"_ADR\0";
pub const METHOD_NAME__AEI: &[u8; 5] = b"_AEI\0";
pub const METHOD_NAME__BBN: &[u8; 5] = b"_BBN\0";
pub const METHOD_NAME__CBA: &[u8; 5] = b"_CBA\0";
pub const METHOD_NAME__CID: &[u8; 5] = b"_CID\0";
pub const METHOD_NAME__CLS: &[u8; 5] = b"_CLS\0";
pub const METHOD_NAME__CRS: &[u8; 5] = b"_CRS\0";
pub const METHOD_NAME__DDN: &[u8; 5] = b"_DDN\0";
pub const METHOD_NAME__DIS: &[u8; 5] = b"_DIS\0";
pub const METHOD_NAME__DMA: &[u8; 5] = b"_DMA\0";
pub const METHOD_NAME__EVT: &[u8; 5] = b"_EVT\0";
pub const METHOD_NAME__HID: &[u8; 5] = b"_HID\0";
pub const METHOD_NAME__INI: &[u8; 5] = b"_INI\0";
pub const METHOD_NAME__PLD: &[u8; 5] = b"_PLD\0";
pub const METHOD_NAME__DSD: &[u8; 5] = b"_DSD\0";
pub const METHOD_NAME__PRS: &[u8; 5] = b"_PRS\0";
pub const METHOD_NAME__PRT: &[u8; 5] = b"_PRT\0";
pub const METHOD_NAME__PRW: &[u8; 5] = b"_PRW\0";
pub const METHOD_NAME__PS0: &[u8; 5] = b"_PS0\0";
pub const METHOD_NAME__PS1: &[u8; 5] = b"_PS1\0";
pub const METHOD_NAME__PS2: &[u8; 5] = b"_PS2\0";
pub const METHOD_NAME__PS3: &[u8; 5] = b"_PS3\0";
pub const METHOD_NAME__REG: &[u8; 5] = b"_REG\0";
pub const METHOD_NAME__SB_: &[u8; 5] = b"_SB_\0";
pub const METHOD_NAME__SEG: &[u8; 5] = b"_SEG\0";
pub const METHOD_NAME__SRS: &[u8; 5] = b"_SRS\0";
pub const METHOD_NAME__STA: &[u8; 5] = b"_STA\0";
pub const METHOD_NAME__SUB: &[u8; 5] = b"_SUB\0";
pub const METHOD_NAME__UID: &[u8; 5] = b"_UID\0";
pub const METHOD_PATHNAME__PTS: &[u8; 6] = b"\\_PTS\0";
pub const METHOD_PATHNAME__SST: &[u8; 10] = b"\\_SI._SST\0";
pub const METHOD_PATHNAME__WAK: &[u8; 6] = b"\\_WAK\0";
pub const ACPI_ROOT_PATHNAME: &[u8; 5] = b"\\___\0";
pub const ACPI_NAMESPACE_ROOT: &[u8; 15] = b"Namespace Root\0";
pub const ACPI_NS_ROOT_PATH: &[u8; 2] = b"\\\0";
pub const AE_CODE_ENVIRONMENTAL: u32 = 0;
pub const AE_CODE_PROGRAMMER: u32 = 4096;
pub const AE_CODE_ACPI_TABLES: u32 = 8192;
pub const AE_CODE_AML: u32 = 12288;
pub const AE_CODE_CONTROL: u32 = 16384;
pub const AE_CODE_MAX: u32 = 16384;
pub const AE_CODE_MASK: u32 = 61440;
pub const AE_CODE_ENV_MAX: u32 = 35;
pub const AE_CODE_PGM_MAX: u32 = 9;
pub const AE_CODE_TBL_MAX: u32 = 5;
pub const AE_CODE_AML_MAX: u32 = 37;
pub const AE_CODE_CTRL_MAX: u32 = 12;
pub const ACPI_SIG_DSDT: &[u8; 5] = b"DSDT\0";
pub const ACPI_SIG_FADT: &[u8; 5] = b"FACP\0";
pub const ACPI_SIG_FACS: &[u8; 5] = b"FACS\0";
pub const ACPI_SIG_OSDT: &[u8; 5] = b"OSDT\0";
pub const ACPI_SIG_PSDT: &[u8; 5] = b"PSDT\0";
pub const ACPI_SIG_RSDP: &[u8; 9] = b"RSD PTR \0";
pub const ACPI_SIG_RSDT: &[u8; 5] = b"RSDT\0";
pub const ACPI_SIG_XSDT: &[u8; 5] = b"XSDT\0";
pub const ACPI_SIG_SSDT: &[u8; 5] = b"SSDT\0";
pub const ACPI_RSDP_NAME: &[u8; 5] = b"RSDP\0";
pub const ACPI_OEM_NAME: &[u8; 4] = b"OEM\0";
pub const ACPI_GLOCK_PENDING: u32 = 1;
pub const ACPI_GLOCK_OWNED: u32 = 2;
pub const ACPI_FACS_S4_BIOS_PRESENT: u32 = 1;
pub const ACPI_FACS_64BIT_WAKE: u32 = 2;
pub const ACPI_FACS_64BIT_ENVIRONMENT: u32 = 1;
pub const ACPI_FADT_LEGACY_DEVICES: u32 = 1;
pub const ACPI_FADT_8042: u32 = 2;
pub const ACPI_FADT_NO_VGA: u32 = 4;
pub const ACPI_FADT_NO_MSI: u32 = 8;
pub const ACPI_FADT_NO_ASPM: u32 = 16;
pub const ACPI_FADT_NO_CMOS_RTC: u32 = 32;
pub const ACPI_FADT_PSCI_COMPLIANT: u32 = 1;
pub const ACPI_FADT_PSCI_USE_HVC: u32 = 2;
pub const ACPI_FADT_WBINVD: u32 = 1;
pub const ACPI_FADT_WBINVD_FLUSH: u32 = 2;
pub const ACPI_FADT_C1_SUPPORTED: u32 = 4;
pub const ACPI_FADT_C2_MP_SUPPORTED: u32 = 8;
pub const ACPI_FADT_POWER_BUTTON: u32 = 16;
pub const ACPI_FADT_SLEEP_BUTTON: u32 = 32;
pub const ACPI_FADT_FIXED_RTC: u32 = 64;
pub const ACPI_FADT_S4_RTC_WAKE: u32 = 128;
pub const ACPI_FADT_32BIT_TIMER: u32 = 256;
pub const ACPI_FADT_DOCKING_SUPPORTED: u32 = 512;
pub const ACPI_FADT_RESET_REGISTER: u32 = 1024;
pub const ACPI_FADT_SEALED_CASE: u32 = 2048;
pub const ACPI_FADT_HEADLESS: u32 = 4096;
pub const ACPI_FADT_SLEEP_TYPE: u32 = 8192;
pub const ACPI_FADT_PCI_EXPRESS_WAKE: u32 = 16384;
pub const ACPI_FADT_PLATFORM_CLOCK: u32 = 32768;
pub const ACPI_FADT_S4_RTC_VALID: u32 = 65536;
pub const ACPI_FADT_REMOTE_POWER_ON: u32 = 131072;
pub const ACPI_FADT_APIC_CLUSTER: u32 = 262144;
pub const ACPI_FADT_APIC_PHYSICAL: u32 = 524288;
pub const ACPI_FADT_HW_REDUCED: u32 = 1048576;
pub const ACPI_FADT_LOW_POWER_S0: u32 = 2097152;
pub const ACPI_X_WAKE_STATUS: u32 = 128;
pub const ACPI_X_SLEEP_TYPE_MASK: u32 = 28;
pub const ACPI_X_SLEEP_TYPE_POSITION: u32 = 2;
pub const ACPI_X_SLEEP_ENABLE: u32 = 32;
pub const ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL: u32 = 0;
pub const ACPI_TABLE_ORIGIN_INTERNAL_PHYSICAL: u32 = 1;
pub const ACPI_TABLE_ORIGIN_INTERNAL_VIRTUAL: u32 = 2;
pub const ACPI_TABLE_ORIGIN_MASK: u32 = 3;
pub const ACPI_TABLE_IS_VERIFIED: u32 = 4;
pub const ACPI_TABLE_IS_LOADED: u32 = 8;
pub const ACPI_SIG_AEST: &[u8; 5] = b"AEST\0";
pub const ACPI_SIG_ASF: &[u8; 5] = b"ASF!\0";
pub const ACPI_SIG_ASPT: &[u8; 5] = b"ASPT\0";
pub const ACPI_SIG_BERT: &[u8; 5] = b"BERT\0";
pub const ACPI_SIG_BGRT: &[u8; 5] = b"BGRT\0";
pub const ACPI_SIG_BOOT: &[u8; 5] = b"BOOT\0";
pub const ACPI_SIG_CEDT: &[u8; 5] = b"CEDT\0";
pub const ACPI_SIG_CPEP: &[u8; 5] = b"CPEP\0";
pub const ACPI_SIG_CSRT: &[u8; 5] = b"CSRT\0";
pub const ACPI_SIG_DBG2: &[u8; 5] = b"DBG2\0";
pub const ACPI_SIG_DBGP: &[u8; 5] = b"DBGP\0";
pub const ACPI_SIG_DMAR: &[u8; 5] = b"DMAR\0";
pub const ACPI_SIG_DRTM: &[u8; 5] = b"DRTM\0";
pub const ACPI_SIG_ECDT: &[u8; 5] = b"ECDT\0";
pub const ACPI_SIG_EINJ: &[u8; 5] = b"EINJ\0";
pub const ACPI_SIG_ERST: &[u8; 5] = b"ERST\0";
pub const ACPI_SIG_FPDT: &[u8; 5] = b"FPDT\0";
pub const ACPI_SIG_GTDT: &[u8; 5] = b"GTDT\0";
pub const ACPI_SIG_HEST: &[u8; 5] = b"HEST\0";
pub const ACPI_SIG_HMAT: &[u8; 5] = b"HMAT\0";
pub const ACPI_SIG_HPET: &[u8; 5] = b"HPET\0";
pub const ACPI_SIG_IBFT: &[u8; 5] = b"IBFT\0";
pub const ACPI_SIG_MSCT: &[u8; 5] = b"MSCT\0";
pub const ACPI_SIG_S3PT: &[u8; 5] = b"S3PT\0";
pub const ACPI_SIG_PCCS: &[u8; 4] = b"PCC\0";
pub const ACPI_SIG_MATR: &[u8; 5] = b"MATR\0";
pub const ACPI_SIG_MSDM: &[u8; 5] = b"MSDM\0";
pub const ACPI_ASF_SMBUS_PROTOCOLS: u32 = 1;
pub const ACPI_BERT_UNCORRECTABLE: u32 = 1;
pub const ACPI_BERT_CORRECTABLE: u32 = 2;
pub const ACPI_BERT_MULTIPLE_UNCORRECTABLE: u32 = 4;
pub const ACPI_BERT_MULTIPLE_CORRECTABLE: u32 = 8;
pub const ACPI_BERT_ERROR_ENTRY_COUNT: u32 = 4080;
pub const ACPI_BGRT_DISPLAYED: u32 = 1;
pub const ACPI_BGRT_ORIENTATION_OFFSET: u32 = 6;
pub const ACPI_CDAT_DSMAS_NON_VOLATILE: u32 = 4;
pub const ACPI_CDAT_DSMAS_SHAREABLE: u32 = 8;
pub const ACPI_CDAT_DSMAS_READ_ONLY: u32 = 64;
pub const ACPI_CDAT_DSIS_MEM_ATTACHED: u32 = 1;
pub const ACPI_CDAT_SSLBIS_US_PORT: u32 = 256;
pub const ACPI_CDAT_SSLBIS_ANY_PORT: u32 = 65535;
pub const ACPI_CEDT_CHBS_VERSION_CXL11: u32 = 0;
pub const ACPI_CEDT_CHBS_VERSION_CXL20: u32 = 1;
pub const ACPI_CEDT_CHBS_LENGTH_CXL11: u32 = 8192;
pub const ACPI_CEDT_CHBS_LENGTH_CXL20: u32 = 65536;
pub const ACPI_CEDT_CFMWS_ARITHMETIC_MODULO: u32 = 0;
pub const ACPI_CEDT_CFMWS_ARITHMETIC_XOR: u32 = 1;
pub const ACPI_CEDT_CFMWS_RESTRICT_TYPE2: u32 = 1;
pub const ACPI_CEDT_CFMWS_RESTRICT_TYPE3: u32 = 2;
pub const ACPI_CEDT_CFMWS_RESTRICT_VOLATILE: u32 = 4;
pub const ACPI_CEDT_CFMWS_RESTRICT_PMEM: u32 = 8;
pub const ACPI_CEDT_CFMWS_RESTRICT_FIXED: u32 = 16;
pub const ACPI_CEDT_RDPAS_BUS_MASK: u32 = 65280;
pub const ACPI_CEDT_RDPAS_DEVICE_MASK: u32 = 248;
pub const ACPI_CEDT_RDPAS_FUNCTION_MASK: u32 = 7;
pub const ACPI_CEDT_RDPAS_PROTOCOL_IO: u32 = 0;
pub const ACPI_CEDT_RDPAS_PROTOCOL_CACHEMEM: u32 = 1;
pub const ACPI_CSRT_TYPE_INTERRUPT: u32 = 1;
pub const ACPI_CSRT_TYPE_TIMER: u32 = 2;
pub const ACPI_CSRT_TYPE_DMA: u32 = 3;
pub const ACPI_CSRT_XRUPT_LINE: u32 = 0;
pub const ACPI_CSRT_XRUPT_CONTROLLER: u32 = 1;
pub const ACPI_CSRT_TIMER: u32 = 0;
pub const ACPI_CSRT_DMA_CHANNEL: u32 = 0;
pub const ACPI_CSRT_DMA_CONTROLLER: u32 = 1;
pub const ACPI_DBG2_SERIAL_PORT: u32 = 32768;
pub const ACPI_DBG2_1394_PORT: u32 = 32769;
pub const ACPI_DBG2_USB_PORT: u32 = 32770;
pub const ACPI_DBG2_NET_PORT: u32 = 32771;
pub const ACPI_DBG2_16550_COMPATIBLE: u32 = 0;
pub const ACPI_DBG2_16550_SUBSET: u32 = 1;
pub const ACPI_DBG2_MAX311XE_SPI: u32 = 2;
pub const ACPI_DBG2_ARM_PL011: u32 = 3;
pub const ACPI_DBG2_MSM8X60: u32 = 4;
pub const ACPI_DBG2_16550_NVIDIA: u32 = 5;
pub const ACPI_DBG2_TI_OMAP: u32 = 6;
pub const ACPI_DBG2_APM88XXXX: u32 = 8;
pub const ACPI_DBG2_MSM8974: u32 = 9;
pub const ACPI_DBG2_SAM5250: u32 = 10;
pub const ACPI_DBG2_INTEL_USIF: u32 = 11;
pub const ACPI_DBG2_IMX6: u32 = 12;
pub const ACPI_DBG2_ARM_SBSA_32BIT: u32 = 13;
pub const ACPI_DBG2_ARM_SBSA_GENERIC: u32 = 14;
pub const ACPI_DBG2_ARM_DCC: u32 = 15;
pub const ACPI_DBG2_BCM2835: u32 = 16;
pub const ACPI_DBG2_SDM845_1_8432MHZ: u32 = 17;
pub const ACPI_DBG2_16550_WITH_GAS: u32 = 18;
pub const ACPI_DBG2_SDM845_7_372MHZ: u32 = 19;
pub const ACPI_DBG2_INTEL_LPSS: u32 = 20;
pub const ACPI_DBG2_RISCV_SBI_CON: u32 = 21;
pub const ACPI_DBG2_1394_STANDARD: u32 = 0;
pub const ACPI_DBG2_USB_XHCI: u32 = 0;
pub const ACPI_DBG2_USB_EHCI: u32 = 1;
pub const ACPI_DMAR_INTR_REMAP: u32 = 1;
pub const ACPI_DMAR_X2APIC_OPT_OUT: u32 = 2;
pub const ACPI_DMAR_X2APIC_MODE: u32 = 4;
pub const ACPI_DMAR_INCLUDE_ALL: u32 = 1;
pub const ACPI_DMAR_ALLOW_ALL: u32 = 1;
pub const ACPI_DMAR_ALL_PORTS: u32 = 1;
pub const ACPI_DRTM_ACCESS_ALLOWED: u32 = 1;
pub const ACPI_DRTM_ENABLE_GAP_CODE: u32 = 2;
pub const ACPI_DRTM_INCOMPLETE_MEASUREMENTS: u32 = 4;
pub const ACPI_DRTM_AUTHORITY_ORDER: u32 = 8;
pub const ACPI_EINJ_PRESERVE: u32 = 1;
pub const ACPI_EINJ_PROCESSOR_CORRECTABLE: u32 = 1;
pub const ACPI_EINJ_PROCESSOR_UNCORRECTABLE: u32 = 2;
pub const ACPI_EINJ_PROCESSOR_FATAL: u32 = 4;
pub const ACPI_EINJ_MEMORY_CORRECTABLE: u32 = 8;
pub const ACPI_EINJ_MEMORY_UNCORRECTABLE: u32 = 16;
pub const ACPI_EINJ_MEMORY_FATAL: u32 = 32;
pub const ACPI_EINJ_PCIX_CORRECTABLE: u32 = 64;
pub const ACPI_EINJ_PCIX_UNCORRECTABLE: u32 = 128;
pub const ACPI_EINJ_PCIX_FATAL: u32 = 256;
pub const ACPI_EINJ_PLATFORM_CORRECTABLE: u32 = 512;
pub const ACPI_EINJ_PLATFORM_UNCORRECTABLE: u32 = 1024;
pub const ACPI_EINJ_PLATFORM_FATAL: u32 = 2048;
pub const ACPI_EINJ_CXL_CACHE_CORRECTABLE: u32 = 4096;
pub const ACPI_EINJ_CXL_CACHE_UNCORRECTABLE: u32 = 8192;
pub const ACPI_EINJ_CXL_CACHE_FATAL: u32 = 16384;
pub const ACPI_EINJ_CXL_MEM_CORRECTABLE: u32 = 32768;
pub const ACPI_EINJ_CXL_MEM_UNCORRECTABLE: u32 = 65536;
pub const ACPI_EINJ_CXL_MEM_FATAL: u32 = 131072;
pub const ACPI_EINJ_VENDOR_DEFINED: u32 = 2147483648;
pub const ACPI_ERST_PRESERVE: u32 = 1;
pub const ACPI_GTDT_INTERRUPT_MODE: u32 = 1;
pub const ACPI_GTDT_INTERRUPT_POLARITY: u32 = 2;
pub const ACPI_GTDT_ALWAYS_ON: u32 = 4;
pub const ACPI_GTDT_GT_IRQ_MODE: u32 = 1;
pub const ACPI_GTDT_GT_IRQ_POLARITY: u32 = 2;
pub const ACPI_GTDT_GT_IS_SECURE_TIMER: u32 = 1;
pub const ACPI_GTDT_GT_ALWAYS_ON: u32 = 2;
pub const ACPI_GTDT_WATCHDOG_IRQ_MODE: u32 = 1;
pub const ACPI_GTDT_WATCHDOG_IRQ_POLARITY: u32 = 2;
pub const ACPI_GTDT_WATCHDOG_SECURE: u32 = 4;
pub const ACPI_HEST_FIRMWARE_FIRST: u32 = 1;
pub const ACPI_HEST_GLOBAL: u32 = 2;
pub const ACPI_HEST_GHES_ASSIST: u32 = 4;
pub const ACPI_HEST_TYPE: u32 = 1;
pub const ACPI_HEST_POLL_INTERVAL: u32 = 2;
pub const ACPI_HEST_POLL_THRESHOLD_VALUE: u32 = 4;
pub const ACPI_HEST_POLL_THRESHOLD_WINDOW: u32 = 8;
pub const ACPI_HEST_ERR_THRESHOLD_VALUE: u32 = 16;
pub const ACPI_HEST_ERR_THRESHOLD_WINDOW: u32 = 32;
pub const ACPI_HEST_UNCORRECTABLE: u32 = 1;
pub const ACPI_HEST_CORRECTABLE: u32 = 2;
pub const ACPI_HEST_MULTIPLE_UNCORRECTABLE: u32 = 4;
pub const ACPI_HEST_MULTIPLE_CORRECTABLE: u32 = 8;
pub const ACPI_HEST_ERROR_ENTRY_COUNT: u32 = 4080;
pub const ACPI_HEST_GEN_ERROR_RECOVERABLE: u32 = 0;
pub const ACPI_HEST_GEN_ERROR_FATAL: u32 = 1;
pub const ACPI_HEST_GEN_ERROR_CORRECTED: u32 = 2;
pub const ACPI_HEST_GEN_ERROR_NONE: u32 = 3;
pub const ACPI_HEST_GEN_VALID_FRU_ID: u32 = 1;
pub const ACPI_HEST_GEN_VALID_FRU_STRING: u32 = 2;
pub const ACPI_HEST_GEN_VALID_TIMESTAMP: u32 = 4;
pub const ACPI_HMAT_INITIATOR_PD_VALID: u32 = 1;
pub const ACPI_HMAT_MEMORY_HIERARCHY: u32 = 15;
pub const ACPI_HMAT_MEMORY: u32 = 0;
pub const ACPI_HMAT_1ST_LEVEL_CACHE: u32 = 1;
pub const ACPI_HMAT_2ND_LEVEL_CACHE: u32 = 2;
pub const ACPI_HMAT_3RD_LEVEL_CACHE: u32 = 3;
pub const ACPI_HMAT_MINIMUM_XFER_SIZE: u32 = 16;
pub const ACPI_HMAT_NON_SEQUENTIAL_XFERS: u32 = 32;
pub const ACPI_HMAT_ACCESS_LATENCY: u32 = 0;
pub const ACPI_HMAT_READ_LATENCY: u32 = 1;
pub const ACPI_HMAT_WRITE_LATENCY: u32 = 2;
pub const ACPI_HMAT_ACCESS_BANDWIDTH: u32 = 3;
pub const ACPI_HMAT_READ_BANDWIDTH: u32 = 4;
pub const ACPI_HMAT_WRITE_BANDWIDTH: u32 = 5;
pub const ACPI_HMAT_TOTAL_CACHE_LEVEL: u32 = 15;
pub const ACPI_HMAT_CACHE_LEVEL: u32 = 240;
pub const ACPI_HMAT_CACHE_ASSOCIATIVITY: u32 = 3840;
pub const ACPI_HMAT_WRITE_POLICY: u32 = 61440;
pub const ACPI_HMAT_CACHE_LINE_SIZE: u32 = 4294901760;
pub const ACPI_HMAT_CACHE_MODE_UNKNOWN: u32 = 0;
pub const ACPI_HMAT_CACHE_MODE_EXTENDED_LINEAR: u32 = 1;
pub const ACPI_HMAT_CA_NONE: u32 = 0;
pub const ACPI_HMAT_CA_DIRECT_MAPPED: u32 = 1;
pub const ACPI_HMAT_CA_COMPLEX_CACHE_INDEXING: u32 = 2;
pub const ACPI_HMAT_CP_NONE: u32 = 0;
pub const ACPI_HMAT_CP_WB: u32 = 1;
pub const ACPI_HMAT_CP_WT: u32 = 2;
pub const ACPI_HPET_PAGE_PROTECT_MASK: u32 = 3;
pub const ACPI_SIG_AGDI: &[u8; 5] = b"AGDI\0";
pub const ACPI_SIG_APMT: &[u8; 5] = b"APMT\0";
pub const ACPI_SIG_BDAT: &[u8; 5] = b"BDAT\0";
pub const ACPI_SIG_CCEL: &[u8; 5] = b"CCEL\0";
pub const ACPI_SIG_CDAT: &[u8; 5] = b"CDAT\0";
pub const ACPI_SIG_ERDT: &[u8; 5] = b"ERDT\0";
pub const ACPI_SIG_IORT: &[u8; 5] = b"IORT\0";
pub const ACPI_SIG_IVRS: &[u8; 5] = b"IVRS\0";
pub const ACPI_SIG_LPIT: &[u8; 5] = b"LPIT\0";
pub const ACPI_SIG_MADT: &[u8; 5] = b"APIC\0";
pub const ACPI_SIG_MCFG: &[u8; 5] = b"MCFG\0";
pub const ACPI_SIG_MCHI: &[u8; 5] = b"MCHI\0";
pub const ACPI_SIG_MPAM: &[u8; 5] = b"MPAM\0";
pub const ACPI_SIG_MPST: &[u8; 5] = b"MPST\0";
pub const ACPI_SIG_MRRM: &[u8; 5] = b"MRRM\0";
pub const ACPI_SIG_NFIT: &[u8; 5] = b"NFIT\0";
pub const ACPI_SIG_NHLT: &[u8; 5] = b"NHLT\0";
pub const ACPI_SIG_PCCT: &[u8; 5] = b"PCCT\0";
pub const ACPI_SIG_PDTT: &[u8; 5] = b"PDTT\0";
pub const ACPI_SIG_PHAT: &[u8; 5] = b"PHAT\0";
pub const ACPI_SIG_PMTT: &[u8; 5] = b"PMTT\0";
pub const ACPI_SIG_PPTT: &[u8; 5] = b"PPTT\0";
pub const ACPI_SIG_PRMT: &[u8; 5] = b"PRMT\0";
pub const ACPI_SIG_RASF: &[u8; 5] = b"RASF\0";
pub const ACPI_SIG_RAS2: &[u8; 5] = b"RAS2\0";
pub const ACPI_SIG_RGRT: &[u8; 5] = b"RGRT\0";
pub const ACPI_SIG_RHCT: &[u8; 5] = b"RHCT\0";
pub const ACPI_SIG_RIMT: &[u8; 5] = b"RIMT\0";
pub const ACPI_SIG_SBST: &[u8; 5] = b"SBST\0";
pub const ACPI_SIG_SDEI: &[u8; 5] = b"SDEI\0";
pub const ACPI_SIG_SDEV: &[u8; 5] = b"SDEV\0";
pub const ACPI_SIG_SVKL: &[u8; 5] = b"SVKL\0";
pub const ACPI_SIG_TDEL: &[u8; 5] = b"TDEL\0";
pub const ACPI_AEST_PROCESSOR_ERROR_NODE: u32 = 0;
pub const ACPI_AEST_MEMORY_ERROR_NODE: u32 = 1;
pub const ACPI_AEST_SMMU_ERROR_NODE: u32 = 2;
pub const ACPI_AEST_VENDOR_ERROR_NODE: u32 = 3;
pub const ACPI_AEST_GIC_ERROR_NODE: u32 = 4;
pub const ACPI_AEST_PCIE_ERROR_NODE: u32 = 5;
pub const ACPI_AEST_PROXY_ERROR_NODE: u32 = 6;
pub const ACPI_AEST_NODE_TYPE_RESERVED: u32 = 7;
pub const ACPI_AEST_CACHE_RESOURCE: u32 = 0;
pub const ACPI_AEST_TLB_RESOURCE: u32 = 1;
pub const ACPI_AEST_GENERIC_RESOURCE: u32 = 2;
pub const ACPI_AEST_RESOURCE_RESERVED: u32 = 3;
pub const ACPI_AEST_CACHE_DATA: u32 = 0;
pub const ACPI_AEST_CACHE_INSTRUCTION: u32 = 1;
pub const ACPI_AEST_CACHE_UNIFIED: u32 = 2;
pub const ACPI_AEST_CACHE_RESERVED: u32 = 3;
pub const ACPI_AEST_GIC_CPU: u32 = 0;
pub const ACPI_AEST_GIC_DISTRIBUTOR: u32 = 1;
pub const ACPI_AEST_GIC_REDISTRIBUTOR: u32 = 2;
pub const ACPI_AEST_GIC_ITS: u32 = 3;
pub const ACPI_AEST_GIC_RESERVED: u32 = 4;
pub const ACPI_AEST_NODE_GROUP_FORMAT_4K: u32 = 0;
pub const ACPI_AEST_NODE_GROUP_FORMAT_16K: u32 = 1;
pub const ACPI_AEST_NODE_GROUP_FORMAT_64K: u32 = 2;
pub const ACPI_AEST_NODE_SYSTEM_REGISTER: u32 = 0;
pub const ACPI_AEST_NODE_MEMORY_MAPPED: u32 = 1;
pub const ACPI_AEST_NODE_SINGLE_RECORD_MEMORY_MAPPED: u32 = 2;
pub const ACPI_AEST_XFACE_RESERVED: u32 = 3;
pub const ACPI_AEST_NODE_FAULT_HANDLING: u32 = 0;
pub const ACPI_AEST_NODE_ERROR_RECOVERY: u32 = 1;
pub const ACPI_AEST_XRUPT_RESERVED: u32 = 2;
pub const ACPI_AGDI_SIGNALING_MODE: u32 = 1;
pub const ACPI_APMT_NODE_ID_LENGTH: u32 = 4;
pub const ACPI_APMT_FLAGS_DUAL_PAGE: u32 = 1;
pub const ACPI_APMT_FLAGS_AFFINITY: u32 = 2;
pub const ACPI_APMT_FLAGS_ATOMIC: u32 = 4;
pub const ACPI_APMT_FLAGS_DUAL_PAGE_NSUPP: u32 = 0;
pub const ACPI_APMT_FLAGS_DUAL_PAGE_SUPP: u32 = 1;
pub const ACPI_APMT_FLAGS_AFFINITY_PROC: u32 = 0;
pub const ACPI_APMT_FLAGS_AFFINITY_PROC_CONTAINER: u32 = 2;
pub const ACPI_APMT_FLAGS_ATOMIC_NSUPP: u32 = 0;
pub const ACPI_APMT_FLAGS_ATOMIC_SUPP: u32 = 4;
pub const ACPI_APMT_OVFLW_IRQ_FLAGS_MODE: u32 = 1;
pub const ACPI_APMT_OVFLW_IRQ_FLAGS_TYPE: u32 = 2;
pub const ACPI_APMT_OVFLW_IRQ_FLAGS_MODE_LEVEL: u32 = 0;
pub const ACPI_APMT_OVFLW_IRQ_FLAGS_MODE_EDGE: u32 = 1;
pub const ACPI_APMT_OVFLW_IRQ_FLAGS_TYPE_WIRED: u32 = 0;
pub const ACPI_IORT_ID_SINGLE_MAPPING: u32 = 1;
pub const ACPI_IORT_NODE_COHERENT: u32 = 1;
pub const ACPI_IORT_NODE_NOT_COHERENT: u32 = 0;
pub const ACPI_IORT_HT_TRANSIENT: u32 = 1;
pub const ACPI_IORT_HT_WRITE: u32 = 2;
pub const ACPI_IORT_HT_READ: u32 = 4;
pub const ACPI_IORT_HT_OVERRIDE: u32 = 8;
pub const ACPI_IORT_MF_COHERENCY: u32 = 1;
pub const ACPI_IORT_MF_ATTRIBUTES: u32 = 2;
pub const ACPI_IORT_MF_CANWBS: u32 = 4;
pub const ACPI_IORT_NC_STALL_SUPPORTED: u32 = 1;
pub const ACPI_IORT_NC_PASID_BITS: u32 = 62;
pub const ACPI_IORT_ATS_SUPPORTED: u32 = 1;
pub const ACPI_IORT_PRI_SUPPORTED: u32 = 2;
pub const ACPI_IORT_PASID_FWD_SUPPORTED: u32 = 4;
pub const ACPI_IORT_PASID_MAX_WIDTH: u32 = 31;
pub const ACPI_IORT_SMMU_V1: u32 = 0;
pub const ACPI_IORT_SMMU_V2: u32 = 1;
pub const ACPI_IORT_SMMU_CORELINK_MMU400: u32 = 2;
pub const ACPI_IORT_SMMU_CORELINK_MMU500: u32 = 3;
pub const ACPI_IORT_SMMU_CORELINK_MMU401: u32 = 4;
pub const ACPI_IORT_SMMU_CAVIUM_THUNDERX: u32 = 5;
pub const ACPI_IORT_SMMU_DVM_SUPPORTED: u32 = 1;
pub const ACPI_IORT_SMMU_COHERENT_WALK: u32 = 2;
pub const ACPI_IORT_SMMU_V3_GENERIC: u32 = 0;
pub const ACPI_IORT_SMMU_V3_HISILICON_HI161X: u32 = 1;
pub const ACPI_IORT_SMMU_V3_CAVIUM_CN99XX: u32 = 2;
pub const ACPI_IORT_SMMU_V3_COHACC_OVERRIDE: u32 = 1;
pub const ACPI_IORT_SMMU_V3_HTTU_OVERRIDE: u32 = 6;
pub const ACPI_IORT_SMMU_V3_PXM_VALID: u32 = 8;
pub const ACPI_IORT_SMMU_V3_DEVICEID_VALID: u32 = 16;
pub const ACPI_IORT_RMR_REMAP_PERMITTED: u32 = 1;
pub const ACPI_IORT_RMR_ACCESS_PRIVILEGE: u32 = 2;
pub const ACPI_IORT_RMR_ATTR_DEVICE_NGNRNE: u32 = 0;
pub const ACPI_IORT_RMR_ATTR_DEVICE_NGNRE: u32 = 1;
pub const ACPI_IORT_RMR_ATTR_DEVICE_NGRE: u32 = 2;
pub const ACPI_IORT_RMR_ATTR_DEVICE_GRE: u32 = 3;
pub const ACPI_IORT_RMR_ATTR_NORMAL_NC: u32 = 4;
pub const ACPI_IORT_RMR_ATTR_NORMAL_IWB_OWB: u32 = 5;
pub const ACPI_IVRS_PHYSICAL_SIZE: u32 = 32512;
pub const ACPI_IVRS_VIRTUAL_SIZE: u32 = 4161536;
pub const ACPI_IVRS_ATS_RESERVED: u32 = 4194304;
pub const ACPI_IVHD_TT_ENABLE: u32 = 1;
pub const ACPI_IVHD_PASS_PW: u32 = 2;
pub const ACPI_IVHD_RES_PASS_PW: u32 = 4;
pub const ACPI_IVHD_ISOC: u32 = 8;
pub const ACPI_IVHD_IOTLB: u32 = 16;
pub const ACPI_IVMD_UNITY: u32 = 1;
pub const ACPI_IVMD_READ: u32 = 2;
pub const ACPI_IVMD_WRITE: u32 = 4;
pub const ACPI_IVMD_EXCLUSION_RANGE: u32 = 8;
pub const ACPI_IVHD_MSI_NUMBER_MASK: u32 = 31;
pub const ACPI_IVHD_UNIT_ID_MASK: u32 = 7936;
pub const ACPI_IVHD_ENTRY_LENGTH: u32 = 192;
pub const ACPI_IVHD_INIT_PASS: u32 = 1;
pub const ACPI_IVHD_EINT_PASS: u32 = 2;
pub const ACPI_IVHD_NMI_PASS: u32 = 4;
pub const ACPI_IVHD_SYSTEM_MGMT: u32 = 48;
pub const ACPI_IVHD_LINT0_PASS: u32 = 64;
pub const ACPI_IVHD_LINT1_PASS: u32 = 128;
pub const ACPI_IVHD_ATS_DISABLED: u32 = 2147483648;
pub const ACPI_IVHD_IOAPIC: u32 = 1;
pub const ACPI_IVHD_HPET: u32 = 2;
pub const ACPI_IVRS_UID_NOT_PRESENT: u32 = 0;
pub const ACPI_IVRS_UID_IS_INTEGER: u32 = 1;
pub const ACPI_IVRS_UID_IS_STRING: u32 = 2;
pub const ACPI_LPIT_STATE_DISABLED: u32 = 1;
pub const ACPI_LPIT_NO_COUNTER: u32 = 2;
pub const ACPI_MADT_PCAT_COMPAT: u32 = 1;
pub const ACPI_MADT_DUAL_PIC: u32 = 1;
pub const ACPI_MADT_MULTIPLE_APIC: u32 = 0;
pub const ACPI_MADT_CPEI_OVERRIDE: u32 = 1;
pub const ACPI_MADT_PERFORMANCE_IRQ_MODE: u32 = 2;
pub const ACPI_MADT_VGIC_IRQ_MODE: u32 = 4;
pub const ACPI_MADT_GICC_ONLINE_CAPABLE: u32 = 8;
pub const ACPI_MADT_GICC_NON_COHERENT: u32 = 16;
pub const ACPI_MADT_OVERRIDE_SPI_VALUES: u32 = 1;
pub const ACPI_MADT_GICR_NON_COHERENT: u32 = 1;
pub const ACPI_MADT_ITS_NON_COHERENT: u32 = 1;
pub const ACPI_MULTIPROC_WAKEUP_MB_OS_SIZE: u32 = 2032;
pub const ACPI_MULTIPROC_WAKEUP_MB_FIRMWARE_SIZE: u32 = 2048;
pub const ACPI_MP_WAKE_COMMAND_WAKEUP: u32 = 1;
pub const ACPI_MADT_ENABLED: u32 = 1;
pub const ACPI_MADT_ONLINE_CAPABLE: u32 = 2;
pub const ACPI_MADT_POLARITY_MASK: u32 = 3;
pub const ACPI_MADT_TRIGGER_MASK: u32 = 12;
pub const ACPI_MADT_POLARITY_CONFORMS: u32 = 0;
pub const ACPI_MADT_POLARITY_ACTIVE_HIGH: u32 = 1;
pub const ACPI_MADT_POLARITY_RESERVED: u32 = 2;
pub const ACPI_MADT_POLARITY_ACTIVE_LOW: u32 = 3;
pub const ACPI_MADT_TRIGGER_CONFORMS: u32 = 0;
pub const ACPI_MADT_TRIGGER_EDGE: u32 = 4;
pub const ACPI_MADT_TRIGGER_RESERVED: u32 = 8;
pub const ACPI_MADT_TRIGGER_LEVEL: u32 = 12;
pub const ACPI_MPST_ENABLED: u32 = 1;
pub const ACPI_MPST_POWER_MANAGED: u32 = 2;
pub const ACPI_MPST_HOT_PLUG_CAPABLE: u32 = 4;
pub const ACPI_MPST_PRESERVE: u32 = 1;
pub const ACPI_MPST_AUTOENTRY: u32 = 2;
pub const ACPI_MPST_AUTOEXIT: u32 = 4;
pub const ACPI_MRRM_FLAGS_REGION_ASSIGNMENT_OS: u32 = 1;
pub const ACPI_MRRM_VALID_REGION_ID_FLAGS_LOCAL: u32 = 1;
pub const ACPI_MRRM_VALID_REGION_ID_FLAGS_REMOTE: u32 = 2;
pub const ACPI_NFIT_ADD_ONLINE_ONLY: u32 = 1;
pub const ACPI_NFIT_PROXIMITY_VALID: u32 = 2;
pub const ACPI_NFIT_LOCATION_COOKIE_VALID: u32 = 4;
pub const ACPI_NFIT_MEM_SAVE_FAILED: u32 = 1;
pub const ACPI_NFIT_MEM_RESTORE_FAILED: u32 = 2;
pub const ACPI_NFIT_MEM_FLUSH_FAILED: u32 = 4;
pub const ACPI_NFIT_MEM_NOT_ARMED: u32 = 8;
pub const ACPI_NFIT_MEM_HEALTH_OBSERVED: u32 = 16;
pub const ACPI_NFIT_MEM_HEALTH_ENABLED: u32 = 32;
pub const ACPI_NFIT_MEM_MAP_FAILED: u32 = 64;
pub const ACPI_NFIT_CONTROL_BUFFERED: u32 = 1;
pub const ACPI_NFIT_CONTROL_MFG_INFO_VALID: u32 = 1;
pub const ACPI_NFIT_CAPABILITY_CACHE_FLUSH: u32 = 1;
pub const ACPI_NFIT_CAPABILITY_MEM_FLUSH: u32 = 2;
pub const ACPI_NFIT_CAPABILITY_MEM_MIRRORING: u32 = 4;
pub const ACPI_NFIT_DIMM_NUMBER_MASK: u32 = 15;
pub const ACPI_NFIT_CHANNEL_NUMBER_MASK: u32 = 240;
pub const ACPI_NFIT_MEMORY_ID_MASK: u32 = 3840;
pub const ACPI_NFIT_SOCKET_ID_MASK: u32 = 61440;
pub const ACPI_NFIT_NODE_ID_MASK: u32 = 268369920;
pub const ACPI_NFIT_DIMM_NUMBER_OFFSET: u32 = 0;
pub const ACPI_NFIT_CHANNEL_NUMBER_OFFSET: u32 = 4;
pub const ACPI_NFIT_MEMORY_ID_OFFSET: u32 = 8;
pub const ACPI_NFIT_SOCKET_ID_OFFSET: u32 = 12;
pub const ACPI_NFIT_NODE_ID_OFFSET: u32 = 16;
pub const ACPI_NHLT_LINKTYPE_HDA: u32 = 0;
pub const ACPI_NHLT_LINKTYPE_DSP: u32 = 1;
pub const ACPI_NHLT_LINKTYPE_PDM: u32 = 2;
pub const ACPI_NHLT_LINKTYPE_SSP: u32 = 3;
pub const ACPI_NHLT_LINKTYPE_SLIMBUS: u32 = 4;
pub const ACPI_NHLT_LINKTYPE_SDW: u32 = 5;
pub const ACPI_NHLT_LINKTYPE_UAOL: u32 = 6;
pub const ACPI_NHLT_DEVICEID_DMIC: u32 = 44576;
pub const ACPI_NHLT_DEVICEID_BT: u32 = 44592;
pub const ACPI_NHLT_DEVICEID_I2S: u32 = 44596;
pub const ACPI_NHLT_DEVICETYPE_PDM: u32 = 0;
pub const ACPI_NHLT_DEVICETYPE_PDM_SKL: u32 = 1;
pub const ACPI_NHLT_DEVICETYPE_BT: u32 = 0;
pub const ACPI_NHLT_DEVICETYPE_FM: u32 = 1;
pub const ACPI_NHLT_DEVICETYPE_MODEM: u32 = 2;
pub const ACPI_NHLT_DEVICETYPE_CODEC: u32 = 4;
pub const ACPI_NHLT_DIR_RENDER: u32 = 0;
pub const ACPI_NHLT_DIR_CAPTURE: u32 = 1;
pub const ACPI_NHLT_CONFIGTYPE_GENERIC: u32 = 0;
pub const ACPI_NHLT_CONFIGTYPE_MICARRAY: u32 = 1;
pub const ACPI_NHLT_ARRAYTYPE_LINEAR2_SMALL: u32 = 10;
pub const ACPI_NHLT_ARRAYTYPE_LINEAR2_BIG: u32 = 11;
pub const ACPI_NHLT_ARRAYTYPE_LINEAR4_GEO1: u32 = 12;
pub const ACPI_NHLT_ARRAYTYPE_PLANAR4_LSHAPED: u32 = 13;
pub const ACPI_NHLT_ARRAYTYPE_LINEAR4_GEO2: u32 = 14;
pub const ACPI_NHLT_ARRAYTYPE_VENDOR: u32 = 15;
pub const ACPI_NHLT_MICTYPE_OMNIDIRECTIONAL: u32 = 0;
pub const ACPI_NHLT_MICTYPE_SUBCARDIOID: u32 = 1;
pub const ACPI_NHLT_MICTYPE_CARDIOID: u32 = 2;
pub const ACPI_NHLT_MICTYPE_SUPERCARDIOID: u32 = 3;
pub const ACPI_NHLT_MICTYPE_HYPERCARDIOID: u32 = 4;
pub const ACPI_NHLT_MICTYPE_8SHAPED: u32 = 5;
pub const ACPI_NHLT_MICTYPE_RESERVED: u32 = 6;
pub const ACPI_NHLT_MICTYPE_VENDORDEFINED: u32 = 7;
pub const ACPI_NHLT_MICLOCATION_TOP: u32 = 0;
pub const ACPI_NHLT_MICLOCATION_BOTTOM: u32 = 1;
pub const ACPI_NHLT_MICLOCATION_LEFT: u32 = 2;
pub const ACPI_NHLT_MICLOCATION_RIGHT: u32 = 3;
pub const ACPI_NHLT_MICLOCATION_FRONT: u32 = 4;
pub const ACPI_NHLT_MICLOCATION_REAR: u32 = 5;
pub const ACPI_PCCT_DOORBELL: u32 = 1;
pub const ACPI_PCCT_INTERRUPT_POLARITY: u32 = 1;
pub const ACPI_PCCT_INTERRUPT_MODE: u32 = 2;
pub const ACPI_PDTT_RUNTIME_TRIGGER: u32 = 1;
pub const ACPI_PDTT_WAIT_COMPLETION: u32 = 2;
pub const ACPI_PDTT_TRIGGER_ORDER: u32 = 4;
pub const ACPI_PHAT_TYPE_FW_VERSION_DATA: u32 = 0;
pub const ACPI_PHAT_TYPE_FW_HEALTH_DATA: u32 = 1;
pub const ACPI_PHAT_TYPE_RESERVED: u32 = 2;
pub const ACPI_PHAT_ERRORS_FOUND: u32 = 0;
pub const ACPI_PHAT_NO_ERRORS: u32 = 1;
pub const ACPI_PHAT_UNKNOWN_ERRORS: u32 = 2;
pub const ACPI_PHAT_ADVISORY: u32 = 3;
pub const ACPI_PMTT_TYPE_SOCKET: u32 = 0;
pub const ACPI_PMTT_TYPE_CONTROLLER: u32 = 1;
pub const ACPI_PMTT_TYPE_DIMM: u32 = 2;
pub const ACPI_PMTT_TYPE_RESERVED: u32 = 3;
pub const ACPI_PMTT_TYPE_VENDOR: u32 = 255;
pub const ACPI_PMTT_TOP_LEVEL: u32 = 1;
pub const ACPI_PMTT_PHYSICAL: u32 = 2;
pub const ACPI_PMTT_MEMORY_TYPE: u32 = 12;
pub const ACPI_PPTT_PHYSICAL_PACKAGE: u32 = 1;
pub const ACPI_PPTT_ACPI_PROCESSOR_ID_VALID: u32 = 2;
pub const ACPI_PPTT_ACPI_PROCESSOR_IS_THREAD: u32 = 4;
pub const ACPI_PPTT_ACPI_LEAF_NODE: u32 = 8;
pub const ACPI_PPTT_ACPI_IDENTICAL: u32 = 16;
pub const ACPI_PPTT_SIZE_PROPERTY_VALID: u32 = 1;
pub const ACPI_PPTT_NUMBER_OF_SETS_VALID: u32 = 2;
pub const ACPI_PPTT_ASSOCIATIVITY_VALID: u32 = 4;
pub const ACPI_PPTT_ALLOCATION_TYPE_VALID: u32 = 8;
pub const ACPI_PPTT_CACHE_TYPE_VALID: u32 = 16;
pub const ACPI_PPTT_WRITE_POLICY_VALID: u32 = 32;
pub const ACPI_PPTT_LINE_SIZE_VALID: u32 = 64;
pub const ACPI_PPTT_CACHE_ID_VALID: u32 = 128;
pub const ACPI_PPTT_MASK_ALLOCATION_TYPE: u32 = 3;
pub const ACPI_PPTT_MASK_CACHE_TYPE: u32 = 12;
pub const ACPI_PPTT_MASK_WRITE_POLICY: u32 = 16;
pub const ACPI_PPTT_CACHE_READ_ALLOCATE: u32 = 0;
pub const ACPI_PPTT_CACHE_WRITE_ALLOCATE: u32 = 1;
pub const ACPI_PPTT_CACHE_RW_ALLOCATE: u32 = 2;
pub const ACPI_PPTT_CACHE_RW_ALLOCATE_ALT: u32 = 3;
pub const ACPI_PPTT_CACHE_TYPE_DATA: u32 = 0;
pub const ACPI_PPTT_CACHE_TYPE_INSTR: u32 = 4;
pub const ACPI_PPTT_CACHE_TYPE_UNIFIED: u32 = 8;
pub const ACPI_PPTT_CACHE_TYPE_UNIFIED_ALT: u32 = 12;
pub const ACPI_PPTT_CACHE_POLICY_WB: u32 = 0;
pub const ACPI_PPTT_CACHE_POLICY_WT: u32 = 16;
pub const ACPI_RASF_SCRUBBER_RUNNING: u32 = 1;
pub const ACPI_RASF_SPEED: u32 = 14;
pub const ACPI_RASF_SPEED_SLOW: u32 = 0;
pub const ACPI_RASF_SPEED_MEDIUM: u32 = 8;
pub const ACPI_RASF_SPEED_FAST: u32 = 14;
pub const ACPI_RASF_GENERATE_SCI: u32 = 32768;
pub const ACPI_RASF_COMMAND_COMPLETE: u32 = 1;
pub const ACPI_RASF_SCI_DOORBELL: u32 = 2;
pub const ACPI_RASF_ERROR: u32 = 4;
pub const ACPI_RASF_STATUS: u32 = 248;
pub const ACPI_RAS2_SCRUBBER_RUNNING: u32 = 1;
pub const ACPI_RAS2_GENERATE_SCI: u32 = 32768;
pub const ACPI_RAS2_COMMAND_COMPLETE: u32 = 1;
pub const ACPI_RAS2_SCI_DOORBELL: u32 = 2;
pub const ACPI_RAS2_ERROR: u32 = 4;
pub const ACPI_RAS2_STATUS: u32 = 248;
pub const ACPI_RHCT_TIMER_CANNOT_WAKEUP_CPU: u32 = 1;
pub const ACPI_RIMT_IOMMU_FLAGS_PCIE: u32 = 1;
pub const ACPI_RIMT_IOMMU_FLAGS_PXM_VALID: u32 = 2;
pub const ACPI_RIMT_GSI_LEVEL_TRIGGERRED: u32 = 1;
pub const ACPI_RIMT_GSI_ACTIVE_HIGH: u32 = 2;
pub const ACPI_RIMT_PCIE_ATS_SUPPORTED: u32 = 1;
pub const ACPI_RIMT_PCIE_PRI_SUPPORTED: u32 = 2;
pub const ACPI_SDEV_HANDOFF_TO_UNSECURE_OS: u32 = 1;
pub const ACPI_SDEV_SECURE_COMPONENTS_PRESENT: u32 = 2;
pub const ACPI_SIG_SLIC: &[u8; 5] = b"SLIC\0";
pub const ACPI_SIG_SLIT: &[u8; 5] = b"SLIT\0";
pub const ACPI_SIG_SPCR: &[u8; 5] = b"SPCR\0";
pub const ACPI_SIG_SPMI: &[u8; 5] = b"SPMI\0";
pub const ACPI_SIG_SRAT: &[u8; 5] = b"SRAT\0";
pub const ACPI_SIG_STAO: &[u8; 5] = b"STAO\0";
pub const ACPI_SIG_TCPA: &[u8; 5] = b"TCPA\0";
pub const ACPI_SIG_TPM2: &[u8; 5] = b"TPM2\0";
pub const ACPI_SIG_UEFI: &[u8; 5] = b"UEFI\0";
pub const ACPI_SIG_VIOT: &[u8; 5] = b"VIOT\0";
pub const ACPI_SIG_WAET: &[u8; 5] = b"WAET\0";
pub const ACPI_SIG_WDAT: &[u8; 5] = b"WDAT\0";
pub const ACPI_SIG_WDDT: &[u8; 5] = b"WDDT\0";
pub const ACPI_SIG_WDRT: &[u8; 5] = b"WDRT\0";
pub const ACPI_SIG_WPBT: &[u8; 5] = b"WPBT\0";
pub const ACPI_SIG_WSMT: &[u8; 5] = b"WSMT\0";
pub const ACPI_SIG_XENV: &[u8; 5] = b"XENV\0";
pub const ACPI_SIG_XXXX: &[u8; 5] = b"XXXX\0";
pub const ACPI_SPCR_DO_NOT_DISABLE: u32 = 1;
pub const ACPI_SRAT_CPU_USE_AFFINITY: u32 = 1;
pub const ACPI_SRAT_MEM_ENABLED: u32 = 1;
pub const ACPI_SRAT_MEM_HOT_PLUGGABLE: u32 = 2;
pub const ACPI_SRAT_MEM_NON_VOLATILE: u32 = 4;
pub const ACPI_SRAT_CPU_ENABLED: u32 = 1;
pub const ACPI_SRAT_GICC_ENABLED: u32 = 1;
pub const ACPI_SRAT_DEVICE_HANDLE_SIZE: u32 = 16;
pub const ACPI_SRAT_GENERIC_AFFINITY_ENABLED: u32 = 1;
pub const ACPI_SRAT_ARCHITECTURAL_TRANSACTIONS: u32 = 2;
pub const ACPI_SRAT_RINTC_ENABLED: u32 = 1;
pub const ACPI_TCPA_CLIENT_TABLE: u32 = 0;
pub const ACPI_TCPA_SERVER_TABLE: u32 = 1;
pub const ACPI_TCPA_PCI_DEVICE: u32 = 1;
pub const ACPI_TCPA_BUS_PNP: u32 = 2;
pub const ACPI_TCPA_ADDRESS_VALID: u32 = 4;
pub const ACPI_TCPA_INTERRUPT_MODE: u32 = 1;
pub const ACPI_TCPA_INTERRUPT_POLARITY: u32 = 2;
pub const ACPI_TCPA_SCI_VIA_GPE: u32 = 4;
pub const ACPI_TCPA_GLOBAL_INTERRUPT: u32 = 8;
pub const ACPI_TPM23_ACPI_START_METHOD: u32 = 2;
pub const ACPI_TPM2_NOT_ALLOWED: u32 = 0;
pub const ACPI_TPM2_RESERVED1: u32 = 1;
pub const ACPI_TPM2_START_METHOD: u32 = 2;
pub const ACPI_TPM2_RESERVED3: u32 = 3;
pub const ACPI_TPM2_RESERVED4: u32 = 4;
pub const ACPI_TPM2_RESERVED5: u32 = 5;
pub const ACPI_TPM2_MEMORY_MAPPED: u32 = 6;
pub const ACPI_TPM2_COMMAND_BUFFER: u32 = 7;
pub const ACPI_TPM2_COMMAND_BUFFER_WITH_START_METHOD: u32 = 8;
pub const ACPI_TPM2_RESERVED9: u32 = 9;
pub const ACPI_TPM2_RESERVED10: u32 = 10;
pub const ACPI_TPM2_COMMAND_BUFFER_WITH_ARM_SMC: u32 = 11;
pub const ACPI_TPM2_RESERVED: u32 = 12;
pub const ACPI_TPM2_COMMAND_BUFFER_WITH_PLUTON: u32 = 13;
pub const ACPI_TPM2_CRB_WITH_ARM_FFA: u32 = 15;
pub const ACPI_TPM2_INTERRUPT_SUPPORT: u32 = 1;
pub const ACPI_TPM2_IDLE_SUPPORT: u32 = 1;
pub const ACPI_WAET_RTC_NO_ACK: u32 = 1;
pub const ACPI_WAET_TIMER_ONE_READ: u32 = 2;
pub const ACPI_WDAT_ENABLED: u32 = 1;
pub const ACPI_WDAT_STOPPED: u32 = 128;
pub const ACPI_WDDT_AVAILABLE: u32 = 1;
pub const ACPI_WDDT_ACTIVE: u32 = 2;
pub const ACPI_WDDT_TCO_OS_OWNED: u32 = 4;
pub const ACPI_WDDT_USER_RESET: u32 = 2048;
pub const ACPI_WDDT_WDT_RESET: u32 = 4096;
pub const ACPI_WDDT_POWER_FAIL: u32 = 8192;
pub const ACPI_WDDT_UNKNOWN_RESET: u32 = 16384;
pub const ACPI_WDDT_AUTO_RESET: u32 = 1;
pub const ACPI_WDDT_ALERT_SUPPORT: u32 = 2;
pub const ACPI_WSMT_FIXED_COMM_BUFFERS: u32 = 1;
pub const ACPI_WSMT_COMM_BUFFER_NESTED_PTR_PROTECTION: u32 = 2;
pub const ACPI_WSMT_SYSTEM_RESOURCE_PROTECTION: u32 = 4;
pub const ACPI_FADT_CONFORMANCE: &[u8; 26] = b"ACPI 6.1 (FADT version 6)\0";
pub const ACPI_UTILITIES: u32 = 1;
pub const ACPI_HARDWARE: u32 = 2;
pub const ACPI_EVENTS: u32 = 4;
pub const ACPI_TABLES: u32 = 8;
pub const ACPI_NAMESPACE: u32 = 16;
pub const ACPI_PARSER: u32 = 32;
pub const ACPI_DISPATCHER: u32 = 64;
pub const ACPI_EXECUTER: u32 = 128;
pub const ACPI_RESOURCES: u32 = 256;
pub const ACPI_CA_DEBUGGER: u32 = 512;
pub const ACPI_OS_SERVICES: u32 = 1024;
pub const ACPI_CA_DISASSEMBLER: u32 = 2048;
pub const ACPI_COMPILER: u32 = 4096;
pub const ACPI_TOOLS: u32 = 8192;
pub const ACPI_EXAMPLE: u32 = 16384;
pub const ACPI_DRIVER: u32 = 32768;
pub const DT_COMPILER: u32 = 65536;
pub const ASL_PREPROCESSOR: u32 = 131072;
pub const ACPI_ALL_COMPONENTS: u32 = 131071;
pub const ACPI_COMPONENT_DEFAULT: u32 = 131071;
pub const ACPI_ALL_DRIVERS: u32 = 4294901760;
pub const ACPI_LV_INIT: u32 = 1;
pub const ACPI_LV_DEBUG_OBJECT: u32 = 2;
pub const ACPI_LV_INFO: u32 = 4;
pub const ACPI_LV_REPAIR: u32 = 8;
pub const ACPI_LV_TRACE_POINT: u32 = 16;
pub const ACPI_LV_ALL_EXCEPTIONS: u32 = 31;
pub const ACPI_LV_INIT_NAMES: u32 = 32;
pub const ACPI_LV_PARSE: u32 = 64;
pub const ACPI_LV_LOAD: u32 = 128;
pub const ACPI_LV_DISPATCH: u32 = 256;
pub const ACPI_LV_EXEC: u32 = 512;
pub const ACPI_LV_NAMES: u32 = 1024;
pub const ACPI_LV_OPREGION: u32 = 2048;
pub const ACPI_LV_BFIELD: u32 = 4096;
pub const ACPI_LV_TABLES: u32 = 8192;
pub const ACPI_LV_VALUES: u32 = 16384;
pub const ACPI_LV_OBJECTS: u32 = 32768;
pub const ACPI_LV_RESOURCES: u32 = 65536;
pub const ACPI_LV_USER_REQUESTS: u32 = 131072;
pub const ACPI_LV_PACKAGE: u32 = 262144;
pub const ACPI_LV_EVALUATION: u32 = 524288;
pub const ACPI_LV_VERBOSITY1: u32 = 1048415;
pub const ACPI_LV_ALLOCATIONS: u32 = 1048576;
pub const ACPI_LV_FUNCTIONS: u32 = 2097152;
pub const ACPI_LV_OPTIMIZATIONS: u32 = 4194304;
pub const ACPI_LV_PARSE_TREES: u32 = 8388608;
pub const ACPI_LV_VERBOSITY2: u32 = 16777055;
pub const ACPI_LV_ALL: u32 = 16777055;
pub const ACPI_LV_MUTEX: u32 = 16777216;
pub const ACPI_LV_THREADS: u32 = 33554432;
pub const ACPI_LV_IO: u32 = 67108864;
pub const ACPI_LV_INTERRUPTS: u32 = 134217728;
pub const ACPI_LV_VERBOSITY3: u32 = 268435295;
pub const ACPI_LV_AML_DISASSEMBLE: u32 = 268435456;
pub const ACPI_LV_VERBOSE_INFO: u32 = 536870912;
pub const ACPI_LV_FULL_TABLES: u32 = 1073741824;
pub const ACPI_LV_EVENTS: u32 = 2147483648;
pub const ACPI_LV_VERBOSE: u32 = 4026531840;
pub const ACPI_DEBUG_DEFAULT: u32 = 524299;
pub const ACPI_NORMAL_DEFAULT: u32 = 11;
pub const ACPI_DEBUG_ALL: u32 = 285212511;
pub const ACPI_TRACE_LEVEL_ALL: u32 = 16777055;
pub const ACPI_TRACE_LAYER_ALL: u32 = 511;
pub const ACPI_TRACE_LEVEL_DEFAULT: u32 = 16;
pub const ACPI_TRACE_LAYER_DEFAULT: u32 = 128;
pub const ACPI_DMA_WIDTH8: u32 = 0;
pub const ACPI_DMA_WIDTH16: u32 = 1;
pub const ACPI_DMA_WIDTH32: u32 = 2;
pub const ACPI_DMA_WIDTH64: u32 = 3;
pub const ACPI_DMA_WIDTH128: u32 = 4;
pub const ACPI_DMA_WIDTH256: u32 = 5;
pub const ACPI_RESOURCE_GPIO_TYPE_INT: u32 = 0;
pub const ACPI_RESOURCE_GPIO_TYPE_IO: u32 = 1;
pub const ACPI_PIN_CONFIG_DEFAULT: u32 = 0;
pub const ACPI_PIN_CONFIG_PULLUP: u32 = 1;
pub const ACPI_PIN_CONFIG_PULLDOWN: u32 = 2;
pub const ACPI_PIN_CONFIG_NOPULL: u32 = 3;
pub const ACPI_IO_RESTRICT_NONE: u32 = 0;
pub const ACPI_IO_RESTRICT_INPUT: u32 = 1;
pub const ACPI_IO_RESTRICT_OUTPUT: u32 = 2;
pub const ACPI_IO_RESTRICT_NONE_PRESERVE: u32 = 3;
pub const ACPI_RESOURCE_SERIAL_TYPE_I2C: u32 = 1;
pub const ACPI_RESOURCE_SERIAL_TYPE_SPI: u32 = 2;
pub const ACPI_RESOURCE_SERIAL_TYPE_UART: u32 = 3;
pub const ACPI_RESOURCE_SERIAL_TYPE_CSI2: u32 = 4;
pub const ACPI_CONTROLLER_INITIATED: u32 = 0;
pub const ACPI_DEVICE_INITIATED: u32 = 1;
pub const ACPI_I2C_7BIT_MODE: u32 = 0;
pub const ACPI_I2C_10BIT_MODE: u32 = 1;
pub const ACPI_SPI_4WIRE_MODE: u32 = 0;
pub const ACPI_SPI_3WIRE_MODE: u32 = 1;
pub const ACPI_SPI_ACTIVE_LOW: u32 = 0;
pub const ACPI_SPI_ACTIVE_HIGH: u32 = 1;
pub const ACPI_SPI_FIRST_PHASE: u32 = 0;
pub const ACPI_SPI_SECOND_PHASE: u32 = 1;
pub const ACPI_SPI_START_LOW: u32 = 0;
pub const ACPI_SPI_START_HIGH: u32 = 1;
pub const ACPI_UART_LITTLE_ENDIAN: u32 = 0;
pub const ACPI_UART_BIG_ENDIAN: u32 = 1;
pub const ACPI_UART_5_DATA_BITS: u32 = 0;
pub const ACPI_UART_6_DATA_BITS: u32 = 1;
pub const ACPI_UART_7_DATA_BITS: u32 = 2;
pub const ACPI_UART_8_DATA_BITS: u32 = 3;
pub const ACPI_UART_9_DATA_BITS: u32 = 4;
pub const ACPI_UART_NO_STOP_BITS: u32 = 0;
pub const ACPI_UART_1_STOP_BIT: u32 = 1;
pub const ACPI_UART_1P5_STOP_BITS: u32 = 2;
pub const ACPI_UART_2_STOP_BITS: u32 = 3;
pub const ACPI_UART_FLOW_CONTROL_NONE: u32 = 0;
pub const ACPI_UART_FLOW_CONTROL_HW: u32 = 1;
pub const ACPI_UART_FLOW_CONTROL_XON_XOFF: u32 = 2;
pub const ACPI_UART_PARITY_NONE: u32 = 0;
pub const ACPI_UART_PARITY_EVEN: u32 = 1;
pub const ACPI_UART_PARITY_ODD: u32 = 2;
pub const ACPI_UART_PARITY_MARK: u32 = 3;
pub const ACPI_UART_PARITY_SPACE: u32 = 4;
pub const ACPI_UART_CARRIER_DETECT: u32 = 4;
pub const ACPI_UART_RING_INDICATOR: u32 = 8;
pub const ACPI_UART_DATA_SET_READY: u32 = 16;
pub const ACPI_UART_DATA_TERMINAL_READY: u32 = 32;
pub const ACPI_UART_CLEAR_TO_SEND: u32 = 64;
pub const ACPI_UART_REQUEST_TO_SEND: u32 = 128;
pub const ACPI_PIN_CONFIG_BIAS_PULL_UP: u32 = 1;
pub const ACPI_PIN_CONFIG_BIAS_PULL_DOWN: u32 = 2;
pub const ACPI_PIN_CONFIG_BIAS_DEFAULT: u32 = 3;
pub const ACPI_PIN_CONFIG_BIAS_DISABLE: u32 = 4;
pub const ACPI_PIN_CONFIG_BIAS_HIGH_IMPEDANCE: u32 = 5;
pub const ACPI_PIN_CONFIG_BIAS_BUS_HOLD: u32 = 6;
pub const ACPI_PIN_CONFIG_DRIVE_OPEN_DRAIN: u32 = 7;
pub const ACPI_PIN_CONFIG_DRIVE_OPEN_SOURCE: u32 = 8;
pub const ACPI_PIN_CONFIG_DRIVE_PUSH_PULL: u32 = 9;
pub const ACPI_PIN_CONFIG_DRIVE_STRENGTH: u32 = 10;
pub const ACPI_PIN_CONFIG_SLEW_RATE: u32 = 11;
pub const ACPI_PIN_CONFIG_INPUT_DEBOUNCE: u32 = 12;
pub const ACPI_PIN_CONFIG_INPUT_SCHMITT_TRIGGER: u32 = 13;
pub const ACPI_RESOURCE_TYPE_IRQ: u32 = 0;
pub const ACPI_RESOURCE_TYPE_DMA: u32 = 1;
pub const ACPI_RESOURCE_TYPE_START_DEPENDENT: u32 = 2;
pub const ACPI_RESOURCE_TYPE_END_DEPENDENT: u32 = 3;
pub const ACPI_RESOURCE_TYPE_IO: u32 = 4;
pub const ACPI_RESOURCE_TYPE_FIXED_IO: u32 = 5;
pub const ACPI_RESOURCE_TYPE_VENDOR: u32 = 6;
pub const ACPI_RESOURCE_TYPE_END_TAG: u32 = 7;
pub const ACPI_RESOURCE_TYPE_MEMORY24: u32 = 8;
pub const ACPI_RESOURCE_TYPE_MEMORY32: u32 = 9;
pub const ACPI_RESOURCE_TYPE_FIXED_MEMORY32: u32 = 10;
pub const ACPI_RESOURCE_TYPE_ADDRESS16: u32 = 11;
pub const ACPI_RESOURCE_TYPE_ADDRESS32: u32 = 12;
pub const ACPI_RESOURCE_TYPE_ADDRESS64: u32 = 13;
pub const ACPI_RESOURCE_TYPE_EXTENDED_ADDRESS64: u32 = 14;
pub const ACPI_RESOURCE_TYPE_EXTENDED_IRQ: u32 = 15;
pub const ACPI_RESOURCE_TYPE_GENERIC_REGISTER: u32 = 16;
pub const ACPI_RESOURCE_TYPE_GPIO: u32 = 17;
pub const ACPI_RESOURCE_TYPE_FIXED_DMA: u32 = 18;
pub const ACPI_RESOURCE_TYPE_SERIAL_BUS: u32 = 19;
pub const ACPI_RESOURCE_TYPE_PIN_FUNCTION: u32 = 20;
pub const ACPI_RESOURCE_TYPE_PIN_CONFIG: u32 = 21;
pub const ACPI_RESOURCE_TYPE_PIN_GROUP: u32 = 22;
pub const ACPI_RESOURCE_TYPE_PIN_GROUP_FUNCTION: u32 = 23;
pub const ACPI_RESOURCE_TYPE_PIN_GROUP_CONFIG: u32 = 24;
pub const ACPI_RESOURCE_TYPE_CLOCK_INPUT: u32 = 25;
pub const ACPI_RESOURCE_TYPE_MAX: u32 = 25;
pub const ACPI_RS_SIZE_NO_DATA: u32 = 8;
pub const ACPI_MUTEX_SEM: u32 = 1;
pub const ACPI_SIGNAL_FATAL: u32 = 0;
pub const ACPI_SIGNAL_BREAKPOINT: u32 = 1;
pub const REQUEST_FILE_ONLY: u32 = 0;
pub const REQUEST_DIR_ONLY: u32 = 1;
pub const ACPI_CA_VERSION: u32 = 539296772;
pub const ACPI_OS_NAME: &[u8; 21] = b"Microsoft Windows NT\0";
pub const ACPI_MAX_STATE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_PARSE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_EXTPARSE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_OBJECT_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_NAMESPACE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_COMMENT_CACHE_DEPTH: u32 = 96;
pub const ACPI_CA_SUPPORT_LEVEL: u32 = 5;
pub const ACPI_MAX_SEMAPHORE_COUNT: u32 = 256;
pub const ACPI_MAX_REFERENCE_COUNT: u32 = 16384;
pub const ACPI_DEFAULT_PAGE_SIZE: u32 = 4096;
pub const ACPI_NUM_OWNERID_MASKS: u32 = 128;
pub const ACPI_ROOT_TABLE_SIZE_INCREMENT: u32 = 4;
pub const ACPI_MAX_SLEEP: u32 = 2000;
pub const ACPI_ADDRESS_RANGE_MAX: u32 = 2;
pub const ACPI_MAX_LOOP_TIMEOUT: u32 = 30;
pub const ACPI_METHOD_NUM_LOCALS: u32 = 8;
pub const ACPI_METHOD_MAX_LOCAL: u32 = 7;
pub const ACPI_METHOD_NUM_ARGS: u32 = 7;
pub const ACPI_METHOD_MAX_ARG: u32 = 6;
pub const ACPI_OBJ_NUM_OPERANDS: u32 = 8;
pub const ACPI_OBJ_MAX_OPERAND: u32 = 7;
pub const ACPI_RESULTS_FRAME_OBJ_NUM: u32 = 8;
pub const ACPI_RESULTS_OBJ_NUM_MAX: u32 = 255;
pub const ACPI_EBDA_PTR_LOCATION: u32 = 1038;
pub const ACPI_EBDA_PTR_LENGTH: u32 = 2;
pub const ACPI_EBDA_WINDOW_SIZE: u32 = 1024;
pub const ACPI_HI_RSDP_WINDOW_BASE: u32 = 917504;
pub const ACPI_HI_RSDP_WINDOW_SIZE: u32 = 131072;
pub const ACPI_RSDP_SCAN_STEP: u32 = 16;
pub const ACPI_USER_REGION_BEGIN: u32 = 128;
pub const ACPI_MAX_ADDRESS_SPACE: u32 = 255;
pub const ACPI_NUM_DEFAULT_SPACES: u32 = 4;
pub const ACPI_MAX_MATCH_OPCODE: u32 = 5;
pub const ACPI_RSDP_CHECKSUM_LENGTH: u32 = 20;
pub const ACPI_RSDP_XCHECKSUM_LENGTH: u32 = 36;
pub const ACPI_SERIAL_HEADER_SIZE: u32 = 2;
pub const ACPI_SMBUS_DATA_SIZE: u32 = 32;
pub const ACPI_SMBUS_BUFFER_SIZE: u32 = 34;
pub const ACPI_IPMI_DATA_SIZE: u32 = 64;
pub const ACPI_IPMI_BUFFER_SIZE: u32 = 66;
pub const ACPI_MAX_GSBUS_DATA_SIZE: u32 = 255;
pub const ACPI_MAX_GSBUS_BUFFER_SIZE: u32 = 257;
pub const ACPI_PRM_INPUT_BUFFER_SIZE: u32 = 26;
pub const ACPI_FFH_INPUT_BUFFER_SIZE: u32 = 256;
pub const ACPI_NUM_SxD_METHODS: u32 = 4;
pub const ACPI_NUM_SxW_METHODS: u32 = 5;
pub const UUID_BUFFER_LENGTH: u32 = 16;
pub const UUID_STRING_LENGTH: u32 = 36;
pub const UUID_HYPHEN1_OFFSET: u32 = 8;
pub const UUID_HYPHEN2_OFFSET: u32 = 13;
pub const UUID_HYPHEN3_OFFSET: u32 = 18;
pub const UUID_HYPHEN4_OFFSET: u32 = 23;
pub const ACPI_DEBUGGER_MAX_ARGS: u32 = 11;
pub const ACPI_DB_LINE_BUFFER_SIZE: u32 = 512;
pub const ACPI_DEBUGGER_COMMAND_PROMPT: u8 = 45u8;
pub const ACPI_DEBUGGER_EXECUTE_PROMPT: u8 = 37u8;
pub const ACPI_PLD_REV1_BUFFER_SIZE: u32 = 16;
pub const ACPI_PLD_REV2_BUFFER_SIZE: u32 = 20;
pub const ACPI_PLD_BUFFER_SIZE: u32 = 20;
pub const ACPI_PLD_PANEL_TOP: u32 = 0;
pub const ACPI_PLD_PANEL_BOTTOM: u32 = 1;
pub const ACPI_PLD_PANEL_LEFT: u32 = 2;
pub const ACPI_PLD_PANEL_RIGHT: u32 = 3;
pub const ACPI_PLD_PANEL_FRONT: u32 = 4;
pub const ACPI_PLD_PANEL_BACK: u32 = 5;
pub const ACPI_PLD_PANEL_UNKNOWN: u32 = 6;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
unsafe extern "C" {
    pub fn access(
        __name: *const ::core::ffi::c_char,
        __type: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn faccessat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __type: ::core::ffi::c_int,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lseek(
        __fd: ::core::ffi::c_int,
        __offset: __off_t,
        __whence: ::core::ffi::c_int,
    ) -> __off_t;
}
unsafe extern "C" {
    pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn closefrom(__lowfd: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn read(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbytes: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn write(__fd: ::core::ffi::c_int, __buf: *const ::core::ffi::c_void, __n: usize) -> isize;
}
unsafe extern "C" {
    pub fn pread(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwrite(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
unsafe extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn pause() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn chown(
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fchown(
        __fd: ::core::ffi::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lchown(
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fchownat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub static mut __environ: *mut *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn execve(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fexecve(
        __fd: ::core::ffi::c_int,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn execv(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn execle(
        __path: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn execl(
        __path: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn execvp(
        __file: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn execlp(
        __file: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _exit(__status: ::core::ffi::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn pathconf(
        __path: *const ::core::ffi::c_char,
        __name: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn fpathconf(__fd: ::core::ffi::c_int, __name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn confstr(
        __name: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn getpid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getppid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgrp() -> __pid_t;
}
unsafe extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setpgrp() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setsid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn geteuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn getgid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getegid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getgroups(__size: ::core::ffi::c_int, __list: *mut __gid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fork() -> __pid_t;
}
unsafe extern "C" {
    pub fn vfork() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ttyname_r(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ttyslot() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn link(
        __from: *const ::core::ffi::c_char,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn linkat(
        __fromfd: ::core::ffi::c_int,
        __from: *const ::core::ffi::c_char,
        __tofd: ::core::ffi::c_int,
        __to: *const ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn symlink(
        __from: *const ::core::ffi::c_char,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn readlink(
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn symlinkat(
        __from: *const ::core::ffi::c_char,
        __tofd: ::core::ffi::c_int,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn readlinkat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn unlinkat(
        __fd: ::core::ffi::c_int,
        __name: *const ::core::ffi::c_char,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> __pid_t;
}
unsafe extern "C" {
    pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: __pid_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getlogin() -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn getlogin_r(__name: *mut ::core::ffi::c_char, __name_len: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub static mut optarg: *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub static mut optind: ::core::ffi::c_int;
}
unsafe extern "C" {
    pub static mut opterr: ::core::ffi::c_int;
}
unsafe extern "C" {
    pub static mut optopt: ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getopt(
        ___argc: ::core::ffi::c_int,
        ___argv: *const *mut ::core::ffi::c_char,
        __shortopts: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setdomainname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn vhangup() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::core::ffi::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getusershell() -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn endusershell();
}
unsafe extern "C" {
    pub fn setusershell();
}
unsafe extern "C" {
    pub fn daemon(
        __nochdir: ::core::ffi::c_int,
        __noclose: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn gethostid() -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn sync();
}
unsafe extern "C" {
    pub fn getpagesize() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getdtablesize() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn truncate(__file: *const ::core::ffi::c_char, __length: __off_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ftruncate(__fd: ::core::ffi::c_int, __length: __off_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn lockf(
        __fd: ::core::ffi::c_int,
        __cmd: ::core::ffi::c_int,
        __len: __off_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn crypt(
        __key: *const ::core::ffi::c_char,
        __salt: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn getentropy(__buffer: *mut ::core::ffi::c_void, __length: usize) -> ::core::ffi::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::core::ffi::c_int,
    pub rem: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::core::ffi::c_longlong,
    pub rem: ::core::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::core::ffi::c_ulong;
pub type ushort = ::core::ffi::c_ushort;
pub type uint = ::core::ffi::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::core::ffi::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::core::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::core::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::core::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::core::ffi::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::core::ffi::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::core::ffi::c_uint,
    pub __high: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"]
        [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::core::ffi::c_int,
    pub __count: ::core::ffi::c_uint,
    pub __owner: ::core::ffi::c_int,
    pub __nusers: ::core::ffi::c_uint,
    pub __kind: ::core::ffi::c_int,
    pub __spins: ::core::ffi::c_short,
    pub __elision: ::core::ffi::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::core::ffi::c_uint,
    pub __writers: ::core::ffi::c_uint,
    pub __wrphase_futex: ::core::ffi::c_uint,
    pub __writers_futex: ::core::ffi::c_uint,
    pub __pad3: ::core::ffi::c_uint,
    pub __pad4: ::core::ffi::c_uint,
    pub __cur_writer: ::core::ffi::c_int,
    pub __shared: ::core::ffi::c_int,
    pub __rwelision: ::core::ffi::c_schar,
    pub __pad1: [::core::ffi::c_uchar; 7usize],
    pub __pad2: ::core::ffi::c_ulong,
    pub __flags: ::core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"]
        [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::core::ffi::c_uint; 2usize],
    pub __g_size: [::core::ffi::c_uint; 2usize],
    pub __g1_orig_size: ::core::ffi::c_uint,
    pub __wrefs: ::core::ffi::c_uint,
    pub __g_signals: [::core::ffi::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::core::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::core::ffi::c_uint;
pub type __thrd_t = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::core::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::core::ffi::c_char; 4usize],
    pub __align: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::core::ffi::c_char; 4usize],
    pub __align: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::core::ffi::c_uint;
pub type pthread_once_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::core::ffi::c_char; 56usize],
    pub __align: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::core::ffi::c_char; 40usize],
    pub __align: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::core::ffi::c_char; 48usize],
    pub __align: ::core::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::core::ffi::c_char; 56usize],
    pub __align: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::core::ffi::c_char; 8usize],
    pub __align: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::core::ffi::c_char; 32usize],
    pub __align: ::core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::core::ffi::c_char; 4usize],
    pub __align: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn random() -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::core::ffi::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::core::ffi::c_uint,
        __statebuf: *mut ::core::ffi::c_char,
        __statelen: usize,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::core::ffi::c_int,
    pub rand_deg: ::core::ffi::c_int,
    pub rand_sep: ::core::ffi::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::core::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::core::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::core::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::core::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::core::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::core::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::core::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::core::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::core::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(__seed: ::core::ffi::c_uint, __buf: *mut random_data) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::core::ffi::c_uint,
        __statebuf: *mut ::core::ffi::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::core::ffi::c_char,
        __buf: *mut random_data,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::core::ffi::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::core::ffi::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::core::ffi::c_ushort; 3usize],
    pub __old_x: [::core::ffi::c_ushort; 3usize],
    pub __c: ::core::ffi::c_ushort,
    pub __a: ::core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::core::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::core::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::core::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::core::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::core::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__a"][::core::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::core::ffi::c_long,
        __buffer: *mut drand48_data,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> __uint32_t;
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __size: usize);
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    pub fn malloc(__size: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __nmemb: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::core::ffi::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(__status: ::core::ffi::c_int, __arg: *mut ::core::ffi::c_void),
        >,
        __arg: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::core::ffi::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::core::ffi::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::core::ffi::c_char,
        __value: *const ::core::ffi::c_char,
        __replace: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::core::ffi::c_char,
        __suffixlen: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::core::ffi::c_char,
        __resolved: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::core::ffi::c_void,
        __base: *const ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(__numer: ::core::ffi::c_longlong, __denom: ::core::ffi::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::core::ffi::c_char,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::core::ffi::c_char, __wchar: wchar_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::core::ffi::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::core::ffi::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::core::ffi::c_char,
        __tokens: *const *mut ::core::ffi::c_char,
        __valuep: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memccpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::core::ffi::c_ushort,
    pub __ctype_tolower: *const ::core::ffi::c_int,
    pub __ctype_toupper: *const ::core::ffi::c_int,
    pub __names: [*const ::core::ffi::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __l: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::core::ffi::c_char,
        __reject: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
        __save_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
        __save_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcasestr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn memmem(
        __haystack: *const ::core::ffi::c_void,
        __haystacklen: usize,
        __needle: *const ::core::ffi::c_void,
        __needlelen: usize,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: usize,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn mempcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const ::core::ffi::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(__errnum: ::core::ffi::c_int, __l: locale_t) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        __src: *const ::core::ffi::c_void,
        __dest: *mut ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    );
}
unsafe extern "C" {
    pub fn bzero(__s: *mut ::core::ffi::c_void, __n: ::core::ffi::c_ulong);
}
unsafe extern "C" {
    pub fn index(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __loc: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut ::core::ffi::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strlcat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
    ) -> usize;
}
pub const _ISupper: _bindgen_ty_4 = 256;
pub const _ISlower: _bindgen_ty_4 = 512;
pub const _ISalpha: _bindgen_ty_4 = 1024;
pub const _ISdigit: _bindgen_ty_4 = 2048;
pub const _ISxdigit: _bindgen_ty_4 = 4096;
pub const _ISspace: _bindgen_ty_4 = 8192;
pub const _ISprint: _bindgen_ty_4 = 16384;
pub const _ISgraph: _bindgen_ty_4 = 32768;
pub const _ISblank: _bindgen_ty_4 = 1;
pub const _IScntrl: _bindgen_ty_4 = 2;
pub const _ISpunct: _bindgen_ty_4 = 4;
pub const _ISalnum: _bindgen_ty_4 = 8;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::core::ffi::c_ushort;
}
unsafe extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
unsafe extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
unsafe extern "C" {
    pub fn isalnum(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isalpha(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iscntrl(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isdigit(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn islower(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isgraph(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isprint(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ispunct(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isspace(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isupper(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isxdigit(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn tolower(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toupper(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isblank(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isascii(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toascii(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _toupper(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _tolower(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isalnum_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isalpha_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn iscntrl_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isdigit_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn islower_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isgraph_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isprint_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ispunct_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isspace_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isupper_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isxdigit_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn isblank_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __tolower_l(__c: ::core::ffi::c_int, __l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn tolower_l(__c: ::core::ffi::c_int, __l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn __toupper_l(__c: ::core::ffi::c_int, __l: locale_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn toupper_l(__c: ::core::ffi::c_int, __l: locale_t) -> ::core::ffi::c_int;
}
pub type BOOLEAN = ::core::ffi::c_uchar;
pub type UINT8 = ::core::ffi::c_uchar;
pub type UINT16 = ::core::ffi::c_ushort;
pub type INT16 = ::core::ffi::c_short;
pub type UINT64 = ::core::ffi::c_ulong;
pub type INT64 = ::core::ffi::c_long;
pub type UINT32 = ::core::ffi::c_uint;
pub type INT32 = ::core::ffi::c_int;
pub type ACPI_NATIVE_INT = INT64;
pub type ACPI_SIZE = UINT64;
pub type ACPI_IO_ADDRESS = UINT64;
pub type ACPI_PHYSICAL_ADDRESS = UINT64;
pub type ACPI_STATUS = UINT32;
pub type ACPI_NAME = UINT32;
pub type ACPI_STRING = *mut ::core::ffi::c_char;
pub type ACPI_HANDLE = *mut ::core::ffi::c_void;
pub type ACPI_OWNER_ID = UINT16;
pub type ACPI_INTEGER = UINT64;
pub type ACPI_OBJECT_TYPE = UINT32;
pub type ACPI_EVENT_TYPE = UINT32;
pub type ACPI_EVENT_STATUS = UINT32;
pub type ACPI_ADR_SPACE_TYPE = UINT8;
pub type ACPI_SLEEP_FUNCTION =
    ::core::option::Option<unsafe extern "C" fn(SleepState: UINT8) -> ACPI_STATUS>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sleep_functions {
    pub LegacyFunction: ACPI_SLEEP_FUNCTION,
    pub ExtendedFunction: ACPI_SLEEP_FUNCTION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sleep_functions"][::core::mem::size_of::<acpi_sleep_functions>() - 16usize];
    ["Alignment of acpi_sleep_functions"][::core::mem::align_of::<acpi_sleep_functions>() - 8usize];
    ["Offset of field: acpi_sleep_functions::LegacyFunction"]
        [::core::mem::offset_of!(acpi_sleep_functions, LegacyFunction) - 0usize];
    ["Offset of field: acpi_sleep_functions::ExtendedFunction"]
        [::core::mem::offset_of!(acpi_sleep_functions, ExtendedFunction) - 8usize];
};
pub type ACPI_SLEEP_FUNCTIONS = acpi_sleep_functions;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_object {
    pub Type: ACPI_OBJECT_TYPE,
    pub Integer: acpi_object__bindgen_ty_1,
    pub String: acpi_object__bindgen_ty_2,
    pub Buffer: acpi_object__bindgen_ty_3,
    pub Package: acpi_object__bindgen_ty_4,
    pub Reference: acpi_object__bindgen_ty_5,
    pub Processor: acpi_object__bindgen_ty_6,
    pub PowerResource: acpi_object__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_1 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Value: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_1>() - 16usize];
    ["Alignment of acpi_object__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_1>() - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_1::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_1, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_1::Value"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_1, Value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_2 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Length: UINT32,
    pub Pointer: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_2"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_2>() - 16usize];
    ["Alignment of acpi_object__bindgen_ty_2"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_2>() - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_2::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_2, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_2::Length"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_2, Length) - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_2::Pointer"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_2, Pointer) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_3 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Length: UINT32,
    pub Pointer: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_3"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_3>() - 16usize];
    ["Alignment of acpi_object__bindgen_ty_3"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_3>() - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_3::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_3, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_3::Length"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_3, Length) - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_3::Pointer"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_3, Pointer) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_4 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Count: UINT32,
    pub Elements: *mut acpi_object,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_4"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_4>() - 16usize];
    ["Alignment of acpi_object__bindgen_ty_4"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_4>() - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_4::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_4, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_4::Count"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_4, Count) - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_4::Elements"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_4, Elements) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_5 {
    pub Type: ACPI_OBJECT_TYPE,
    pub ActualType: ACPI_OBJECT_TYPE,
    pub Handle: ACPI_HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_5"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_5>() - 16usize];
    ["Alignment of acpi_object__bindgen_ty_5"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_5>() - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_5::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_5, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_5::ActualType"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_5, ActualType) - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_5::Handle"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_5, Handle) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_6 {
    pub Type: ACPI_OBJECT_TYPE,
    pub ProcId: UINT32,
    pub PblkAddress: ACPI_IO_ADDRESS,
    pub PblkLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_6"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_6>() - 24usize];
    ["Alignment of acpi_object__bindgen_ty_6"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_6>() - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_6::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_6, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_6::ProcId"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_6, ProcId) - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_6::PblkAddress"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_6, PblkAddress) - 8usize];
    ["Offset of field: acpi_object__bindgen_ty_6::PblkLength"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_6, PblkLength) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_7 {
    pub Type: ACPI_OBJECT_TYPE,
    pub SystemLevel: UINT32,
    pub ResourceOrder: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object__bindgen_ty_7"]
        [::core::mem::size_of::<acpi_object__bindgen_ty_7>() - 12usize];
    ["Alignment of acpi_object__bindgen_ty_7"]
        [::core::mem::align_of::<acpi_object__bindgen_ty_7>() - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_7::Type"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_7, Type) - 0usize];
    ["Offset of field: acpi_object__bindgen_ty_7::SystemLevel"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_7, SystemLevel) - 4usize];
    ["Offset of field: acpi_object__bindgen_ty_7::ResourceOrder"]
        [::core::mem::offset_of!(acpi_object__bindgen_ty_7, ResourceOrder) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object"][::core::mem::size_of::<acpi_object>() - 24usize];
    ["Alignment of acpi_object"][::core::mem::align_of::<acpi_object>() - 8usize];
    ["Offset of field: acpi_object::Type"][::core::mem::offset_of!(acpi_object, Type) - 0usize];
    ["Offset of field: acpi_object::Integer"]
        [::core::mem::offset_of!(acpi_object, Integer) - 0usize];
    ["Offset of field: acpi_object::String"][::core::mem::offset_of!(acpi_object, String) - 0usize];
    ["Offset of field: acpi_object::Buffer"][::core::mem::offset_of!(acpi_object, Buffer) - 0usize];
    ["Offset of field: acpi_object::Package"]
        [::core::mem::offset_of!(acpi_object, Package) - 0usize];
    ["Offset of field: acpi_object::Reference"]
        [::core::mem::offset_of!(acpi_object, Reference) - 0usize];
    ["Offset of field: acpi_object::Processor"]
        [::core::mem::offset_of!(acpi_object, Processor) - 0usize];
    ["Offset of field: acpi_object::PowerResource"]
        [::core::mem::offset_of!(acpi_object, PowerResource) - 0usize];
};
pub type ACPI_OBJECT = acpi_object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object_list {
    pub Count: UINT32,
    pub Pointer: *mut ACPI_OBJECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_object_list"][::core::mem::size_of::<acpi_object_list>() - 16usize];
    ["Alignment of acpi_object_list"][::core::mem::align_of::<acpi_object_list>() - 8usize];
    ["Offset of field: acpi_object_list::Count"]
        [::core::mem::offset_of!(acpi_object_list, Count) - 0usize];
    ["Offset of field: acpi_object_list::Pointer"]
        [::core::mem::offset_of!(acpi_object_list, Pointer) - 8usize];
};
pub type ACPI_OBJECT_LIST = acpi_object_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_buffer {
    pub Length: ACPI_SIZE,
    pub Pointer: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_buffer"][::core::mem::size_of::<acpi_buffer>() - 16usize];
    ["Alignment of acpi_buffer"][::core::mem::align_of::<acpi_buffer>() - 8usize];
    ["Offset of field: acpi_buffer::Length"][::core::mem::offset_of!(acpi_buffer, Length) - 0usize];
    ["Offset of field: acpi_buffer::Pointer"]
        [::core::mem::offset_of!(acpi_buffer, Pointer) - 8usize];
};
pub type ACPI_BUFFER = acpi_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_predefined_names {
    pub Name: *const ::core::ffi::c_char,
    pub Type: UINT8,
    pub Val: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_predefined_names"][::core::mem::size_of::<acpi_predefined_names>() - 24usize];
    ["Alignment of acpi_predefined_names"]
        [::core::mem::align_of::<acpi_predefined_names>() - 8usize];
    ["Offset of field: acpi_predefined_names::Name"]
        [::core::mem::offset_of!(acpi_predefined_names, Name) - 0usize];
    ["Offset of field: acpi_predefined_names::Type"]
        [::core::mem::offset_of!(acpi_predefined_names, Type) - 8usize];
    ["Offset of field: acpi_predefined_names::Val"]
        [::core::mem::offset_of!(acpi_predefined_names, Val) - 16usize];
};
pub type ACPI_PREDEFINED_NAMES = acpi_predefined_names;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_system_info {
    pub AcpiCaVersion: UINT32,
    pub Flags: UINT32,
    pub TimerResolution: UINT32,
    pub Reserved1: UINT32,
    pub Reserved2: UINT32,
    pub DebugLevel: UINT32,
    pub DebugLayer: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_system_info"][::core::mem::size_of::<acpi_system_info>() - 28usize];
    ["Alignment of acpi_system_info"][::core::mem::align_of::<acpi_system_info>() - 4usize];
    ["Offset of field: acpi_system_info::AcpiCaVersion"]
        [::core::mem::offset_of!(acpi_system_info, AcpiCaVersion) - 0usize];
    ["Offset of field: acpi_system_info::Flags"]
        [::core::mem::offset_of!(acpi_system_info, Flags) - 4usize];
    ["Offset of field: acpi_system_info::TimerResolution"]
        [::core::mem::offset_of!(acpi_system_info, TimerResolution) - 8usize];
    ["Offset of field: acpi_system_info::Reserved1"]
        [::core::mem::offset_of!(acpi_system_info, Reserved1) - 12usize];
    ["Offset of field: acpi_system_info::Reserved2"]
        [::core::mem::offset_of!(acpi_system_info, Reserved2) - 16usize];
    ["Offset of field: acpi_system_info::DebugLevel"]
        [::core::mem::offset_of!(acpi_system_info, DebugLevel) - 20usize];
    ["Offset of field: acpi_system_info::DebugLayer"]
        [::core::mem::offset_of!(acpi_system_info, DebugLayer) - 24usize];
};
pub type ACPI_SYSTEM_INFO = acpi_system_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_statistics {
    pub SciCount: UINT32,
    pub GpeCount: UINT32,
    pub FixedEventCount: [UINT32; 5usize],
    pub MethodCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_statistics"][::core::mem::size_of::<acpi_statistics>() - 32usize];
    ["Alignment of acpi_statistics"][::core::mem::align_of::<acpi_statistics>() - 4usize];
    ["Offset of field: acpi_statistics::SciCount"]
        [::core::mem::offset_of!(acpi_statistics, SciCount) - 0usize];
    ["Offset of field: acpi_statistics::GpeCount"]
        [::core::mem::offset_of!(acpi_statistics, GpeCount) - 4usize];
    ["Offset of field: acpi_statistics::FixedEventCount"]
        [::core::mem::offset_of!(acpi_statistics, FixedEventCount) - 8usize];
    ["Offset of field: acpi_statistics::MethodCount"]
        [::core::mem::offset_of!(acpi_statistics, MethodCount) - 28usize];
};
pub type ACPI_STATISTICS = acpi_statistics;
pub type ACPI_OSD_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_OSD_EXEC_CALLBACK =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void)>;
pub type ACPI_SCI_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_GBL_EVENT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        EventType: UINT32,
        Device: ACPI_HANDLE,
        EventNumber: UINT32,
        Context: *mut ::core::ffi::c_void,
    ),
>;
pub type ACPI_EVENT_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_GPE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Context: *mut ::core::ffi::c_void,
    ) -> UINT32,
>;
pub type ACPI_NOTIFY_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Device: ACPI_HANDLE, Value: UINT32, Context: *mut ::core::ffi::c_void),
>;
pub type ACPI_OBJECT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Object: ACPI_HANDLE, Data: *mut ::core::ffi::c_void),
>;
pub type ACPI_INIT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Object: ACPI_HANDLE, Function: UINT32) -> ACPI_STATUS,
>;
pub type ACPI_EXCEPTION_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        AmlStatus: ACPI_STATUS,
        Name: ACPI_NAME,
        Opcode: UINT16,
        AmlOffset: UINT32,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_TABLE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        Event: UINT32,
        Table: *mut ::core::ffi::c_void,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_ADR_SPACE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        Function: UINT32,
        Address: ACPI_PHYSICAL_ADDRESS,
        BitWidth: UINT32,
        Value: *mut UINT64,
        HandlerContext: *mut ::core::ffi::c_void,
        RegionContext: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_connection_info {
    pub Connection: *mut UINT8,
    pub Length: UINT16,
    pub AccessLength: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_connection_info"][::core::mem::size_of::<acpi_connection_info>() - 16usize];
    ["Alignment of acpi_connection_info"][::core::mem::align_of::<acpi_connection_info>() - 8usize];
    ["Offset of field: acpi_connection_info::Connection"]
        [::core::mem::offset_of!(acpi_connection_info, Connection) - 0usize];
    ["Offset of field: acpi_connection_info::Length"]
        [::core::mem::offset_of!(acpi_connection_info, Length) - 8usize];
    ["Offset of field: acpi_connection_info::AccessLength"]
        [::core::mem::offset_of!(acpi_connection_info, AccessLength) - 10usize];
};
pub type ACPI_CONNECTION_INFO = acpi_connection_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcc_info {
    pub SubspaceId: UINT8,
    pub Length: UINT16,
    pub InternalBuffer: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcc_info"][::core::mem::size_of::<acpi_pcc_info>() - 16usize];
    ["Alignment of acpi_pcc_info"][::core::mem::align_of::<acpi_pcc_info>() - 8usize];
    ["Offset of field: acpi_pcc_info::SubspaceId"]
        [::core::mem::offset_of!(acpi_pcc_info, SubspaceId) - 0usize];
    ["Offset of field: acpi_pcc_info::Length"]
        [::core::mem::offset_of!(acpi_pcc_info, Length) - 2usize];
    ["Offset of field: acpi_pcc_info::InternalBuffer"]
        [::core::mem::offset_of!(acpi_pcc_info, InternalBuffer) - 8usize];
};
pub type ACPI_PCC_INFO = acpi_pcc_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ffh_info {
    pub Offset: UINT64,
    pub Length: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ffh_info"][::core::mem::size_of::<acpi_ffh_info>() - 16usize];
    ["Alignment of acpi_ffh_info"][::core::mem::align_of::<acpi_ffh_info>() - 8usize];
    ["Offset of field: acpi_ffh_info::Offset"]
        [::core::mem::offset_of!(acpi_ffh_info, Offset) - 0usize];
    ["Offset of field: acpi_ffh_info::Length"]
        [::core::mem::offset_of!(acpi_ffh_info, Length) - 8usize];
};
pub type ACPI_FFH_INFO = acpi_ffh_info;
pub type ACPI_ADR_SPACE_SETUP = ::core::option::Option<
    unsafe extern "C" fn(
        RegionHandle: ACPI_HANDLE,
        Function: UINT32,
        HandlerContext: *mut ::core::ffi::c_void,
        RegionContext: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_WALK_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(
        Object: ACPI_HANDLE,
        NestingLevel: UINT32,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_INTERFACE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(InterfaceName: ACPI_STRING, Supported: UINT32) -> UINT32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pnp_device_id {
    pub Length: UINT32,
    pub String: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pnp_device_id"][::core::mem::size_of::<acpi_pnp_device_id>() - 16usize];
    ["Alignment of acpi_pnp_device_id"][::core::mem::align_of::<acpi_pnp_device_id>() - 8usize];
    ["Offset of field: acpi_pnp_device_id::Length"]
        [::core::mem::offset_of!(acpi_pnp_device_id, Length) - 0usize];
    ["Offset of field: acpi_pnp_device_id::String"]
        [::core::mem::offset_of!(acpi_pnp_device_id, String) - 8usize];
};
pub type ACPI_PNP_DEVICE_ID = acpi_pnp_device_id;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_pnp_device_id_list {
    pub Count: UINT32,
    pub ListSize: UINT32,
    pub Ids: __IncompleteArrayField<ACPI_PNP_DEVICE_ID>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pnp_device_id_list"][::core::mem::size_of::<acpi_pnp_device_id_list>() - 8usize];
    ["Alignment of acpi_pnp_device_id_list"]
        [::core::mem::align_of::<acpi_pnp_device_id_list>() - 8usize];
    ["Offset of field: acpi_pnp_device_id_list::Count"]
        [::core::mem::offset_of!(acpi_pnp_device_id_list, Count) - 0usize];
    ["Offset of field: acpi_pnp_device_id_list::ListSize"]
        [::core::mem::offset_of!(acpi_pnp_device_id_list, ListSize) - 4usize];
    ["Offset of field: acpi_pnp_device_id_list::Ids"]
        [::core::mem::offset_of!(acpi_pnp_device_id_list, Ids) - 8usize];
};
pub type ACPI_PNP_DEVICE_ID_LIST = acpi_pnp_device_id_list;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_device_info {
    pub InfoSize: UINT32,
    pub Name: UINT32,
    pub Type: ACPI_OBJECT_TYPE,
    pub ParamCount: UINT8,
    pub Valid: UINT16,
    pub Flags: UINT8,
    pub HighestDstates: [UINT8; 4usize],
    pub LowestDstates: [UINT8; 5usize],
    pub Address: UINT64,
    pub HardwareId: ACPI_PNP_DEVICE_ID,
    pub UniqueId: ACPI_PNP_DEVICE_ID,
    pub ClassCode: ACPI_PNP_DEVICE_ID,
    pub CompatibleIdList: ACPI_PNP_DEVICE_ID_LIST,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_device_info"][::core::mem::size_of::<acpi_device_info>() - 96usize];
    ["Alignment of acpi_device_info"][::core::mem::align_of::<acpi_device_info>() - 8usize];
    ["Offset of field: acpi_device_info::InfoSize"]
        [::core::mem::offset_of!(acpi_device_info, InfoSize) - 0usize];
    ["Offset of field: acpi_device_info::Name"]
        [::core::mem::offset_of!(acpi_device_info, Name) - 4usize];
    ["Offset of field: acpi_device_info::Type"]
        [::core::mem::offset_of!(acpi_device_info, Type) - 8usize];
    ["Offset of field: acpi_device_info::ParamCount"]
        [::core::mem::offset_of!(acpi_device_info, ParamCount) - 12usize];
    ["Offset of field: acpi_device_info::Valid"]
        [::core::mem::offset_of!(acpi_device_info, Valid) - 14usize];
    ["Offset of field: acpi_device_info::Flags"]
        [::core::mem::offset_of!(acpi_device_info, Flags) - 16usize];
    ["Offset of field: acpi_device_info::HighestDstates"]
        [::core::mem::offset_of!(acpi_device_info, HighestDstates) - 17usize];
    ["Offset of field: acpi_device_info::LowestDstates"]
        [::core::mem::offset_of!(acpi_device_info, LowestDstates) - 21usize];
    ["Offset of field: acpi_device_info::Address"]
        [::core::mem::offset_of!(acpi_device_info, Address) - 32usize];
    ["Offset of field: acpi_device_info::HardwareId"]
        [::core::mem::offset_of!(acpi_device_info, HardwareId) - 40usize];
    ["Offset of field: acpi_device_info::UniqueId"]
        [::core::mem::offset_of!(acpi_device_info, UniqueId) - 56usize];
    ["Offset of field: acpi_device_info::ClassCode"]
        [::core::mem::offset_of!(acpi_device_info, ClassCode) - 72usize];
    ["Offset of field: acpi_device_info::CompatibleIdList"]
        [::core::mem::offset_of!(acpi_device_info, CompatibleIdList) - 88usize];
};
pub type ACPI_DEVICE_INFO = acpi_device_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pci_id {
    pub Segment: UINT16,
    pub Bus: UINT16,
    pub Device: UINT16,
    pub Function: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pci_id"][::core::mem::size_of::<acpi_pci_id>() - 8usize];
    ["Alignment of acpi_pci_id"][::core::mem::align_of::<acpi_pci_id>() - 2usize];
    ["Offset of field: acpi_pci_id::Segment"]
        [::core::mem::offset_of!(acpi_pci_id, Segment) - 0usize];
    ["Offset of field: acpi_pci_id::Bus"][::core::mem::offset_of!(acpi_pci_id, Bus) - 2usize];
    ["Offset of field: acpi_pci_id::Device"][::core::mem::offset_of!(acpi_pci_id, Device) - 4usize];
    ["Offset of field: acpi_pci_id::Function"]
        [::core::mem::offset_of!(acpi_pci_id, Function) - 6usize];
};
pub type ACPI_PCI_ID = acpi_pci_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mem_mapping {
    pub PhysicalAddress: ACPI_PHYSICAL_ADDRESS,
    pub LogicalAddress: *mut UINT8,
    pub Length: ACPI_SIZE,
    pub NextMm: *mut acpi_mem_mapping,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mem_mapping"][::core::mem::size_of::<acpi_mem_mapping>() - 32usize];
    ["Alignment of acpi_mem_mapping"][::core::mem::align_of::<acpi_mem_mapping>() - 8usize];
    ["Offset of field: acpi_mem_mapping::PhysicalAddress"]
        [::core::mem::offset_of!(acpi_mem_mapping, PhysicalAddress) - 0usize];
    ["Offset of field: acpi_mem_mapping::LogicalAddress"]
        [::core::mem::offset_of!(acpi_mem_mapping, LogicalAddress) - 8usize];
    ["Offset of field: acpi_mem_mapping::Length"]
        [::core::mem::offset_of!(acpi_mem_mapping, Length) - 16usize];
    ["Offset of field: acpi_mem_mapping::NextMm"]
        [::core::mem::offset_of!(acpi_mem_mapping, NextMm) - 24usize];
};
pub type ACPI_MEM_MAPPING = acpi_mem_mapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mem_space_context {
    pub Length: UINT32,
    pub Address: ACPI_PHYSICAL_ADDRESS,
    pub CurMm: *mut ACPI_MEM_MAPPING,
    pub FirstMm: *mut ACPI_MEM_MAPPING,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mem_space_context"][::core::mem::size_of::<acpi_mem_space_context>() - 32usize];
    ["Alignment of acpi_mem_space_context"]
        [::core::mem::align_of::<acpi_mem_space_context>() - 8usize];
    ["Offset of field: acpi_mem_space_context::Length"]
        [::core::mem::offset_of!(acpi_mem_space_context, Length) - 0usize];
    ["Offset of field: acpi_mem_space_context::Address"]
        [::core::mem::offset_of!(acpi_mem_space_context, Address) - 8usize];
    ["Offset of field: acpi_mem_space_context::CurMm"]
        [::core::mem::offset_of!(acpi_mem_space_context, CurMm) - 16usize];
    ["Offset of field: acpi_mem_space_context::FirstMm"]
        [::core::mem::offset_of!(acpi_mem_space_context, FirstMm) - 24usize];
};
pub type ACPI_MEM_SPACE_CONTEXT = acpi_mem_space_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_data_table_mapping {
    pub Pointer: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_data_table_mapping"][::core::mem::size_of::<acpi_data_table_mapping>() - 8usize];
    ["Alignment of acpi_data_table_mapping"]
        [::core::mem::align_of::<acpi_data_table_mapping>() - 8usize];
    ["Offset of field: acpi_data_table_mapping::Pointer"]
        [::core::mem::offset_of!(acpi_data_table_mapping, Pointer) - 0usize];
};
pub type ACPI_DATA_TABLE_MAPPING = acpi_data_table_mapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_memory_list {
    pub ListName: *const ::core::ffi::c_char,
    pub ListHead: *mut ::core::ffi::c_void,
    pub ObjectSize: UINT16,
    pub MaxDepth: UINT16,
    pub CurrentDepth: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_memory_list"][::core::mem::size_of::<acpi_memory_list>() - 24usize];
    ["Alignment of acpi_memory_list"][::core::mem::align_of::<acpi_memory_list>() - 8usize];
    ["Offset of field: acpi_memory_list::ListName"]
        [::core::mem::offset_of!(acpi_memory_list, ListName) - 0usize];
    ["Offset of field: acpi_memory_list::ListHead"]
        [::core::mem::offset_of!(acpi_memory_list, ListHead) - 8usize];
    ["Offset of field: acpi_memory_list::ObjectSize"]
        [::core::mem::offset_of!(acpi_memory_list, ObjectSize) - 16usize];
    ["Offset of field: acpi_memory_list::MaxDepth"]
        [::core::mem::offset_of!(acpi_memory_list, MaxDepth) - 18usize];
    ["Offset of field: acpi_memory_list::CurrentDepth"]
        [::core::mem::offset_of!(acpi_memory_list, CurrentDepth) - 20usize];
};
pub type ACPI_MEMORY_LIST = acpi_memory_list;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_METHOD: ACPI_TRACE_EVENT_TYPE = 0;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_OPCODE: ACPI_TRACE_EVENT_TYPE = 1;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_REGION: ACPI_TRACE_EVENT_TYPE = 2;
pub type ACPI_TRACE_EVENT_TYPE = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_exception_info {
    pub Name: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_exception_info"][::core::mem::size_of::<acpi_exception_info>() - 8usize];
    ["Alignment of acpi_exception_info"][::core::mem::align_of::<acpi_exception_info>() - 8usize];
    ["Offset of field: acpi_exception_info::Name"]
        [::core::mem::offset_of!(acpi_exception_info, Name) - 0usize];
};
pub type ACPI_EXCEPTION_INFO = acpi_exception_info;
#[doc = " Master ACPI Table Header. This common header is used by all ACPI tables\n except the RSDP and FACS.\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_header {
    pub Signature: [::core::ffi::c_char; 4usize],
    pub Length: UINT32,
    pub Revision: UINT8,
    pub Checksum: UINT8,
    pub OemId: [::core::ffi::c_char; 6usize],
    pub OemTableId: [::core::ffi::c_char; 8usize],
    pub OemRevision: UINT32,
    pub AslCompilerId: [::core::ffi::c_char; 4usize],
    pub AslCompilerRevision: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_header"][::core::mem::size_of::<acpi_table_header>() - 36usize];
    ["Alignment of acpi_table_header"][::core::mem::align_of::<acpi_table_header>() - 1usize];
    ["Offset of field: acpi_table_header::Signature"]
        [::core::mem::offset_of!(acpi_table_header, Signature) - 0usize];
    ["Offset of field: acpi_table_header::Length"]
        [::core::mem::offset_of!(acpi_table_header, Length) - 4usize];
    ["Offset of field: acpi_table_header::Revision"]
        [::core::mem::offset_of!(acpi_table_header, Revision) - 8usize];
    ["Offset of field: acpi_table_header::Checksum"]
        [::core::mem::offset_of!(acpi_table_header, Checksum) - 9usize];
    ["Offset of field: acpi_table_header::OemId"]
        [::core::mem::offset_of!(acpi_table_header, OemId) - 10usize];
    ["Offset of field: acpi_table_header::OemTableId"]
        [::core::mem::offset_of!(acpi_table_header, OemTableId) - 16usize];
    ["Offset of field: acpi_table_header::OemRevision"]
        [::core::mem::offset_of!(acpi_table_header, OemRevision) - 24usize];
    ["Offset of field: acpi_table_header::AslCompilerId"]
        [::core::mem::offset_of!(acpi_table_header, AslCompilerId) - 28usize];
    ["Offset of field: acpi_table_header::AslCompilerRevision"]
        [::core::mem::offset_of!(acpi_table_header, AslCompilerRevision) - 32usize];
};
#[doc = " Master ACPI Table Header. This common header is used by all ACPI tables\n except the RSDP and FACS.\n"]
pub type ACPI_TABLE_HEADER = acpi_table_header;
#[doc = " GAS - Generic Address Structure (ACPI 2.0+)\n\n Note: Since this structure is used in the ACPI tables, it is byte aligned.\n If misaligned access is not supported by the hardware, accesses to the\n 64-bit Address field must be performed with care.\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_generic_address {
    pub SpaceId: UINT8,
    pub BitWidth: UINT8,
    pub BitOffset: UINT8,
    pub AccessWidth: UINT8,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_generic_address"][::core::mem::size_of::<acpi_generic_address>() - 12usize];
    ["Alignment of acpi_generic_address"][::core::mem::align_of::<acpi_generic_address>() - 1usize];
    ["Offset of field: acpi_generic_address::SpaceId"]
        [::core::mem::offset_of!(acpi_generic_address, SpaceId) - 0usize];
    ["Offset of field: acpi_generic_address::BitWidth"]
        [::core::mem::offset_of!(acpi_generic_address, BitWidth) - 1usize];
    ["Offset of field: acpi_generic_address::BitOffset"]
        [::core::mem::offset_of!(acpi_generic_address, BitOffset) - 2usize];
    ["Offset of field: acpi_generic_address::AccessWidth"]
        [::core::mem::offset_of!(acpi_generic_address, AccessWidth) - 3usize];
    ["Offset of field: acpi_generic_address::Address"]
        [::core::mem::offset_of!(acpi_generic_address, Address) - 4usize];
};
#[doc = " GAS - Generic Address Structure (ACPI 2.0+)\n\n Note: Since this structure is used in the ACPI tables, it is byte aligned.\n If misaligned access is not supported by the hardware, accesses to the\n 64-bit Address field must be performed with care.\n"]
pub type ACPI_GENERIC_ADDRESS = acpi_generic_address;
#[doc = " RSDP - Root System Description Pointer (Signature is \"RSD PTR \")\n        Version 2\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rsdp {
    pub Signature: [::core::ffi::c_char; 8usize],
    pub Checksum: UINT8,
    pub OemId: [::core::ffi::c_char; 6usize],
    pub Revision: UINT8,
    pub RsdtPhysicalAddress: UINT32,
    pub Length: UINT32,
    pub XsdtPhysicalAddress: UINT64,
    pub ExtendedChecksum: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_rsdp"][::core::mem::size_of::<acpi_table_rsdp>() - 36usize];
    ["Alignment of acpi_table_rsdp"][::core::mem::align_of::<acpi_table_rsdp>() - 1usize];
    ["Offset of field: acpi_table_rsdp::Signature"]
        [::core::mem::offset_of!(acpi_table_rsdp, Signature) - 0usize];
    ["Offset of field: acpi_table_rsdp::Checksum"]
        [::core::mem::offset_of!(acpi_table_rsdp, Checksum) - 8usize];
    ["Offset of field: acpi_table_rsdp::OemId"]
        [::core::mem::offset_of!(acpi_table_rsdp, OemId) - 9usize];
    ["Offset of field: acpi_table_rsdp::Revision"]
        [::core::mem::offset_of!(acpi_table_rsdp, Revision) - 15usize];
    ["Offset of field: acpi_table_rsdp::RsdtPhysicalAddress"]
        [::core::mem::offset_of!(acpi_table_rsdp, RsdtPhysicalAddress) - 16usize];
    ["Offset of field: acpi_table_rsdp::Length"]
        [::core::mem::offset_of!(acpi_table_rsdp, Length) - 20usize];
    ["Offset of field: acpi_table_rsdp::XsdtPhysicalAddress"]
        [::core::mem::offset_of!(acpi_table_rsdp, XsdtPhysicalAddress) - 24usize];
    ["Offset of field: acpi_table_rsdp::ExtendedChecksum"]
        [::core::mem::offset_of!(acpi_table_rsdp, ExtendedChecksum) - 32usize];
    ["Offset of field: acpi_table_rsdp::Reserved"]
        [::core::mem::offset_of!(acpi_table_rsdp, Reserved) - 33usize];
};
#[doc = " RSDP - Root System Description Pointer (Signature is \"RSD PTR \")\n        Version 2\n"]
pub type ACPI_TABLE_RSDP = acpi_table_rsdp;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rsdp_common {
    pub Signature: [::core::ffi::c_char; 8usize],
    pub Checksum: UINT8,
    pub OemId: [::core::ffi::c_char; 6usize],
    pub Revision: UINT8,
    pub RsdtPhysicalAddress: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rsdp_common"][::core::mem::size_of::<acpi_rsdp_common>() - 20usize];
    ["Alignment of acpi_rsdp_common"][::core::mem::align_of::<acpi_rsdp_common>() - 1usize];
    ["Offset of field: acpi_rsdp_common::Signature"]
        [::core::mem::offset_of!(acpi_rsdp_common, Signature) - 0usize];
    ["Offset of field: acpi_rsdp_common::Checksum"]
        [::core::mem::offset_of!(acpi_rsdp_common, Checksum) - 8usize];
    ["Offset of field: acpi_rsdp_common::OemId"]
        [::core::mem::offset_of!(acpi_rsdp_common, OemId) - 9usize];
    ["Offset of field: acpi_rsdp_common::Revision"]
        [::core::mem::offset_of!(acpi_rsdp_common, Revision) - 15usize];
    ["Offset of field: acpi_rsdp_common::RsdtPhysicalAddress"]
        [::core::mem::offset_of!(acpi_rsdp_common, RsdtPhysicalAddress) - 16usize];
};
pub type ACPI_RSDP_COMMON = acpi_rsdp_common;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rsdp_extension {
    pub Length: UINT32,
    pub XsdtPhysicalAddress: UINT64,
    pub ExtendedChecksum: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rsdp_extension"][::core::mem::size_of::<acpi_rsdp_extension>() - 16usize];
    ["Alignment of acpi_rsdp_extension"][::core::mem::align_of::<acpi_rsdp_extension>() - 1usize];
    ["Offset of field: acpi_rsdp_extension::Length"]
        [::core::mem::offset_of!(acpi_rsdp_extension, Length) - 0usize];
    ["Offset of field: acpi_rsdp_extension::XsdtPhysicalAddress"]
        [::core::mem::offset_of!(acpi_rsdp_extension, XsdtPhysicalAddress) - 4usize];
    ["Offset of field: acpi_rsdp_extension::ExtendedChecksum"]
        [::core::mem::offset_of!(acpi_rsdp_extension, ExtendedChecksum) - 12usize];
    ["Offset of field: acpi_rsdp_extension::Reserved"]
        [::core::mem::offset_of!(acpi_rsdp_extension, Reserved) - 13usize];
};
pub type ACPI_RSDP_EXTENSION = acpi_rsdp_extension;
#[doc = " RSDT/XSDT - Root System Description Tables\n             Version 1 (both)\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rsdt {
    pub Header: ACPI_TABLE_HEADER,
    pub TableOffsetEntry: [UINT32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_rsdt"][::core::mem::size_of::<acpi_table_rsdt>() - 40usize];
    ["Alignment of acpi_table_rsdt"][::core::mem::align_of::<acpi_table_rsdt>() - 1usize];
    ["Offset of field: acpi_table_rsdt::Header"]
        [::core::mem::offset_of!(acpi_table_rsdt, Header) - 0usize];
    ["Offset of field: acpi_table_rsdt::TableOffsetEntry"]
        [::core::mem::offset_of!(acpi_table_rsdt, TableOffsetEntry) - 36usize];
};
#[doc = " RSDT/XSDT - Root System Description Tables\n             Version 1 (both)\n"]
pub type ACPI_TABLE_RSDT = acpi_table_rsdt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_xsdt {
    pub Header: ACPI_TABLE_HEADER,
    pub TableOffsetEntry: [UINT64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_xsdt"][::core::mem::size_of::<acpi_table_xsdt>() - 44usize];
    ["Alignment of acpi_table_xsdt"][::core::mem::align_of::<acpi_table_xsdt>() - 1usize];
    ["Offset of field: acpi_table_xsdt::Header"]
        [::core::mem::offset_of!(acpi_table_xsdt, Header) - 0usize];
    ["Offset of field: acpi_table_xsdt::TableOffsetEntry"]
        [::core::mem::offset_of!(acpi_table_xsdt, TableOffsetEntry) - 36usize];
};
pub type ACPI_TABLE_XSDT = acpi_table_xsdt;
#[doc = " FACS - Firmware ACPI Control Structure (FACS)\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_facs {
    pub Signature: [::core::ffi::c_char; 4usize],
    pub Length: UINT32,
    pub HardwareSignature: UINT32,
    pub FirmwareWakingVector: UINT32,
    pub GlobalLock: UINT32,
    pub Flags: UINT32,
    pub XFirmwareWakingVector: UINT64,
    pub Version: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub OspmFlags: UINT32,
    pub Reserved1: [UINT8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_facs"][::core::mem::size_of::<acpi_table_facs>() - 64usize];
    ["Alignment of acpi_table_facs"][::core::mem::align_of::<acpi_table_facs>() - 1usize];
    ["Offset of field: acpi_table_facs::Signature"]
        [::core::mem::offset_of!(acpi_table_facs, Signature) - 0usize];
    ["Offset of field: acpi_table_facs::Length"]
        [::core::mem::offset_of!(acpi_table_facs, Length) - 4usize];
    ["Offset of field: acpi_table_facs::HardwareSignature"]
        [::core::mem::offset_of!(acpi_table_facs, HardwareSignature) - 8usize];
    ["Offset of field: acpi_table_facs::FirmwareWakingVector"]
        [::core::mem::offset_of!(acpi_table_facs, FirmwareWakingVector) - 12usize];
    ["Offset of field: acpi_table_facs::GlobalLock"]
        [::core::mem::offset_of!(acpi_table_facs, GlobalLock) - 16usize];
    ["Offset of field: acpi_table_facs::Flags"]
        [::core::mem::offset_of!(acpi_table_facs, Flags) - 20usize];
    ["Offset of field: acpi_table_facs::XFirmwareWakingVector"]
        [::core::mem::offset_of!(acpi_table_facs, XFirmwareWakingVector) - 24usize];
    ["Offset of field: acpi_table_facs::Version"]
        [::core::mem::offset_of!(acpi_table_facs, Version) - 32usize];
    ["Offset of field: acpi_table_facs::Reserved"]
        [::core::mem::offset_of!(acpi_table_facs, Reserved) - 33usize];
    ["Offset of field: acpi_table_facs::OspmFlags"]
        [::core::mem::offset_of!(acpi_table_facs, OspmFlags) - 36usize];
    ["Offset of field: acpi_table_facs::Reserved1"]
        [::core::mem::offset_of!(acpi_table_facs, Reserved1) - 40usize];
};
#[doc = " FACS - Firmware ACPI Control Structure (FACS)\n"]
pub type ACPI_TABLE_FACS = acpi_table_facs;
#[doc = " FADT - Fixed ACPI Description Table (Signature \"FACP\")\n        Version 6\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_fadt {
    pub Header: ACPI_TABLE_HEADER,
    pub Facs: UINT32,
    pub Dsdt: UINT32,
    pub Model: UINT8,
    pub PreferredProfile: UINT8,
    pub SciInterrupt: UINT16,
    pub SmiCommand: UINT32,
    pub AcpiEnable: UINT8,
    pub AcpiDisable: UINT8,
    pub S4BiosRequest: UINT8,
    pub PstateControl: UINT8,
    pub Pm1aEventBlock: UINT32,
    pub Pm1bEventBlock: UINT32,
    pub Pm1aControlBlock: UINT32,
    pub Pm1bControlBlock: UINT32,
    pub Pm2ControlBlock: UINT32,
    pub PmTimerBlock: UINT32,
    pub Gpe0Block: UINT32,
    pub Gpe1Block: UINT32,
    pub Pm1EventLength: UINT8,
    pub Pm1ControlLength: UINT8,
    pub Pm2ControlLength: UINT8,
    pub PmTimerLength: UINT8,
    pub Gpe0BlockLength: UINT8,
    pub Gpe1BlockLength: UINT8,
    pub Gpe1Base: UINT8,
    pub CstControl: UINT8,
    pub C2Latency: UINT16,
    pub C3Latency: UINT16,
    pub FlushSize: UINT16,
    pub FlushStride: UINT16,
    pub DutyOffset: UINT8,
    pub DutyWidth: UINT8,
    pub DayAlarm: UINT8,
    pub MonthAlarm: UINT8,
    pub Century: UINT8,
    pub BootFlags: UINT16,
    pub Reserved: UINT8,
    pub Flags: UINT32,
    pub ResetRegister: ACPI_GENERIC_ADDRESS,
    pub ResetValue: UINT8,
    pub ArmBootFlags: UINT16,
    pub MinorRevision: UINT8,
    pub XFacs: UINT64,
    pub XDsdt: UINT64,
    pub XPm1aEventBlock: ACPI_GENERIC_ADDRESS,
    pub XPm1bEventBlock: ACPI_GENERIC_ADDRESS,
    pub XPm1aControlBlock: ACPI_GENERIC_ADDRESS,
    pub XPm1bControlBlock: ACPI_GENERIC_ADDRESS,
    pub XPm2ControlBlock: ACPI_GENERIC_ADDRESS,
    pub XPmTimerBlock: ACPI_GENERIC_ADDRESS,
    pub XGpe0Block: ACPI_GENERIC_ADDRESS,
    pub XGpe1Block: ACPI_GENERIC_ADDRESS,
    pub SleepControl: ACPI_GENERIC_ADDRESS,
    pub SleepStatus: ACPI_GENERIC_ADDRESS,
    pub HypervisorId: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_fadt"][::core::mem::size_of::<acpi_table_fadt>() - 276usize];
    ["Alignment of acpi_table_fadt"][::core::mem::align_of::<acpi_table_fadt>() - 1usize];
    ["Offset of field: acpi_table_fadt::Header"]
        [::core::mem::offset_of!(acpi_table_fadt, Header) - 0usize];
    ["Offset of field: acpi_table_fadt::Facs"]
        [::core::mem::offset_of!(acpi_table_fadt, Facs) - 36usize];
    ["Offset of field: acpi_table_fadt::Dsdt"]
        [::core::mem::offset_of!(acpi_table_fadt, Dsdt) - 40usize];
    ["Offset of field: acpi_table_fadt::Model"]
        [::core::mem::offset_of!(acpi_table_fadt, Model) - 44usize];
    ["Offset of field: acpi_table_fadt::PreferredProfile"]
        [::core::mem::offset_of!(acpi_table_fadt, PreferredProfile) - 45usize];
    ["Offset of field: acpi_table_fadt::SciInterrupt"]
        [::core::mem::offset_of!(acpi_table_fadt, SciInterrupt) - 46usize];
    ["Offset of field: acpi_table_fadt::SmiCommand"]
        [::core::mem::offset_of!(acpi_table_fadt, SmiCommand) - 48usize];
    ["Offset of field: acpi_table_fadt::AcpiEnable"]
        [::core::mem::offset_of!(acpi_table_fadt, AcpiEnable) - 52usize];
    ["Offset of field: acpi_table_fadt::AcpiDisable"]
        [::core::mem::offset_of!(acpi_table_fadt, AcpiDisable) - 53usize];
    ["Offset of field: acpi_table_fadt::S4BiosRequest"]
        [::core::mem::offset_of!(acpi_table_fadt, S4BiosRequest) - 54usize];
    ["Offset of field: acpi_table_fadt::PstateControl"]
        [::core::mem::offset_of!(acpi_table_fadt, PstateControl) - 55usize];
    ["Offset of field: acpi_table_fadt::Pm1aEventBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm1aEventBlock) - 56usize];
    ["Offset of field: acpi_table_fadt::Pm1bEventBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm1bEventBlock) - 60usize];
    ["Offset of field: acpi_table_fadt::Pm1aControlBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm1aControlBlock) - 64usize];
    ["Offset of field: acpi_table_fadt::Pm1bControlBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm1bControlBlock) - 68usize];
    ["Offset of field: acpi_table_fadt::Pm2ControlBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm2ControlBlock) - 72usize];
    ["Offset of field: acpi_table_fadt::PmTimerBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, PmTimerBlock) - 76usize];
    ["Offset of field: acpi_table_fadt::Gpe0Block"]
        [::core::mem::offset_of!(acpi_table_fadt, Gpe0Block) - 80usize];
    ["Offset of field: acpi_table_fadt::Gpe1Block"]
        [::core::mem::offset_of!(acpi_table_fadt, Gpe1Block) - 84usize];
    ["Offset of field: acpi_table_fadt::Pm1EventLength"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm1EventLength) - 88usize];
    ["Offset of field: acpi_table_fadt::Pm1ControlLength"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm1ControlLength) - 89usize];
    ["Offset of field: acpi_table_fadt::Pm2ControlLength"]
        [::core::mem::offset_of!(acpi_table_fadt, Pm2ControlLength) - 90usize];
    ["Offset of field: acpi_table_fadt::PmTimerLength"]
        [::core::mem::offset_of!(acpi_table_fadt, PmTimerLength) - 91usize];
    ["Offset of field: acpi_table_fadt::Gpe0BlockLength"]
        [::core::mem::offset_of!(acpi_table_fadt, Gpe0BlockLength) - 92usize];
    ["Offset of field: acpi_table_fadt::Gpe1BlockLength"]
        [::core::mem::offset_of!(acpi_table_fadt, Gpe1BlockLength) - 93usize];
    ["Offset of field: acpi_table_fadt::Gpe1Base"]
        [::core::mem::offset_of!(acpi_table_fadt, Gpe1Base) - 94usize];
    ["Offset of field: acpi_table_fadt::CstControl"]
        [::core::mem::offset_of!(acpi_table_fadt, CstControl) - 95usize];
    ["Offset of field: acpi_table_fadt::C2Latency"]
        [::core::mem::offset_of!(acpi_table_fadt, C2Latency) - 96usize];
    ["Offset of field: acpi_table_fadt::C3Latency"]
        [::core::mem::offset_of!(acpi_table_fadt, C3Latency) - 98usize];
    ["Offset of field: acpi_table_fadt::FlushSize"]
        [::core::mem::offset_of!(acpi_table_fadt, FlushSize) - 100usize];
    ["Offset of field: acpi_table_fadt::FlushStride"]
        [::core::mem::offset_of!(acpi_table_fadt, FlushStride) - 102usize];
    ["Offset of field: acpi_table_fadt::DutyOffset"]
        [::core::mem::offset_of!(acpi_table_fadt, DutyOffset) - 104usize];
    ["Offset of field: acpi_table_fadt::DutyWidth"]
        [::core::mem::offset_of!(acpi_table_fadt, DutyWidth) - 105usize];
    ["Offset of field: acpi_table_fadt::DayAlarm"]
        [::core::mem::offset_of!(acpi_table_fadt, DayAlarm) - 106usize];
    ["Offset of field: acpi_table_fadt::MonthAlarm"]
        [::core::mem::offset_of!(acpi_table_fadt, MonthAlarm) - 107usize];
    ["Offset of field: acpi_table_fadt::Century"]
        [::core::mem::offset_of!(acpi_table_fadt, Century) - 108usize];
    ["Offset of field: acpi_table_fadt::BootFlags"]
        [::core::mem::offset_of!(acpi_table_fadt, BootFlags) - 109usize];
    ["Offset of field: acpi_table_fadt::Reserved"]
        [::core::mem::offset_of!(acpi_table_fadt, Reserved) - 111usize];
    ["Offset of field: acpi_table_fadt::Flags"]
        [::core::mem::offset_of!(acpi_table_fadt, Flags) - 112usize];
    ["Offset of field: acpi_table_fadt::ResetRegister"]
        [::core::mem::offset_of!(acpi_table_fadt, ResetRegister) - 116usize];
    ["Offset of field: acpi_table_fadt::ResetValue"]
        [::core::mem::offset_of!(acpi_table_fadt, ResetValue) - 128usize];
    ["Offset of field: acpi_table_fadt::ArmBootFlags"]
        [::core::mem::offset_of!(acpi_table_fadt, ArmBootFlags) - 129usize];
    ["Offset of field: acpi_table_fadt::MinorRevision"]
        [::core::mem::offset_of!(acpi_table_fadt, MinorRevision) - 131usize];
    ["Offset of field: acpi_table_fadt::XFacs"]
        [::core::mem::offset_of!(acpi_table_fadt, XFacs) - 132usize];
    ["Offset of field: acpi_table_fadt::XDsdt"]
        [::core::mem::offset_of!(acpi_table_fadt, XDsdt) - 140usize];
    ["Offset of field: acpi_table_fadt::XPm1aEventBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, XPm1aEventBlock) - 148usize];
    ["Offset of field: acpi_table_fadt::XPm1bEventBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, XPm1bEventBlock) - 160usize];
    ["Offset of field: acpi_table_fadt::XPm1aControlBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, XPm1aControlBlock) - 172usize];
    ["Offset of field: acpi_table_fadt::XPm1bControlBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, XPm1bControlBlock) - 184usize];
    ["Offset of field: acpi_table_fadt::XPm2ControlBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, XPm2ControlBlock) - 196usize];
    ["Offset of field: acpi_table_fadt::XPmTimerBlock"]
        [::core::mem::offset_of!(acpi_table_fadt, XPmTimerBlock) - 208usize];
    ["Offset of field: acpi_table_fadt::XGpe0Block"]
        [::core::mem::offset_of!(acpi_table_fadt, XGpe0Block) - 220usize];
    ["Offset of field: acpi_table_fadt::XGpe1Block"]
        [::core::mem::offset_of!(acpi_table_fadt, XGpe1Block) - 232usize];
    ["Offset of field: acpi_table_fadt::SleepControl"]
        [::core::mem::offset_of!(acpi_table_fadt, SleepControl) - 244usize];
    ["Offset of field: acpi_table_fadt::SleepStatus"]
        [::core::mem::offset_of!(acpi_table_fadt, SleepStatus) - 256usize];
    ["Offset of field: acpi_table_fadt::HypervisorId"]
        [::core::mem::offset_of!(acpi_table_fadt, HypervisorId) - 268usize];
};
#[doc = " FADT - Fixed ACPI Description Table (Signature \"FACP\")\n        Version 6\n"]
pub type ACPI_TABLE_FADT = acpi_table_fadt;
pub const AcpiPreferredPmProfiles_PM_UNSPECIFIED: AcpiPreferredPmProfiles = 0;
pub const AcpiPreferredPmProfiles_PM_DESKTOP: AcpiPreferredPmProfiles = 1;
pub const AcpiPreferredPmProfiles_PM_MOBILE: AcpiPreferredPmProfiles = 2;
pub const AcpiPreferredPmProfiles_PM_WORKSTATION: AcpiPreferredPmProfiles = 3;
pub const AcpiPreferredPmProfiles_PM_ENTERPRISE_SERVER: AcpiPreferredPmProfiles = 4;
pub const AcpiPreferredPmProfiles_PM_SOHO_SERVER: AcpiPreferredPmProfiles = 5;
pub const AcpiPreferredPmProfiles_PM_APPLIANCE_PC: AcpiPreferredPmProfiles = 6;
pub const AcpiPreferredPmProfiles_PM_PERFORMANCE_SERVER: AcpiPreferredPmProfiles = 7;
pub const AcpiPreferredPmProfiles_PM_TABLET: AcpiPreferredPmProfiles = 8;
pub type AcpiPreferredPmProfiles = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_name_union {
    pub Integer: UINT32,
    pub Ascii: [::core::ffi::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_name_union"][::core::mem::size_of::<acpi_name_union>() - 4usize];
    ["Alignment of acpi_name_union"][::core::mem::align_of::<acpi_name_union>() - 4usize];
    ["Offset of field: acpi_name_union::Integer"]
        [::core::mem::offset_of!(acpi_name_union, Integer) - 0usize];
    ["Offset of field: acpi_name_union::Ascii"]
        [::core::mem::offset_of!(acpi_name_union, Ascii) - 0usize];
};
pub type ACPI_NAME_UNION = acpi_name_union;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_table_desc {
    pub Address: ACPI_PHYSICAL_ADDRESS,
    pub Pointer: *mut ACPI_TABLE_HEADER,
    pub Length: UINT32,
    pub Signature: ACPI_NAME_UNION,
    pub OwnerId: ACPI_OWNER_ID,
    pub Flags: UINT8,
    pub ValidationCount: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_desc"][::core::mem::size_of::<acpi_table_desc>() - 32usize];
    ["Alignment of acpi_table_desc"][::core::mem::align_of::<acpi_table_desc>() - 8usize];
    ["Offset of field: acpi_table_desc::Address"]
        [::core::mem::offset_of!(acpi_table_desc, Address) - 0usize];
    ["Offset of field: acpi_table_desc::Pointer"]
        [::core::mem::offset_of!(acpi_table_desc, Pointer) - 8usize];
    ["Offset of field: acpi_table_desc::Length"]
        [::core::mem::offset_of!(acpi_table_desc, Length) - 16usize];
    ["Offset of field: acpi_table_desc::Signature"]
        [::core::mem::offset_of!(acpi_table_desc, Signature) - 20usize];
    ["Offset of field: acpi_table_desc::OwnerId"]
        [::core::mem::offset_of!(acpi_table_desc, OwnerId) - 24usize];
    ["Offset of field: acpi_table_desc::Flags"]
        [::core::mem::offset_of!(acpi_table_desc, Flags) - 26usize];
    ["Offset of field: acpi_table_desc::ValidationCount"]
        [::core::mem::offset_of!(acpi_table_desc, ValidationCount) - 28usize];
};
pub type ACPI_TABLE_DESC = acpi_table_desc;
#[doc = " Common subtable headers\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_subtable_header {
    pub Type: UINT8,
    pub Length: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_subtable_header"][::core::mem::size_of::<acpi_subtable_header>() - 2usize];
    ["Alignment of acpi_subtable_header"][::core::mem::align_of::<acpi_subtable_header>() - 1usize];
    ["Offset of field: acpi_subtable_header::Type"]
        [::core::mem::offset_of!(acpi_subtable_header, Type) - 0usize];
    ["Offset of field: acpi_subtable_header::Length"]
        [::core::mem::offset_of!(acpi_subtable_header, Length) - 1usize];
};
#[doc = " Common subtable headers\n"]
pub type ACPI_SUBTABLE_HEADER = acpi_subtable_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_whea_header {
    pub Action: UINT8,
    pub Instruction: UINT8,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub RegisterRegion: ACPI_GENERIC_ADDRESS,
    pub Value: UINT64,
    pub Mask: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_whea_header"][::core::mem::size_of::<acpi_whea_header>() - 32usize];
    ["Alignment of acpi_whea_header"][::core::mem::align_of::<acpi_whea_header>() - 1usize];
    ["Offset of field: acpi_whea_header::Action"]
        [::core::mem::offset_of!(acpi_whea_header, Action) - 0usize];
    ["Offset of field: acpi_whea_header::Instruction"]
        [::core::mem::offset_of!(acpi_whea_header, Instruction) - 1usize];
    ["Offset of field: acpi_whea_header::Flags"]
        [::core::mem::offset_of!(acpi_whea_header, Flags) - 2usize];
    ["Offset of field: acpi_whea_header::Reserved"]
        [::core::mem::offset_of!(acpi_whea_header, Reserved) - 3usize];
    ["Offset of field: acpi_whea_header::RegisterRegion"]
        [::core::mem::offset_of!(acpi_whea_header, RegisterRegion) - 4usize];
    ["Offset of field: acpi_whea_header::Value"]
        [::core::mem::offset_of!(acpi_whea_header, Value) - 16usize];
    ["Offset of field: acpi_whea_header::Mask"]
        [::core::mem::offset_of!(acpi_whea_header, Mask) - 24usize];
};
pub type ACPI_WHEA_HEADER = acpi_whea_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_subtbl_hdr_16 {
    pub Type: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_subtbl_hdr_16"][::core::mem::size_of::<acpi_subtbl_hdr_16>() - 4usize];
    ["Alignment of acpi_subtbl_hdr_16"][::core::mem::align_of::<acpi_subtbl_hdr_16>() - 1usize];
    ["Offset of field: acpi_subtbl_hdr_16::Type"]
        [::core::mem::offset_of!(acpi_subtbl_hdr_16, Type) - 0usize];
    ["Offset of field: acpi_subtbl_hdr_16::Length"]
        [::core::mem::offset_of!(acpi_subtbl_hdr_16, Length) - 2usize];
};
pub type ACPI_SUBTBL_HDR_16 = acpi_subtbl_hdr_16;
#[doc = " ASF - Alert Standard Format table (Signature \"ASF!\")\n       Revision 0x10\n\n Conforms to the Alert Standard Format Specification V2.0, 23 April 2003\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_asf {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_asf"][::core::mem::size_of::<acpi_table_asf>() - 36usize];
    ["Alignment of acpi_table_asf"][::core::mem::align_of::<acpi_table_asf>() - 1usize];
    ["Offset of field: acpi_table_asf::Header"]
        [::core::mem::offset_of!(acpi_table_asf, Header) - 0usize];
};
#[doc = " ASF - Alert Standard Format table (Signature \"ASF!\")\n       Revision 0x10\n\n Conforms to the Alert Standard Format Specification V2.0, 23 April 2003\n"]
pub type ACPI_TABLE_ASF = acpi_table_asf;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_header {
    pub Type: UINT8,
    pub Reserved: UINT8,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_header"][::core::mem::size_of::<acpi_asf_header>() - 4usize];
    ["Alignment of acpi_asf_header"][::core::mem::align_of::<acpi_asf_header>() - 1usize];
    ["Offset of field: acpi_asf_header::Type"]
        [::core::mem::offset_of!(acpi_asf_header, Type) - 0usize];
    ["Offset of field: acpi_asf_header::Reserved"]
        [::core::mem::offset_of!(acpi_asf_header, Reserved) - 1usize];
    ["Offset of field: acpi_asf_header::Length"]
        [::core::mem::offset_of!(acpi_asf_header, Length) - 2usize];
};
pub type ACPI_ASF_HEADER = acpi_asf_header;
pub const AcpiAsfType_ACPI_ASF_TYPE_INFO: AcpiAsfType = 0;
pub const AcpiAsfType_ACPI_ASF_TYPE_ALERT: AcpiAsfType = 1;
pub const AcpiAsfType_ACPI_ASF_TYPE_CONTROL: AcpiAsfType = 2;
pub const AcpiAsfType_ACPI_ASF_TYPE_BOOT: AcpiAsfType = 3;
pub const AcpiAsfType_ACPI_ASF_TYPE_ADDRESS: AcpiAsfType = 4;
pub const AcpiAsfType_ACPI_ASF_TYPE_RESERVED: AcpiAsfType = 5;
pub type AcpiAsfType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_info {
    pub Header: ACPI_ASF_HEADER,
    pub MinResetValue: UINT8,
    pub MinPollInterval: UINT8,
    pub SystemId: UINT16,
    pub MfgId: UINT32,
    pub Flags: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_info"][::core::mem::size_of::<acpi_asf_info>() - 16usize];
    ["Alignment of acpi_asf_info"][::core::mem::align_of::<acpi_asf_info>() - 1usize];
    ["Offset of field: acpi_asf_info::Header"]
        [::core::mem::offset_of!(acpi_asf_info, Header) - 0usize];
    ["Offset of field: acpi_asf_info::MinResetValue"]
        [::core::mem::offset_of!(acpi_asf_info, MinResetValue) - 4usize];
    ["Offset of field: acpi_asf_info::MinPollInterval"]
        [::core::mem::offset_of!(acpi_asf_info, MinPollInterval) - 5usize];
    ["Offset of field: acpi_asf_info::SystemId"]
        [::core::mem::offset_of!(acpi_asf_info, SystemId) - 6usize];
    ["Offset of field: acpi_asf_info::MfgId"]
        [::core::mem::offset_of!(acpi_asf_info, MfgId) - 8usize];
    ["Offset of field: acpi_asf_info::Flags"]
        [::core::mem::offset_of!(acpi_asf_info, Flags) - 12usize];
    ["Offset of field: acpi_asf_info::Reserved2"]
        [::core::mem::offset_of!(acpi_asf_info, Reserved2) - 13usize];
};
pub type ACPI_ASF_INFO = acpi_asf_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_alert {
    pub Header: ACPI_ASF_HEADER,
    pub AssertMask: UINT8,
    pub DeassertMask: UINT8,
    pub Alerts: UINT8,
    pub DataLength: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_alert"][::core::mem::size_of::<acpi_asf_alert>() - 8usize];
    ["Alignment of acpi_asf_alert"][::core::mem::align_of::<acpi_asf_alert>() - 1usize];
    ["Offset of field: acpi_asf_alert::Header"]
        [::core::mem::offset_of!(acpi_asf_alert, Header) - 0usize];
    ["Offset of field: acpi_asf_alert::AssertMask"]
        [::core::mem::offset_of!(acpi_asf_alert, AssertMask) - 4usize];
    ["Offset of field: acpi_asf_alert::DeassertMask"]
        [::core::mem::offset_of!(acpi_asf_alert, DeassertMask) - 5usize];
    ["Offset of field: acpi_asf_alert::Alerts"]
        [::core::mem::offset_of!(acpi_asf_alert, Alerts) - 6usize];
    ["Offset of field: acpi_asf_alert::DataLength"]
        [::core::mem::offset_of!(acpi_asf_alert, DataLength) - 7usize];
};
pub type ACPI_ASF_ALERT = acpi_asf_alert;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_alert_data {
    pub Address: UINT8,
    pub Command: UINT8,
    pub Mask: UINT8,
    pub Value: UINT8,
    pub SensorType: UINT8,
    pub Type: UINT8,
    pub Offset: UINT8,
    pub SourceType: UINT8,
    pub Severity: UINT8,
    pub SensorNumber: UINT8,
    pub Entity: UINT8,
    pub Instance: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_alert_data"][::core::mem::size_of::<acpi_asf_alert_data>() - 12usize];
    ["Alignment of acpi_asf_alert_data"][::core::mem::align_of::<acpi_asf_alert_data>() - 1usize];
    ["Offset of field: acpi_asf_alert_data::Address"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Address) - 0usize];
    ["Offset of field: acpi_asf_alert_data::Command"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Command) - 1usize];
    ["Offset of field: acpi_asf_alert_data::Mask"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Mask) - 2usize];
    ["Offset of field: acpi_asf_alert_data::Value"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Value) - 3usize];
    ["Offset of field: acpi_asf_alert_data::SensorType"]
        [::core::mem::offset_of!(acpi_asf_alert_data, SensorType) - 4usize];
    ["Offset of field: acpi_asf_alert_data::Type"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Type) - 5usize];
    ["Offset of field: acpi_asf_alert_data::Offset"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Offset) - 6usize];
    ["Offset of field: acpi_asf_alert_data::SourceType"]
        [::core::mem::offset_of!(acpi_asf_alert_data, SourceType) - 7usize];
    ["Offset of field: acpi_asf_alert_data::Severity"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Severity) - 8usize];
    ["Offset of field: acpi_asf_alert_data::SensorNumber"]
        [::core::mem::offset_of!(acpi_asf_alert_data, SensorNumber) - 9usize];
    ["Offset of field: acpi_asf_alert_data::Entity"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Entity) - 10usize];
    ["Offset of field: acpi_asf_alert_data::Instance"]
        [::core::mem::offset_of!(acpi_asf_alert_data, Instance) - 11usize];
};
pub type ACPI_ASF_ALERT_DATA = acpi_asf_alert_data;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_remote {
    pub Header: ACPI_ASF_HEADER,
    pub Controls: UINT8,
    pub DataLength: UINT8,
    pub Reserved2: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_remote"][::core::mem::size_of::<acpi_asf_remote>() - 8usize];
    ["Alignment of acpi_asf_remote"][::core::mem::align_of::<acpi_asf_remote>() - 1usize];
    ["Offset of field: acpi_asf_remote::Header"]
        [::core::mem::offset_of!(acpi_asf_remote, Header) - 0usize];
    ["Offset of field: acpi_asf_remote::Controls"]
        [::core::mem::offset_of!(acpi_asf_remote, Controls) - 4usize];
    ["Offset of field: acpi_asf_remote::DataLength"]
        [::core::mem::offset_of!(acpi_asf_remote, DataLength) - 5usize];
    ["Offset of field: acpi_asf_remote::Reserved2"]
        [::core::mem::offset_of!(acpi_asf_remote, Reserved2) - 6usize];
};
pub type ACPI_ASF_REMOTE = acpi_asf_remote;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_control_data {
    pub Function: UINT8,
    pub Address: UINT8,
    pub Command: UINT8,
    pub Value: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_control_data"][::core::mem::size_of::<acpi_asf_control_data>() - 4usize];
    ["Alignment of acpi_asf_control_data"]
        [::core::mem::align_of::<acpi_asf_control_data>() - 1usize];
    ["Offset of field: acpi_asf_control_data::Function"]
        [::core::mem::offset_of!(acpi_asf_control_data, Function) - 0usize];
    ["Offset of field: acpi_asf_control_data::Address"]
        [::core::mem::offset_of!(acpi_asf_control_data, Address) - 1usize];
    ["Offset of field: acpi_asf_control_data::Command"]
        [::core::mem::offset_of!(acpi_asf_control_data, Command) - 2usize];
    ["Offset of field: acpi_asf_control_data::Value"]
        [::core::mem::offset_of!(acpi_asf_control_data, Value) - 3usize];
};
pub type ACPI_ASF_CONTROL_DATA = acpi_asf_control_data;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_rmcp {
    pub Header: ACPI_ASF_HEADER,
    pub Capabilities: [UINT8; 7usize],
    pub CompletionCode: UINT8,
    pub EnterpriseId: UINT32,
    pub Command: UINT8,
    pub Parameter: UINT16,
    pub BootOptions: UINT16,
    pub OemParameters: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_rmcp"][::core::mem::size_of::<acpi_asf_rmcp>() - 23usize];
    ["Alignment of acpi_asf_rmcp"][::core::mem::align_of::<acpi_asf_rmcp>() - 1usize];
    ["Offset of field: acpi_asf_rmcp::Header"]
        [::core::mem::offset_of!(acpi_asf_rmcp, Header) - 0usize];
    ["Offset of field: acpi_asf_rmcp::Capabilities"]
        [::core::mem::offset_of!(acpi_asf_rmcp, Capabilities) - 4usize];
    ["Offset of field: acpi_asf_rmcp::CompletionCode"]
        [::core::mem::offset_of!(acpi_asf_rmcp, CompletionCode) - 11usize];
    ["Offset of field: acpi_asf_rmcp::EnterpriseId"]
        [::core::mem::offset_of!(acpi_asf_rmcp, EnterpriseId) - 12usize];
    ["Offset of field: acpi_asf_rmcp::Command"]
        [::core::mem::offset_of!(acpi_asf_rmcp, Command) - 16usize];
    ["Offset of field: acpi_asf_rmcp::Parameter"]
        [::core::mem::offset_of!(acpi_asf_rmcp, Parameter) - 17usize];
    ["Offset of field: acpi_asf_rmcp::BootOptions"]
        [::core::mem::offset_of!(acpi_asf_rmcp, BootOptions) - 19usize];
    ["Offset of field: acpi_asf_rmcp::OemParameters"]
        [::core::mem::offset_of!(acpi_asf_rmcp, OemParameters) - 21usize];
};
pub type ACPI_ASF_RMCP = acpi_asf_rmcp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_address {
    pub Header: ACPI_ASF_HEADER,
    pub EpromAddress: UINT8,
    pub Devices: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_asf_address"][::core::mem::size_of::<acpi_asf_address>() - 6usize];
    ["Alignment of acpi_asf_address"][::core::mem::align_of::<acpi_asf_address>() - 1usize];
    ["Offset of field: acpi_asf_address::Header"]
        [::core::mem::offset_of!(acpi_asf_address, Header) - 0usize];
    ["Offset of field: acpi_asf_address::EpromAddress"]
        [::core::mem::offset_of!(acpi_asf_address, EpromAddress) - 4usize];
    ["Offset of field: acpi_asf_address::Devices"]
        [::core::mem::offset_of!(acpi_asf_address, Devices) - 5usize];
};
pub type ACPI_ASF_ADDRESS = acpi_asf_address;
#[doc = " ASPT - AMD Secure Processor Table (Signature \"ASPT\")\n        Revision 0x1\n\n Conforms to AMD Socket SP5/SP6 Platform ASPT Rev1 Specification,\n 12 September 2022\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_aspt {
    pub Header: ACPI_TABLE_HEADER,
    pub NumEntries: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_aspt"][::core::mem::size_of::<acpi_table_aspt>() - 40usize];
    ["Alignment of acpi_table_aspt"][::core::mem::align_of::<acpi_table_aspt>() - 1usize];
    ["Offset of field: acpi_table_aspt::Header"]
        [::core::mem::offset_of!(acpi_table_aspt, Header) - 0usize];
    ["Offset of field: acpi_table_aspt::NumEntries"]
        [::core::mem::offset_of!(acpi_table_aspt, NumEntries) - 36usize];
};
#[doc = " ASPT - AMD Secure Processor Table (Signature \"ASPT\")\n        Revision 0x1\n\n Conforms to AMD Socket SP5/SP6 Platform ASPT Rev1 Specification,\n 12 September 2022\n"]
pub type ACPI_TABLE_ASPT = acpi_table_aspt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aspt_header {
    pub Type: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aspt_header"][::core::mem::size_of::<acpi_aspt_header>() - 4usize];
    ["Alignment of acpi_aspt_header"][::core::mem::align_of::<acpi_aspt_header>() - 1usize];
    ["Offset of field: acpi_aspt_header::Type"]
        [::core::mem::offset_of!(acpi_aspt_header, Type) - 0usize];
    ["Offset of field: acpi_aspt_header::Length"]
        [::core::mem::offset_of!(acpi_aspt_header, Length) - 2usize];
};
pub type ACPI_ASPT_HEADER = acpi_aspt_header;
pub const AcpiAsptType_ACPI_ASPT_TYPE_GLOBAL_REGS: AcpiAsptType = 0;
pub const AcpiAsptType_ACPI_ASPT_TYPE_SEV_MBOX_REGS: AcpiAsptType = 1;
pub const AcpiAsptType_ACPI_ASPT_TYPE_ACPI_MBOX_REGS: AcpiAsptType = 2;
pub const AcpiAsptType_ACPI_ASPT_TYPE_UNKNOWN: AcpiAsptType = 3;
pub type AcpiAsptType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aspt_global_regs {
    pub Header: ACPI_ASPT_HEADER,
    pub Reserved: UINT32,
    pub FeatureRegAddr: UINT64,
    pub IrqEnRegAddr: UINT64,
    pub IrqStRegAddr: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aspt_global_regs"][::core::mem::size_of::<acpi_aspt_global_regs>() - 32usize];
    ["Alignment of acpi_aspt_global_regs"]
        [::core::mem::align_of::<acpi_aspt_global_regs>() - 1usize];
    ["Offset of field: acpi_aspt_global_regs::Header"]
        [::core::mem::offset_of!(acpi_aspt_global_regs, Header) - 0usize];
    ["Offset of field: acpi_aspt_global_regs::Reserved"]
        [::core::mem::offset_of!(acpi_aspt_global_regs, Reserved) - 4usize];
    ["Offset of field: acpi_aspt_global_regs::FeatureRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_global_regs, FeatureRegAddr) - 8usize];
    ["Offset of field: acpi_aspt_global_regs::IrqEnRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_global_regs, IrqEnRegAddr) - 16usize];
    ["Offset of field: acpi_aspt_global_regs::IrqStRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_global_regs, IrqStRegAddr) - 24usize];
};
pub type ACPI_ASPT_GLOBAL_REGS = acpi_aspt_global_regs;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aspt_sev_mbox_regs {
    pub Header: ACPI_ASPT_HEADER,
    pub MboxIrqId: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub CmdRespRegAddr: UINT64,
    pub CmdBufLoRegAddr: UINT64,
    pub CmdBufHiRegAddr: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aspt_sev_mbox_regs"]
        [::core::mem::size_of::<acpi_aspt_sev_mbox_regs>() - 32usize];
    ["Alignment of acpi_aspt_sev_mbox_regs"]
        [::core::mem::align_of::<acpi_aspt_sev_mbox_regs>() - 1usize];
    ["Offset of field: acpi_aspt_sev_mbox_regs::Header"]
        [::core::mem::offset_of!(acpi_aspt_sev_mbox_regs, Header) - 0usize];
    ["Offset of field: acpi_aspt_sev_mbox_regs::MboxIrqId"]
        [::core::mem::offset_of!(acpi_aspt_sev_mbox_regs, MboxIrqId) - 4usize];
    ["Offset of field: acpi_aspt_sev_mbox_regs::Reserved"]
        [::core::mem::offset_of!(acpi_aspt_sev_mbox_regs, Reserved) - 5usize];
    ["Offset of field: acpi_aspt_sev_mbox_regs::CmdRespRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_sev_mbox_regs, CmdRespRegAddr) - 8usize];
    ["Offset of field: acpi_aspt_sev_mbox_regs::CmdBufLoRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_sev_mbox_regs, CmdBufLoRegAddr) - 16usize];
    ["Offset of field: acpi_aspt_sev_mbox_regs::CmdBufHiRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_sev_mbox_regs, CmdBufHiRegAddr) - 24usize];
};
pub type ACPI_ASPT_SEV_MBOX_REGS = acpi_aspt_sev_mbox_regs;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aspt_acpi_mbox_regs {
    pub Header: ACPI_ASPT_HEADER,
    pub Reserved1: UINT32,
    pub CmdRespRegAddr: UINT64,
    pub Reserved2: [UINT64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aspt_acpi_mbox_regs"]
        [::core::mem::size_of::<acpi_aspt_acpi_mbox_regs>() - 32usize];
    ["Alignment of acpi_aspt_acpi_mbox_regs"]
        [::core::mem::align_of::<acpi_aspt_acpi_mbox_regs>() - 1usize];
    ["Offset of field: acpi_aspt_acpi_mbox_regs::Header"]
        [::core::mem::offset_of!(acpi_aspt_acpi_mbox_regs, Header) - 0usize];
    ["Offset of field: acpi_aspt_acpi_mbox_regs::Reserved1"]
        [::core::mem::offset_of!(acpi_aspt_acpi_mbox_regs, Reserved1) - 4usize];
    ["Offset of field: acpi_aspt_acpi_mbox_regs::CmdRespRegAddr"]
        [::core::mem::offset_of!(acpi_aspt_acpi_mbox_regs, CmdRespRegAddr) - 8usize];
    ["Offset of field: acpi_aspt_acpi_mbox_regs::Reserved2"]
        [::core::mem::offset_of!(acpi_aspt_acpi_mbox_regs, Reserved2) - 16usize];
};
pub type ACPI_ASPT_ACPI_MBOX_REGS = acpi_aspt_acpi_mbox_regs;
#[doc = " BERT - Boot Error Record Table (ACPI 4.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_bert {
    pub Header: ACPI_TABLE_HEADER,
    pub RegionLength: UINT32,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_bert"][::core::mem::size_of::<acpi_table_bert>() - 48usize];
    ["Alignment of acpi_table_bert"][::core::mem::align_of::<acpi_table_bert>() - 1usize];
    ["Offset of field: acpi_table_bert::Header"]
        [::core::mem::offset_of!(acpi_table_bert, Header) - 0usize];
    ["Offset of field: acpi_table_bert::RegionLength"]
        [::core::mem::offset_of!(acpi_table_bert, RegionLength) - 36usize];
    ["Offset of field: acpi_table_bert::Address"]
        [::core::mem::offset_of!(acpi_table_bert, Address) - 40usize];
};
#[doc = " BERT - Boot Error Record Table (ACPI 4.0)\n        Version 1\n"]
pub type ACPI_TABLE_BERT = acpi_table_bert;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_bert_region {
    pub BlockStatus: UINT32,
    pub RawDataOffset: UINT32,
    pub RawDataLength: UINT32,
    pub DataLength: UINT32,
    pub ErrorSeverity: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_bert_region"][::core::mem::size_of::<acpi_bert_region>() - 20usize];
    ["Alignment of acpi_bert_region"][::core::mem::align_of::<acpi_bert_region>() - 1usize];
    ["Offset of field: acpi_bert_region::BlockStatus"]
        [::core::mem::offset_of!(acpi_bert_region, BlockStatus) - 0usize];
    ["Offset of field: acpi_bert_region::RawDataOffset"]
        [::core::mem::offset_of!(acpi_bert_region, RawDataOffset) - 4usize];
    ["Offset of field: acpi_bert_region::RawDataLength"]
        [::core::mem::offset_of!(acpi_bert_region, RawDataLength) - 8usize];
    ["Offset of field: acpi_bert_region::DataLength"]
        [::core::mem::offset_of!(acpi_bert_region, DataLength) - 12usize];
    ["Offset of field: acpi_bert_region::ErrorSeverity"]
        [::core::mem::offset_of!(acpi_bert_region, ErrorSeverity) - 16usize];
};
pub type ACPI_BERT_REGION = acpi_bert_region;
pub const AcpiBertErrorSeverity_ACPI_BERT_ERROR_CORRECTABLE: AcpiBertErrorSeverity = 0;
pub const AcpiBertErrorSeverity_ACPI_BERT_ERROR_FATAL: AcpiBertErrorSeverity = 1;
pub const AcpiBertErrorSeverity_ACPI_BERT_ERROR_CORRECTED: AcpiBertErrorSeverity = 2;
pub const AcpiBertErrorSeverity_ACPI_BERT_ERROR_NONE: AcpiBertErrorSeverity = 3;
pub const AcpiBertErrorSeverity_ACPI_BERT_ERROR_RESERVED: AcpiBertErrorSeverity = 4;
pub type AcpiBertErrorSeverity = ::core::ffi::c_uint;
#[doc = " BGRT - Boot Graphics Resource Table (ACPI 5.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_bgrt {
    pub Header: ACPI_TABLE_HEADER,
    pub Version: UINT16,
    pub Status: UINT8,
    pub ImageType: UINT8,
    pub ImageAddress: UINT64,
    pub ImageOffsetX: UINT32,
    pub ImageOffsetY: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_bgrt"][::core::mem::size_of::<acpi_table_bgrt>() - 56usize];
    ["Alignment of acpi_table_bgrt"][::core::mem::align_of::<acpi_table_bgrt>() - 1usize];
    ["Offset of field: acpi_table_bgrt::Header"]
        [::core::mem::offset_of!(acpi_table_bgrt, Header) - 0usize];
    ["Offset of field: acpi_table_bgrt::Version"]
        [::core::mem::offset_of!(acpi_table_bgrt, Version) - 36usize];
    ["Offset of field: acpi_table_bgrt::Status"]
        [::core::mem::offset_of!(acpi_table_bgrt, Status) - 38usize];
    ["Offset of field: acpi_table_bgrt::ImageType"]
        [::core::mem::offset_of!(acpi_table_bgrt, ImageType) - 39usize];
    ["Offset of field: acpi_table_bgrt::ImageAddress"]
        [::core::mem::offset_of!(acpi_table_bgrt, ImageAddress) - 40usize];
    ["Offset of field: acpi_table_bgrt::ImageOffsetX"]
        [::core::mem::offset_of!(acpi_table_bgrt, ImageOffsetX) - 48usize];
    ["Offset of field: acpi_table_bgrt::ImageOffsetY"]
        [::core::mem::offset_of!(acpi_table_bgrt, ImageOffsetY) - 52usize];
};
#[doc = " BGRT - Boot Graphics Resource Table (ACPI 5.0)\n        Version 1\n"]
pub type ACPI_TABLE_BGRT = acpi_table_bgrt;
#[doc = " BOOT - Simple Boot Flag Table\n        Version 1\n\n Conforms to the \"Simple Boot Flag Specification\", Version 2.1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_boot {
    pub Header: ACPI_TABLE_HEADER,
    pub CmosIndex: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_boot"][::core::mem::size_of::<acpi_table_boot>() - 40usize];
    ["Alignment of acpi_table_boot"][::core::mem::align_of::<acpi_table_boot>() - 1usize];
    ["Offset of field: acpi_table_boot::Header"]
        [::core::mem::offset_of!(acpi_table_boot, Header) - 0usize];
    ["Offset of field: acpi_table_boot::CmosIndex"]
        [::core::mem::offset_of!(acpi_table_boot, CmosIndex) - 36usize];
    ["Offset of field: acpi_table_boot::Reserved"]
        [::core::mem::offset_of!(acpi_table_boot, Reserved) - 37usize];
};
#[doc = " BOOT - Simple Boot Flag Table\n        Version 1\n\n Conforms to the \"Simple Boot Flag Specification\", Version 2.1\n"]
pub type ACPI_TABLE_BOOT = acpi_table_boot;
#[doc = " CDAT - Coherent Device Attribute Table\n        Version 1\n\n Conforms to the \"Coherent Device Attribute Table (CDAT) Specification\n\" (Revision 1.01, October 2020.)\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_cdat {
    pub Length: UINT32,
    pub Revision: UINT8,
    pub Checksum: UINT8,
    pub Reserved: [UINT8; 6usize],
    pub Sequence: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_cdat"][::core::mem::size_of::<acpi_table_cdat>() - 16usize];
    ["Alignment of acpi_table_cdat"][::core::mem::align_of::<acpi_table_cdat>() - 1usize];
    ["Offset of field: acpi_table_cdat::Length"]
        [::core::mem::offset_of!(acpi_table_cdat, Length) - 0usize];
    ["Offset of field: acpi_table_cdat::Revision"]
        [::core::mem::offset_of!(acpi_table_cdat, Revision) - 4usize];
    ["Offset of field: acpi_table_cdat::Checksum"]
        [::core::mem::offset_of!(acpi_table_cdat, Checksum) - 5usize];
    ["Offset of field: acpi_table_cdat::Reserved"]
        [::core::mem::offset_of!(acpi_table_cdat, Reserved) - 6usize];
    ["Offset of field: acpi_table_cdat::Sequence"]
        [::core::mem::offset_of!(acpi_table_cdat, Sequence) - 12usize];
};
#[doc = " CDAT - Coherent Device Attribute Table\n        Version 1\n\n Conforms to the \"Coherent Device Attribute Table (CDAT) Specification\n\" (Revision 1.01, October 2020.)\n"]
pub type ACPI_TABLE_CDAT = acpi_table_cdat;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_header {
    pub Type: UINT8,
    pub Reserved: UINT8,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_header"][::core::mem::size_of::<acpi_cdat_header>() - 4usize];
    ["Alignment of acpi_cdat_header"][::core::mem::align_of::<acpi_cdat_header>() - 1usize];
    ["Offset of field: acpi_cdat_header::Type"]
        [::core::mem::offset_of!(acpi_cdat_header, Type) - 0usize];
    ["Offset of field: acpi_cdat_header::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_header, Reserved) - 1usize];
    ["Offset of field: acpi_cdat_header::Length"]
        [::core::mem::offset_of!(acpi_cdat_header, Length) - 2usize];
};
pub type ACPI_CDAT_HEADER = acpi_cdat_header;
pub const AcpiCdatType_ACPI_CDAT_TYPE_DSMAS: AcpiCdatType = 0;
pub const AcpiCdatType_ACPI_CDAT_TYPE_DSLBIS: AcpiCdatType = 1;
pub const AcpiCdatType_ACPI_CDAT_TYPE_DSMSCIS: AcpiCdatType = 2;
pub const AcpiCdatType_ACPI_CDAT_TYPE_DSIS: AcpiCdatType = 3;
pub const AcpiCdatType_ACPI_CDAT_TYPE_DSEMTS: AcpiCdatType = 4;
pub const AcpiCdatType_ACPI_CDAT_TYPE_SSLBIS: AcpiCdatType = 5;
pub const AcpiCdatType_ACPI_CDAT_TYPE_RESERVED: AcpiCdatType = 6;
pub type AcpiCdatType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_dsmas {
    pub DsmadHandle: UINT8,
    pub Flags: UINT8,
    pub Reserved: UINT16,
    pub DpaBaseAddress: UINT64,
    pub DpaLength: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_dsmas"][::core::mem::size_of::<acpi_cdat_dsmas>() - 20usize];
    ["Alignment of acpi_cdat_dsmas"][::core::mem::align_of::<acpi_cdat_dsmas>() - 1usize];
    ["Offset of field: acpi_cdat_dsmas::DsmadHandle"]
        [::core::mem::offset_of!(acpi_cdat_dsmas, DsmadHandle) - 0usize];
    ["Offset of field: acpi_cdat_dsmas::Flags"]
        [::core::mem::offset_of!(acpi_cdat_dsmas, Flags) - 1usize];
    ["Offset of field: acpi_cdat_dsmas::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_dsmas, Reserved) - 2usize];
    ["Offset of field: acpi_cdat_dsmas::DpaBaseAddress"]
        [::core::mem::offset_of!(acpi_cdat_dsmas, DpaBaseAddress) - 4usize];
    ["Offset of field: acpi_cdat_dsmas::DpaLength"]
        [::core::mem::offset_of!(acpi_cdat_dsmas, DpaLength) - 12usize];
};
pub type ACPI_CDAT_DSMAS = acpi_cdat_dsmas;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_dslbis {
    pub Handle: UINT8,
    pub Flags: UINT8,
    pub DataType: UINT8,
    pub Reserved: UINT8,
    pub EntryBaseUnit: UINT64,
    pub Entry: [UINT16; 3usize],
    pub Reserved2: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_dslbis"][::core::mem::size_of::<acpi_cdat_dslbis>() - 20usize];
    ["Alignment of acpi_cdat_dslbis"][::core::mem::align_of::<acpi_cdat_dslbis>() - 1usize];
    ["Offset of field: acpi_cdat_dslbis::Handle"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, Handle) - 0usize];
    ["Offset of field: acpi_cdat_dslbis::Flags"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, Flags) - 1usize];
    ["Offset of field: acpi_cdat_dslbis::DataType"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, DataType) - 2usize];
    ["Offset of field: acpi_cdat_dslbis::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, Reserved) - 3usize];
    ["Offset of field: acpi_cdat_dslbis::EntryBaseUnit"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, EntryBaseUnit) - 4usize];
    ["Offset of field: acpi_cdat_dslbis::Entry"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, Entry) - 12usize];
    ["Offset of field: acpi_cdat_dslbis::Reserved2"]
        [::core::mem::offset_of!(acpi_cdat_dslbis, Reserved2) - 18usize];
};
pub type ACPI_CDAT_DSLBIS = acpi_cdat_dslbis;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_dsmscis {
    pub DsmasHandle: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub SideCacheSize: UINT64,
    pub CacheAttributes: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_dsmscis"][::core::mem::size_of::<acpi_cdat_dsmscis>() - 16usize];
    ["Alignment of acpi_cdat_dsmscis"][::core::mem::align_of::<acpi_cdat_dsmscis>() - 1usize];
    ["Offset of field: acpi_cdat_dsmscis::DsmasHandle"]
        [::core::mem::offset_of!(acpi_cdat_dsmscis, DsmasHandle) - 0usize];
    ["Offset of field: acpi_cdat_dsmscis::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_dsmscis, Reserved) - 1usize];
    ["Offset of field: acpi_cdat_dsmscis::SideCacheSize"]
        [::core::mem::offset_of!(acpi_cdat_dsmscis, SideCacheSize) - 4usize];
    ["Offset of field: acpi_cdat_dsmscis::CacheAttributes"]
        [::core::mem::offset_of!(acpi_cdat_dsmscis, CacheAttributes) - 12usize];
};
pub type ACPI_CDAT_DSMSCIS = acpi_cdat_dsmscis;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_dsis {
    pub Flags: UINT8,
    pub Handle: UINT8,
    pub Reserved: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_dsis"][::core::mem::size_of::<acpi_cdat_dsis>() - 4usize];
    ["Alignment of acpi_cdat_dsis"][::core::mem::align_of::<acpi_cdat_dsis>() - 1usize];
    ["Offset of field: acpi_cdat_dsis::Flags"]
        [::core::mem::offset_of!(acpi_cdat_dsis, Flags) - 0usize];
    ["Offset of field: acpi_cdat_dsis::Handle"]
        [::core::mem::offset_of!(acpi_cdat_dsis, Handle) - 1usize];
    ["Offset of field: acpi_cdat_dsis::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_dsis, Reserved) - 2usize];
};
pub type ACPI_CDAT_DSIS = acpi_cdat_dsis;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_dsemts {
    pub DsmasHandle: UINT8,
    pub MemoryType: UINT8,
    pub Reserved: UINT16,
    pub DpaOffset: UINT64,
    pub RangeLength: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_dsemts"][::core::mem::size_of::<acpi_cdat_dsemts>() - 20usize];
    ["Alignment of acpi_cdat_dsemts"][::core::mem::align_of::<acpi_cdat_dsemts>() - 1usize];
    ["Offset of field: acpi_cdat_dsemts::DsmasHandle"]
        [::core::mem::offset_of!(acpi_cdat_dsemts, DsmasHandle) - 0usize];
    ["Offset of field: acpi_cdat_dsemts::MemoryType"]
        [::core::mem::offset_of!(acpi_cdat_dsemts, MemoryType) - 1usize];
    ["Offset of field: acpi_cdat_dsemts::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_dsemts, Reserved) - 2usize];
    ["Offset of field: acpi_cdat_dsemts::DpaOffset"]
        [::core::mem::offset_of!(acpi_cdat_dsemts, DpaOffset) - 4usize];
    ["Offset of field: acpi_cdat_dsemts::RangeLength"]
        [::core::mem::offset_of!(acpi_cdat_dsemts, RangeLength) - 12usize];
};
pub type ACPI_CDAT_DSEMTS = acpi_cdat_dsemts;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_sslbis {
    pub DataType: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub EntryBaseUnit: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_sslbis"][::core::mem::size_of::<acpi_cdat_sslbis>() - 12usize];
    ["Alignment of acpi_cdat_sslbis"][::core::mem::align_of::<acpi_cdat_sslbis>() - 1usize];
    ["Offset of field: acpi_cdat_sslbis::DataType"]
        [::core::mem::offset_of!(acpi_cdat_sslbis, DataType) - 0usize];
    ["Offset of field: acpi_cdat_sslbis::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_sslbis, Reserved) - 1usize];
    ["Offset of field: acpi_cdat_sslbis::EntryBaseUnit"]
        [::core::mem::offset_of!(acpi_cdat_sslbis, EntryBaseUnit) - 4usize];
};
pub type ACPI_CDAT_SSLBIS = acpi_cdat_sslbis;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cdat_sslbe {
    pub PortxId: UINT16,
    pub PortyId: UINT16,
    pub LatencyOrBandwidth: UINT16,
    pub Reserved: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cdat_sslbe"][::core::mem::size_of::<acpi_cdat_sslbe>() - 8usize];
    ["Alignment of acpi_cdat_sslbe"][::core::mem::align_of::<acpi_cdat_sslbe>() - 1usize];
    ["Offset of field: acpi_cdat_sslbe::PortxId"]
        [::core::mem::offset_of!(acpi_cdat_sslbe, PortxId) - 0usize];
    ["Offset of field: acpi_cdat_sslbe::PortyId"]
        [::core::mem::offset_of!(acpi_cdat_sslbe, PortyId) - 2usize];
    ["Offset of field: acpi_cdat_sslbe::LatencyOrBandwidth"]
        [::core::mem::offset_of!(acpi_cdat_sslbe, LatencyOrBandwidth) - 4usize];
    ["Offset of field: acpi_cdat_sslbe::Reserved"]
        [::core::mem::offset_of!(acpi_cdat_sslbe, Reserved) - 6usize];
};
pub type ACPI_CDAT_SSLBE = acpi_cdat_sslbe;
#[doc = " CEDT - CXL Early Discovery Table\n        Version 1\n\n Conforms to the \"CXL Early Discovery Table\" (CXL 2.0, October 2020)\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_cedt {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_cedt"][::core::mem::size_of::<acpi_table_cedt>() - 36usize];
    ["Alignment of acpi_table_cedt"][::core::mem::align_of::<acpi_table_cedt>() - 1usize];
    ["Offset of field: acpi_table_cedt::Header"]
        [::core::mem::offset_of!(acpi_table_cedt, Header) - 0usize];
};
#[doc = " CEDT - CXL Early Discovery Table\n        Version 1\n\n Conforms to the \"CXL Early Discovery Table\" (CXL 2.0, October 2020)\n"]
pub type ACPI_TABLE_CEDT = acpi_table_cedt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cedt_header {
    pub Type: UINT8,
    pub Reserved: UINT8,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_header"][::core::mem::size_of::<acpi_cedt_header>() - 4usize];
    ["Alignment of acpi_cedt_header"][::core::mem::align_of::<acpi_cedt_header>() - 1usize];
    ["Offset of field: acpi_cedt_header::Type"]
        [::core::mem::offset_of!(acpi_cedt_header, Type) - 0usize];
    ["Offset of field: acpi_cedt_header::Reserved"]
        [::core::mem::offset_of!(acpi_cedt_header, Reserved) - 1usize];
    ["Offset of field: acpi_cedt_header::Length"]
        [::core::mem::offset_of!(acpi_cedt_header, Length) - 2usize];
};
pub type ACPI_CEDT_HEADER = acpi_cedt_header;
pub const AcpiCedtType_ACPI_CEDT_TYPE_CHBS: AcpiCedtType = 0;
pub const AcpiCedtType_ACPI_CEDT_TYPE_CFMWS: AcpiCedtType = 1;
pub const AcpiCedtType_ACPI_CEDT_TYPE_CXIMS: AcpiCedtType = 2;
pub const AcpiCedtType_ACPI_CEDT_TYPE_RDPAS: AcpiCedtType = 3;
pub const AcpiCedtType_ACPI_CEDT_TYPE_RESERVED: AcpiCedtType = 4;
pub type AcpiCedtType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cedt_chbs {
    pub Header: ACPI_CEDT_HEADER,
    pub Uid: UINT32,
    pub CxlVersion: UINT32,
    pub Reserved: UINT32,
    pub Base: UINT64,
    pub Length: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_chbs"][::core::mem::size_of::<acpi_cedt_chbs>() - 32usize];
    ["Alignment of acpi_cedt_chbs"][::core::mem::align_of::<acpi_cedt_chbs>() - 1usize];
    ["Offset of field: acpi_cedt_chbs::Header"]
        [::core::mem::offset_of!(acpi_cedt_chbs, Header) - 0usize];
    ["Offset of field: acpi_cedt_chbs::Uid"][::core::mem::offset_of!(acpi_cedt_chbs, Uid) - 4usize];
    ["Offset of field: acpi_cedt_chbs::CxlVersion"]
        [::core::mem::offset_of!(acpi_cedt_chbs, CxlVersion) - 8usize];
    ["Offset of field: acpi_cedt_chbs::Reserved"]
        [::core::mem::offset_of!(acpi_cedt_chbs, Reserved) - 12usize];
    ["Offset of field: acpi_cedt_chbs::Base"]
        [::core::mem::offset_of!(acpi_cedt_chbs, Base) - 16usize];
    ["Offset of field: acpi_cedt_chbs::Length"]
        [::core::mem::offset_of!(acpi_cedt_chbs, Length) - 24usize];
};
pub type ACPI_CEDT_CHBS = acpi_cedt_chbs;
#[repr(C, packed)]
pub struct acpi_cedt_cfmws {
    pub Header: ACPI_CEDT_HEADER,
    pub Reserved1: UINT32,
    pub BaseHpa: UINT64,
    pub WindowSize: UINT64,
    pub InterleaveWays: UINT8,
    pub InterleaveArithmetic: UINT8,
    pub Reserved2: UINT16,
    pub Granularity: UINT32,
    pub Restrictions: UINT16,
    pub QtgId: UINT16,
    pub InterleaveTargets: __IncompleteArrayField<UINT32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_cfmws"][::core::mem::size_of::<acpi_cedt_cfmws>() - 36usize];
    ["Alignment of acpi_cedt_cfmws"][::core::mem::align_of::<acpi_cedt_cfmws>() - 1usize];
    ["Offset of field: acpi_cedt_cfmws::Header"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, Header) - 0usize];
    ["Offset of field: acpi_cedt_cfmws::Reserved1"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, Reserved1) - 4usize];
    ["Offset of field: acpi_cedt_cfmws::BaseHpa"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, BaseHpa) - 8usize];
    ["Offset of field: acpi_cedt_cfmws::WindowSize"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, WindowSize) - 16usize];
    ["Offset of field: acpi_cedt_cfmws::InterleaveWays"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, InterleaveWays) - 24usize];
    ["Offset of field: acpi_cedt_cfmws::InterleaveArithmetic"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, InterleaveArithmetic) - 25usize];
    ["Offset of field: acpi_cedt_cfmws::Reserved2"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, Reserved2) - 26usize];
    ["Offset of field: acpi_cedt_cfmws::Granularity"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, Granularity) - 28usize];
    ["Offset of field: acpi_cedt_cfmws::Restrictions"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, Restrictions) - 32usize];
    ["Offset of field: acpi_cedt_cfmws::QtgId"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, QtgId) - 34usize];
    ["Offset of field: acpi_cedt_cfmws::InterleaveTargets"]
        [::core::mem::offset_of!(acpi_cedt_cfmws, InterleaveTargets) - 36usize];
};
pub type ACPI_CEDT_CFMWS = acpi_cedt_cfmws;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cedt_cfmws_target_element {
    pub InterleaveTarget: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_cfmws_target_element"]
        [::core::mem::size_of::<acpi_cedt_cfmws_target_element>() - 4usize];
    ["Alignment of acpi_cedt_cfmws_target_element"]
        [::core::mem::align_of::<acpi_cedt_cfmws_target_element>() - 1usize];
    ["Offset of field: acpi_cedt_cfmws_target_element::InterleaveTarget"]
        [::core::mem::offset_of!(acpi_cedt_cfmws_target_element, InterleaveTarget) - 0usize];
};
pub type ACPI_CEDT_CFMWS_TARGET_ELEMENT = acpi_cedt_cfmws_target_element;
#[repr(C, packed)]
pub struct acpi_cedt_cxims {
    pub Header: ACPI_CEDT_HEADER,
    pub Reserved1: UINT16,
    pub Hbig: UINT8,
    pub NrXormaps: UINT8,
    pub XormapList: __IncompleteArrayField<UINT64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_cxims"][::core::mem::size_of::<acpi_cedt_cxims>() - 8usize];
    ["Alignment of acpi_cedt_cxims"][::core::mem::align_of::<acpi_cedt_cxims>() - 1usize];
    ["Offset of field: acpi_cedt_cxims::Header"]
        [::core::mem::offset_of!(acpi_cedt_cxims, Header) - 0usize];
    ["Offset of field: acpi_cedt_cxims::Reserved1"]
        [::core::mem::offset_of!(acpi_cedt_cxims, Reserved1) - 4usize];
    ["Offset of field: acpi_cedt_cxims::Hbig"]
        [::core::mem::offset_of!(acpi_cedt_cxims, Hbig) - 6usize];
    ["Offset of field: acpi_cedt_cxims::NrXormaps"]
        [::core::mem::offset_of!(acpi_cedt_cxims, NrXormaps) - 7usize];
    ["Offset of field: acpi_cedt_cxims::XormapList"]
        [::core::mem::offset_of!(acpi_cedt_cxims, XormapList) - 8usize];
};
pub type ACPI_CEDT_CXIMS = acpi_cedt_cxims;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cedt_cxims_target_element {
    pub Xormap: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_cxims_target_element"]
        [::core::mem::size_of::<acpi_cedt_cxims_target_element>() - 8usize];
    ["Alignment of acpi_cedt_cxims_target_element"]
        [::core::mem::align_of::<acpi_cedt_cxims_target_element>() - 1usize];
    ["Offset of field: acpi_cedt_cxims_target_element::Xormap"]
        [::core::mem::offset_of!(acpi_cedt_cxims_target_element, Xormap) - 0usize];
};
pub type ACPI_CEDT_CXIMS_TARGET_ELEMENT = acpi_cedt_cxims_target_element;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cedt_rdpas {
    pub Header: ACPI_CEDT_HEADER,
    pub Segment: UINT16,
    pub Bdf: UINT16,
    pub Protocol: UINT8,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cedt_rdpas"][::core::mem::size_of::<acpi_cedt_rdpas>() - 17usize];
    ["Alignment of acpi_cedt_rdpas"][::core::mem::align_of::<acpi_cedt_rdpas>() - 1usize];
    ["Offset of field: acpi_cedt_rdpas::Header"]
        [::core::mem::offset_of!(acpi_cedt_rdpas, Header) - 0usize];
    ["Offset of field: acpi_cedt_rdpas::Segment"]
        [::core::mem::offset_of!(acpi_cedt_rdpas, Segment) - 4usize];
    ["Offset of field: acpi_cedt_rdpas::Bdf"]
        [::core::mem::offset_of!(acpi_cedt_rdpas, Bdf) - 6usize];
    ["Offset of field: acpi_cedt_rdpas::Protocol"]
        [::core::mem::offset_of!(acpi_cedt_rdpas, Protocol) - 8usize];
    ["Offset of field: acpi_cedt_rdpas::Address"]
        [::core::mem::offset_of!(acpi_cedt_rdpas, Address) - 9usize];
};
#[doc = " CPEP - Corrected Platform Error Polling table (ACPI 4.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_cpep {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_cpep"][::core::mem::size_of::<acpi_table_cpep>() - 44usize];
    ["Alignment of acpi_table_cpep"][::core::mem::align_of::<acpi_table_cpep>() - 1usize];
    ["Offset of field: acpi_table_cpep::Header"]
        [::core::mem::offset_of!(acpi_table_cpep, Header) - 0usize];
    ["Offset of field: acpi_table_cpep::Reserved"]
        [::core::mem::offset_of!(acpi_table_cpep, Reserved) - 36usize];
};
#[doc = " CPEP - Corrected Platform Error Polling table (ACPI 4.0)\n        Version 1\n"]
pub type ACPI_TABLE_CPEP = acpi_table_cpep;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cpep_polling {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Id: UINT8,
    pub Eid: UINT8,
    pub Interval: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_cpep_polling"][::core::mem::size_of::<acpi_cpep_polling>() - 8usize];
    ["Alignment of acpi_cpep_polling"][::core::mem::align_of::<acpi_cpep_polling>() - 1usize];
    ["Offset of field: acpi_cpep_polling::Header"]
        [::core::mem::offset_of!(acpi_cpep_polling, Header) - 0usize];
    ["Offset of field: acpi_cpep_polling::Id"]
        [::core::mem::offset_of!(acpi_cpep_polling, Id) - 2usize];
    ["Offset of field: acpi_cpep_polling::Eid"]
        [::core::mem::offset_of!(acpi_cpep_polling, Eid) - 3usize];
    ["Offset of field: acpi_cpep_polling::Interval"]
        [::core::mem::offset_of!(acpi_cpep_polling, Interval) - 4usize];
};
pub type ACPI_CPEP_POLLING = acpi_cpep_polling;
#[doc = " CSRT - Core System Resource Table\n        Version 0\n\n Conforms to the \"Core System Resource Table (CSRT)\", November 14, 2011\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_csrt {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_csrt"][::core::mem::size_of::<acpi_table_csrt>() - 36usize];
    ["Alignment of acpi_table_csrt"][::core::mem::align_of::<acpi_table_csrt>() - 1usize];
    ["Offset of field: acpi_table_csrt::Header"]
        [::core::mem::offset_of!(acpi_table_csrt, Header) - 0usize];
};
#[doc = " CSRT - Core System Resource Table\n        Version 0\n\n Conforms to the \"Core System Resource Table (CSRT)\", November 14, 2011\n"]
pub type ACPI_TABLE_CSRT = acpi_table_csrt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_csrt_group {
    pub Length: UINT32,
    pub VendorId: UINT32,
    pub SubvendorId: UINT32,
    pub DeviceId: UINT16,
    pub SubdeviceId: UINT16,
    pub Revision: UINT16,
    pub Reserved: UINT16,
    pub SharedInfoLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_csrt_group"][::core::mem::size_of::<acpi_csrt_group>() - 24usize];
    ["Alignment of acpi_csrt_group"][::core::mem::align_of::<acpi_csrt_group>() - 1usize];
    ["Offset of field: acpi_csrt_group::Length"]
        [::core::mem::offset_of!(acpi_csrt_group, Length) - 0usize];
    ["Offset of field: acpi_csrt_group::VendorId"]
        [::core::mem::offset_of!(acpi_csrt_group, VendorId) - 4usize];
    ["Offset of field: acpi_csrt_group::SubvendorId"]
        [::core::mem::offset_of!(acpi_csrt_group, SubvendorId) - 8usize];
    ["Offset of field: acpi_csrt_group::DeviceId"]
        [::core::mem::offset_of!(acpi_csrt_group, DeviceId) - 12usize];
    ["Offset of field: acpi_csrt_group::SubdeviceId"]
        [::core::mem::offset_of!(acpi_csrt_group, SubdeviceId) - 14usize];
    ["Offset of field: acpi_csrt_group::Revision"]
        [::core::mem::offset_of!(acpi_csrt_group, Revision) - 16usize];
    ["Offset of field: acpi_csrt_group::Reserved"]
        [::core::mem::offset_of!(acpi_csrt_group, Reserved) - 18usize];
    ["Offset of field: acpi_csrt_group::SharedInfoLength"]
        [::core::mem::offset_of!(acpi_csrt_group, SharedInfoLength) - 20usize];
};
pub type ACPI_CSRT_GROUP = acpi_csrt_group;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_csrt_shared_info {
    pub MajorVersion: UINT16,
    pub MinorVersion: UINT16,
    pub MmioBaseLow: UINT32,
    pub MmioBaseHigh: UINT32,
    pub GsiInterrupt: UINT32,
    pub InterruptPolarity: UINT8,
    pub InterruptMode: UINT8,
    pub NumChannels: UINT8,
    pub DmaAddressWidth: UINT8,
    pub BaseRequestLine: UINT16,
    pub NumHandshakeSignals: UINT16,
    pub MaxBlockSize: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_csrt_shared_info"][::core::mem::size_of::<acpi_csrt_shared_info>() - 28usize];
    ["Alignment of acpi_csrt_shared_info"]
        [::core::mem::align_of::<acpi_csrt_shared_info>() - 1usize];
    ["Offset of field: acpi_csrt_shared_info::MajorVersion"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, MajorVersion) - 0usize];
    ["Offset of field: acpi_csrt_shared_info::MinorVersion"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, MinorVersion) - 2usize];
    ["Offset of field: acpi_csrt_shared_info::MmioBaseLow"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, MmioBaseLow) - 4usize];
    ["Offset of field: acpi_csrt_shared_info::MmioBaseHigh"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, MmioBaseHigh) - 8usize];
    ["Offset of field: acpi_csrt_shared_info::GsiInterrupt"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, GsiInterrupt) - 12usize];
    ["Offset of field: acpi_csrt_shared_info::InterruptPolarity"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, InterruptPolarity) - 16usize];
    ["Offset of field: acpi_csrt_shared_info::InterruptMode"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, InterruptMode) - 17usize];
    ["Offset of field: acpi_csrt_shared_info::NumChannels"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, NumChannels) - 18usize];
    ["Offset of field: acpi_csrt_shared_info::DmaAddressWidth"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, DmaAddressWidth) - 19usize];
    ["Offset of field: acpi_csrt_shared_info::BaseRequestLine"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, BaseRequestLine) - 20usize];
    ["Offset of field: acpi_csrt_shared_info::NumHandshakeSignals"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, NumHandshakeSignals) - 22usize];
    ["Offset of field: acpi_csrt_shared_info::MaxBlockSize"]
        [::core::mem::offset_of!(acpi_csrt_shared_info, MaxBlockSize) - 24usize];
};
pub type ACPI_CSRT_SHARED_INFO = acpi_csrt_shared_info;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_csrt_descriptor {
    pub Length: UINT32,
    pub Type: UINT16,
    pub Subtype: UINT16,
    pub Uid: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_csrt_descriptor"][::core::mem::size_of::<acpi_csrt_descriptor>() - 12usize];
    ["Alignment of acpi_csrt_descriptor"][::core::mem::align_of::<acpi_csrt_descriptor>() - 1usize];
    ["Offset of field: acpi_csrt_descriptor::Length"]
        [::core::mem::offset_of!(acpi_csrt_descriptor, Length) - 0usize];
    ["Offset of field: acpi_csrt_descriptor::Type"]
        [::core::mem::offset_of!(acpi_csrt_descriptor, Type) - 4usize];
    ["Offset of field: acpi_csrt_descriptor::Subtype"]
        [::core::mem::offset_of!(acpi_csrt_descriptor, Subtype) - 6usize];
    ["Offset of field: acpi_csrt_descriptor::Uid"]
        [::core::mem::offset_of!(acpi_csrt_descriptor, Uid) - 8usize];
};
pub type ACPI_CSRT_DESCRIPTOR = acpi_csrt_descriptor;
#[doc = " DBG2 - Debug Port Table 2\n        Version 0 (Both main table and subtables)\n\n Conforms to \"Microsoft Debug Port Table 2 (DBG2)\", September 21, 2020\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_dbg2 {
    pub Header: ACPI_TABLE_HEADER,
    pub InfoOffset: UINT32,
    pub InfoCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_dbg2"][::core::mem::size_of::<acpi_table_dbg2>() - 44usize];
    ["Alignment of acpi_table_dbg2"][::core::mem::align_of::<acpi_table_dbg2>() - 1usize];
    ["Offset of field: acpi_table_dbg2::Header"]
        [::core::mem::offset_of!(acpi_table_dbg2, Header) - 0usize];
    ["Offset of field: acpi_table_dbg2::InfoOffset"]
        [::core::mem::offset_of!(acpi_table_dbg2, InfoOffset) - 36usize];
    ["Offset of field: acpi_table_dbg2::InfoCount"]
        [::core::mem::offset_of!(acpi_table_dbg2, InfoCount) - 40usize];
};
#[doc = " DBG2 - Debug Port Table 2\n        Version 0 (Both main table and subtables)\n\n Conforms to \"Microsoft Debug Port Table 2 (DBG2)\", September 21, 2020\n"]
pub type ACPI_TABLE_DBG2 = acpi_table_dbg2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dbg2_header {
    pub InfoOffset: UINT32,
    pub InfoCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dbg2_header"][::core::mem::size_of::<acpi_dbg2_header>() - 8usize];
    ["Alignment of acpi_dbg2_header"][::core::mem::align_of::<acpi_dbg2_header>() - 1usize];
    ["Offset of field: acpi_dbg2_header::InfoOffset"]
        [::core::mem::offset_of!(acpi_dbg2_header, InfoOffset) - 0usize];
    ["Offset of field: acpi_dbg2_header::InfoCount"]
        [::core::mem::offset_of!(acpi_dbg2_header, InfoCount) - 4usize];
};
pub type ACPI_DBG2_HEADER = acpi_dbg2_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dbg2_device {
    pub Revision: UINT8,
    pub Length: UINT16,
    pub RegisterCount: UINT8,
    pub NamepathLength: UINT16,
    pub NamepathOffset: UINT16,
    pub OemDataLength: UINT16,
    pub OemDataOffset: UINT16,
    pub PortType: UINT16,
    pub PortSubtype: UINT16,
    pub Reserved: UINT16,
    pub BaseAddressOffset: UINT16,
    pub AddressSizeOffset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dbg2_device"][::core::mem::size_of::<acpi_dbg2_device>() - 22usize];
    ["Alignment of acpi_dbg2_device"][::core::mem::align_of::<acpi_dbg2_device>() - 1usize];
    ["Offset of field: acpi_dbg2_device::Revision"]
        [::core::mem::offset_of!(acpi_dbg2_device, Revision) - 0usize];
    ["Offset of field: acpi_dbg2_device::Length"]
        [::core::mem::offset_of!(acpi_dbg2_device, Length) - 1usize];
    ["Offset of field: acpi_dbg2_device::RegisterCount"]
        [::core::mem::offset_of!(acpi_dbg2_device, RegisterCount) - 3usize];
    ["Offset of field: acpi_dbg2_device::NamepathLength"]
        [::core::mem::offset_of!(acpi_dbg2_device, NamepathLength) - 4usize];
    ["Offset of field: acpi_dbg2_device::NamepathOffset"]
        [::core::mem::offset_of!(acpi_dbg2_device, NamepathOffset) - 6usize];
    ["Offset of field: acpi_dbg2_device::OemDataLength"]
        [::core::mem::offset_of!(acpi_dbg2_device, OemDataLength) - 8usize];
    ["Offset of field: acpi_dbg2_device::OemDataOffset"]
        [::core::mem::offset_of!(acpi_dbg2_device, OemDataOffset) - 10usize];
    ["Offset of field: acpi_dbg2_device::PortType"]
        [::core::mem::offset_of!(acpi_dbg2_device, PortType) - 12usize];
    ["Offset of field: acpi_dbg2_device::PortSubtype"]
        [::core::mem::offset_of!(acpi_dbg2_device, PortSubtype) - 14usize];
    ["Offset of field: acpi_dbg2_device::Reserved"]
        [::core::mem::offset_of!(acpi_dbg2_device, Reserved) - 16usize];
    ["Offset of field: acpi_dbg2_device::BaseAddressOffset"]
        [::core::mem::offset_of!(acpi_dbg2_device, BaseAddressOffset) - 18usize];
    ["Offset of field: acpi_dbg2_device::AddressSizeOffset"]
        [::core::mem::offset_of!(acpi_dbg2_device, AddressSizeOffset) - 20usize];
};
pub type ACPI_DBG2_DEVICE = acpi_dbg2_device;
#[doc = " DBGP - Debug Port table\n        Version 1\n\n Conforms to the \"Debug Port Specification\", Version 1.00, 2/9/2000\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_dbgp {
    pub Header: ACPI_TABLE_HEADER,
    pub Type: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub DebugPort: ACPI_GENERIC_ADDRESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_dbgp"][::core::mem::size_of::<acpi_table_dbgp>() - 52usize];
    ["Alignment of acpi_table_dbgp"][::core::mem::align_of::<acpi_table_dbgp>() - 1usize];
    ["Offset of field: acpi_table_dbgp::Header"]
        [::core::mem::offset_of!(acpi_table_dbgp, Header) - 0usize];
    ["Offset of field: acpi_table_dbgp::Type"]
        [::core::mem::offset_of!(acpi_table_dbgp, Type) - 36usize];
    ["Offset of field: acpi_table_dbgp::Reserved"]
        [::core::mem::offset_of!(acpi_table_dbgp, Reserved) - 37usize];
    ["Offset of field: acpi_table_dbgp::DebugPort"]
        [::core::mem::offset_of!(acpi_table_dbgp, DebugPort) - 40usize];
};
#[doc = " DBGP - Debug Port table\n        Version 1\n\n Conforms to the \"Debug Port Specification\", Version 1.00, 2/9/2000\n"]
pub type ACPI_TABLE_DBGP = acpi_table_dbgp;
#[doc = " DMAR - DMA Remapping table\n        Version 1\n\n Conforms to \"Intel Virtualization Technology for Directed I/O\",\n Version 2.3, October 2014\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_dmar {
    pub Header: ACPI_TABLE_HEADER,
    pub Width: UINT8,
    pub Flags: UINT8,
    pub Reserved: [UINT8; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_dmar"][::core::mem::size_of::<acpi_table_dmar>() - 48usize];
    ["Alignment of acpi_table_dmar"][::core::mem::align_of::<acpi_table_dmar>() - 1usize];
    ["Offset of field: acpi_table_dmar::Header"]
        [::core::mem::offset_of!(acpi_table_dmar, Header) - 0usize];
    ["Offset of field: acpi_table_dmar::Width"]
        [::core::mem::offset_of!(acpi_table_dmar, Width) - 36usize];
    ["Offset of field: acpi_table_dmar::Flags"]
        [::core::mem::offset_of!(acpi_table_dmar, Flags) - 37usize];
    ["Offset of field: acpi_table_dmar::Reserved"]
        [::core::mem::offset_of!(acpi_table_dmar, Reserved) - 38usize];
};
#[doc = " DMAR - DMA Remapping table\n        Version 1\n\n Conforms to \"Intel Virtualization Technology for Directed I/O\",\n Version 2.3, October 2014\n"]
pub type ACPI_TABLE_DMAR = acpi_table_dmar;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_header {
    pub Type: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_header"][::core::mem::size_of::<acpi_dmar_header>() - 4usize];
    ["Alignment of acpi_dmar_header"][::core::mem::align_of::<acpi_dmar_header>() - 1usize];
    ["Offset of field: acpi_dmar_header::Type"]
        [::core::mem::offset_of!(acpi_dmar_header, Type) - 0usize];
    ["Offset of field: acpi_dmar_header::Length"]
        [::core::mem::offset_of!(acpi_dmar_header, Length) - 2usize];
};
pub type ACPI_DMAR_HEADER = acpi_dmar_header;
pub const AcpiDmarType_ACPI_DMAR_TYPE_HARDWARE_UNIT: AcpiDmarType = 0;
pub const AcpiDmarType_ACPI_DMAR_TYPE_RESERVED_MEMORY: AcpiDmarType = 1;
pub const AcpiDmarType_ACPI_DMAR_TYPE_ROOT_ATS: AcpiDmarType = 2;
pub const AcpiDmarType_ACPI_DMAR_TYPE_HARDWARE_AFFINITY: AcpiDmarType = 3;
pub const AcpiDmarType_ACPI_DMAR_TYPE_NAMESPACE: AcpiDmarType = 4;
pub const AcpiDmarType_ACPI_DMAR_TYPE_SATC: AcpiDmarType = 5;
pub const AcpiDmarType_ACPI_DMAR_TYPE_SIDP: AcpiDmarType = 6;
pub const AcpiDmarType_ACPI_DMAR_TYPE_RESERVED: AcpiDmarType = 7;
pub type AcpiDmarType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_device_scope {
    pub EntryType: UINT8,
    pub Length: UINT8,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub EnumerationId: UINT8,
    pub Bus: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_device_scope"][::core::mem::size_of::<acpi_dmar_device_scope>() - 6usize];
    ["Alignment of acpi_dmar_device_scope"]
        [::core::mem::align_of::<acpi_dmar_device_scope>() - 1usize];
    ["Offset of field: acpi_dmar_device_scope::EntryType"]
        [::core::mem::offset_of!(acpi_dmar_device_scope, EntryType) - 0usize];
    ["Offset of field: acpi_dmar_device_scope::Length"]
        [::core::mem::offset_of!(acpi_dmar_device_scope, Length) - 1usize];
    ["Offset of field: acpi_dmar_device_scope::Flags"]
        [::core::mem::offset_of!(acpi_dmar_device_scope, Flags) - 2usize];
    ["Offset of field: acpi_dmar_device_scope::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_device_scope, Reserved) - 3usize];
    ["Offset of field: acpi_dmar_device_scope::EnumerationId"]
        [::core::mem::offset_of!(acpi_dmar_device_scope, EnumerationId) - 4usize];
    ["Offset of field: acpi_dmar_device_scope::Bus"]
        [::core::mem::offset_of!(acpi_dmar_device_scope, Bus) - 5usize];
};
pub type ACPI_DMAR_DEVICE_SCOPE = acpi_dmar_device_scope;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_NOT_USED: AcpiDmarScopeType = 0;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_ENDPOINT: AcpiDmarScopeType = 1;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_BRIDGE: AcpiDmarScopeType = 2;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_IOAPIC: AcpiDmarScopeType = 3;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_HPET: AcpiDmarScopeType = 4;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_NAMESPACE: AcpiDmarScopeType = 5;
pub const AcpiDmarScopeType_ACPI_DMAR_SCOPE_TYPE_RESERVED: AcpiDmarScopeType = 6;
pub type AcpiDmarScopeType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_pci_path {
    pub Device: UINT8,
    pub Function: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_pci_path"][::core::mem::size_of::<acpi_dmar_pci_path>() - 2usize];
    ["Alignment of acpi_dmar_pci_path"][::core::mem::align_of::<acpi_dmar_pci_path>() - 1usize];
    ["Offset of field: acpi_dmar_pci_path::Device"]
        [::core::mem::offset_of!(acpi_dmar_pci_path, Device) - 0usize];
    ["Offset of field: acpi_dmar_pci_path::Function"]
        [::core::mem::offset_of!(acpi_dmar_pci_path, Function) - 1usize];
};
pub type ACPI_DMAR_PCI_PATH = acpi_dmar_pci_path;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_hardware_unit {
    pub Header: ACPI_DMAR_HEADER,
    pub Flags: UINT8,
    pub Size: UINT8,
    pub Segment: UINT16,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_hardware_unit"]
        [::core::mem::size_of::<acpi_dmar_hardware_unit>() - 16usize];
    ["Alignment of acpi_dmar_hardware_unit"]
        [::core::mem::align_of::<acpi_dmar_hardware_unit>() - 1usize];
    ["Offset of field: acpi_dmar_hardware_unit::Header"]
        [::core::mem::offset_of!(acpi_dmar_hardware_unit, Header) - 0usize];
    ["Offset of field: acpi_dmar_hardware_unit::Flags"]
        [::core::mem::offset_of!(acpi_dmar_hardware_unit, Flags) - 4usize];
    ["Offset of field: acpi_dmar_hardware_unit::Size"]
        [::core::mem::offset_of!(acpi_dmar_hardware_unit, Size) - 5usize];
    ["Offset of field: acpi_dmar_hardware_unit::Segment"]
        [::core::mem::offset_of!(acpi_dmar_hardware_unit, Segment) - 6usize];
    ["Offset of field: acpi_dmar_hardware_unit::Address"]
        [::core::mem::offset_of!(acpi_dmar_hardware_unit, Address) - 8usize];
};
pub type ACPI_DMAR_HARDWARE_UNIT = acpi_dmar_hardware_unit;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_reserved_memory {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: UINT16,
    pub Segment: UINT16,
    pub BaseAddress: UINT64,
    pub EndAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_reserved_memory"]
        [::core::mem::size_of::<acpi_dmar_reserved_memory>() - 24usize];
    ["Alignment of acpi_dmar_reserved_memory"]
        [::core::mem::align_of::<acpi_dmar_reserved_memory>() - 1usize];
    ["Offset of field: acpi_dmar_reserved_memory::Header"]
        [::core::mem::offset_of!(acpi_dmar_reserved_memory, Header) - 0usize];
    ["Offset of field: acpi_dmar_reserved_memory::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_reserved_memory, Reserved) - 4usize];
    ["Offset of field: acpi_dmar_reserved_memory::Segment"]
        [::core::mem::offset_of!(acpi_dmar_reserved_memory, Segment) - 6usize];
    ["Offset of field: acpi_dmar_reserved_memory::BaseAddress"]
        [::core::mem::offset_of!(acpi_dmar_reserved_memory, BaseAddress) - 8usize];
    ["Offset of field: acpi_dmar_reserved_memory::EndAddress"]
        [::core::mem::offset_of!(acpi_dmar_reserved_memory, EndAddress) - 16usize];
};
pub type ACPI_DMAR_RESERVED_MEMORY = acpi_dmar_reserved_memory;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_atsr {
    pub Header: ACPI_DMAR_HEADER,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub Segment: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_atsr"][::core::mem::size_of::<acpi_dmar_atsr>() - 8usize];
    ["Alignment of acpi_dmar_atsr"][::core::mem::align_of::<acpi_dmar_atsr>() - 1usize];
    ["Offset of field: acpi_dmar_atsr::Header"]
        [::core::mem::offset_of!(acpi_dmar_atsr, Header) - 0usize];
    ["Offset of field: acpi_dmar_atsr::Flags"]
        [::core::mem::offset_of!(acpi_dmar_atsr, Flags) - 4usize];
    ["Offset of field: acpi_dmar_atsr::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_atsr, Reserved) - 5usize];
    ["Offset of field: acpi_dmar_atsr::Segment"]
        [::core::mem::offset_of!(acpi_dmar_atsr, Segment) - 6usize];
};
pub type ACPI_DMAR_ATSR = acpi_dmar_atsr;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_rhsa {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: UINT32,
    pub BaseAddress: UINT64,
    pub ProximityDomain: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_rhsa"][::core::mem::size_of::<acpi_dmar_rhsa>() - 20usize];
    ["Alignment of acpi_dmar_rhsa"][::core::mem::align_of::<acpi_dmar_rhsa>() - 1usize];
    ["Offset of field: acpi_dmar_rhsa::Header"]
        [::core::mem::offset_of!(acpi_dmar_rhsa, Header) - 0usize];
    ["Offset of field: acpi_dmar_rhsa::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_rhsa, Reserved) - 4usize];
    ["Offset of field: acpi_dmar_rhsa::BaseAddress"]
        [::core::mem::offset_of!(acpi_dmar_rhsa, BaseAddress) - 8usize];
    ["Offset of field: acpi_dmar_rhsa::ProximityDomain"]
        [::core::mem::offset_of!(acpi_dmar_rhsa, ProximityDomain) - 16usize];
};
pub type ACPI_DMAR_RHSA = acpi_dmar_rhsa;
#[repr(C)]
pub struct acpi_dmar_andd {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: [UINT8; 3usize],
    pub DeviceNumber: UINT8,
    pub __bindgen_anon_1: acpi_dmar_andd__bindgen_ty_1,
}
#[repr(C)]
pub struct acpi_dmar_andd__bindgen_ty_1 {
    pub __pad: __BindgenUnionField<::core::ffi::c_char>,
    pub __bindgen_anon_1: __BindgenUnionField<acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1 {
    pub __Empty_DeviceName: acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub DeviceName: __IncompleteArrayField<::core::ffi::c_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 0usize];
    ["Alignment of acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::core::mem::align_of::<
        acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1::__Empty_DeviceName"][::core::mem::offset_of!(
        acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1,
        __Empty_DeviceName
    ) - 0usize];
    ["Offset of field: acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1::DeviceName"]
        [::core::mem::offset_of!(acpi_dmar_andd__bindgen_ty_1__bindgen_ty_1, DeviceName) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_andd__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_dmar_andd__bindgen_ty_1>() - 1usize];
    ["Alignment of acpi_dmar_andd__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_dmar_andd__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_dmar_andd__bindgen_ty_1::__pad"]
        [::core::mem::offset_of!(acpi_dmar_andd__bindgen_ty_1, __pad) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_andd"][::core::mem::size_of::<acpi_dmar_andd>() - 9usize];
    ["Alignment of acpi_dmar_andd"][::core::mem::align_of::<acpi_dmar_andd>() - 1usize];
    ["Offset of field: acpi_dmar_andd::Header"]
        [::core::mem::offset_of!(acpi_dmar_andd, Header) - 0usize];
    ["Offset of field: acpi_dmar_andd::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_andd, Reserved) - 4usize];
    ["Offset of field: acpi_dmar_andd::DeviceNumber"]
        [::core::mem::offset_of!(acpi_dmar_andd, DeviceNumber) - 7usize];
};
pub type ACPI_DMAR_ANDD = acpi_dmar_andd;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_satc {
    pub Header: ACPI_DMAR_HEADER,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub Segment: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_satc"][::core::mem::size_of::<acpi_dmar_satc>() - 8usize];
    ["Alignment of acpi_dmar_satc"][::core::mem::align_of::<acpi_dmar_satc>() - 1usize];
    ["Offset of field: acpi_dmar_satc::Header"]
        [::core::mem::offset_of!(acpi_dmar_satc, Header) - 0usize];
    ["Offset of field: acpi_dmar_satc::Flags"]
        [::core::mem::offset_of!(acpi_dmar_satc, Flags) - 4usize];
    ["Offset of field: acpi_dmar_satc::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_satc, Reserved) - 5usize];
    ["Offset of field: acpi_dmar_satc::Segment"]
        [::core::mem::offset_of!(acpi_dmar_satc, Segment) - 6usize];
};
pub type ACPI_DMAR_SATC = acpi_dmar_satc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_sidp {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: UINT16,
    pub Segment: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_dmar_sidp"][::core::mem::size_of::<acpi_dmar_sidp>() - 8usize];
    ["Alignment of acpi_dmar_sidp"][::core::mem::align_of::<acpi_dmar_sidp>() - 1usize];
    ["Offset of field: acpi_dmar_sidp::Header"]
        [::core::mem::offset_of!(acpi_dmar_sidp, Header) - 0usize];
    ["Offset of field: acpi_dmar_sidp::Reserved"]
        [::core::mem::offset_of!(acpi_dmar_sidp, Reserved) - 4usize];
    ["Offset of field: acpi_dmar_sidp::Segment"]
        [::core::mem::offset_of!(acpi_dmar_sidp, Segment) - 6usize];
};
pub type ACPI_DMAR_SIDP = acpi_dmar_sidp;
#[doc = " DRTM - Dynamic Root of Trust for Measurement table\n Conforms to \"TCG D-RTM Architecture\" June 17 2013, Version 1.0.0\n Table version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_drtm {
    pub Header: ACPI_TABLE_HEADER,
    pub EntryBaseAddress: UINT64,
    pub EntryLength: UINT64,
    pub EntryAddress32: UINT32,
    pub EntryAddress64: UINT64,
    pub ExitAddress: UINT64,
    pub LogAreaAddress: UINT64,
    pub LogAreaLength: UINT32,
    pub ArchDependentAddress: UINT64,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_drtm"][::core::mem::size_of::<acpi_table_drtm>() - 96usize];
    ["Alignment of acpi_table_drtm"][::core::mem::align_of::<acpi_table_drtm>() - 1usize];
    ["Offset of field: acpi_table_drtm::Header"]
        [::core::mem::offset_of!(acpi_table_drtm, Header) - 0usize];
    ["Offset of field: acpi_table_drtm::EntryBaseAddress"]
        [::core::mem::offset_of!(acpi_table_drtm, EntryBaseAddress) - 36usize];
    ["Offset of field: acpi_table_drtm::EntryLength"]
        [::core::mem::offset_of!(acpi_table_drtm, EntryLength) - 44usize];
    ["Offset of field: acpi_table_drtm::EntryAddress32"]
        [::core::mem::offset_of!(acpi_table_drtm, EntryAddress32) - 52usize];
    ["Offset of field: acpi_table_drtm::EntryAddress64"]
        [::core::mem::offset_of!(acpi_table_drtm, EntryAddress64) - 56usize];
    ["Offset of field: acpi_table_drtm::ExitAddress"]
        [::core::mem::offset_of!(acpi_table_drtm, ExitAddress) - 64usize];
    ["Offset of field: acpi_table_drtm::LogAreaAddress"]
        [::core::mem::offset_of!(acpi_table_drtm, LogAreaAddress) - 72usize];
    ["Offset of field: acpi_table_drtm::LogAreaLength"]
        [::core::mem::offset_of!(acpi_table_drtm, LogAreaLength) - 80usize];
    ["Offset of field: acpi_table_drtm::ArchDependentAddress"]
        [::core::mem::offset_of!(acpi_table_drtm, ArchDependentAddress) - 84usize];
    ["Offset of field: acpi_table_drtm::Flags"]
        [::core::mem::offset_of!(acpi_table_drtm, Flags) - 92usize];
};
#[doc = " DRTM - Dynamic Root of Trust for Measurement table\n Conforms to \"TCG D-RTM Architecture\" June 17 2013, Version 1.0.0\n Table version 1\n"]
pub type ACPI_TABLE_DRTM = acpi_table_drtm;
#[repr(C, packed)]
pub struct acpi_drtm_vtable_list {
    pub ValidatedTableCount: UINT32,
    pub ValidatedTables: __IncompleteArrayField<UINT64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_drtm_vtable_list"][::core::mem::size_of::<acpi_drtm_vtable_list>() - 4usize];
    ["Alignment of acpi_drtm_vtable_list"]
        [::core::mem::align_of::<acpi_drtm_vtable_list>() - 1usize];
    ["Offset of field: acpi_drtm_vtable_list::ValidatedTableCount"]
        [::core::mem::offset_of!(acpi_drtm_vtable_list, ValidatedTableCount) - 0usize];
    ["Offset of field: acpi_drtm_vtable_list::ValidatedTables"]
        [::core::mem::offset_of!(acpi_drtm_vtable_list, ValidatedTables) - 4usize];
};
pub type ACPI_DRTM_VTABLE_LIST = acpi_drtm_vtable_list;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_drtm_resource {
    pub Size: [UINT8; 7usize],
    pub Type: UINT8,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_drtm_resource"][::core::mem::size_of::<acpi_drtm_resource>() - 16usize];
    ["Alignment of acpi_drtm_resource"][::core::mem::align_of::<acpi_drtm_resource>() - 1usize];
    ["Offset of field: acpi_drtm_resource::Size"]
        [::core::mem::offset_of!(acpi_drtm_resource, Size) - 0usize];
    ["Offset of field: acpi_drtm_resource::Type"]
        [::core::mem::offset_of!(acpi_drtm_resource, Type) - 7usize];
    ["Offset of field: acpi_drtm_resource::Address"]
        [::core::mem::offset_of!(acpi_drtm_resource, Address) - 8usize];
};
pub type ACPI_DRTM_RESOURCE = acpi_drtm_resource;
#[repr(C, packed)]
pub struct acpi_drtm_resource_list {
    pub ResourceCount: UINT32,
    pub Resources: __IncompleteArrayField<ACPI_DRTM_RESOURCE>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_drtm_resource_list"][::core::mem::size_of::<acpi_drtm_resource_list>() - 4usize];
    ["Alignment of acpi_drtm_resource_list"]
        [::core::mem::align_of::<acpi_drtm_resource_list>() - 1usize];
    ["Offset of field: acpi_drtm_resource_list::ResourceCount"]
        [::core::mem::offset_of!(acpi_drtm_resource_list, ResourceCount) - 0usize];
    ["Offset of field: acpi_drtm_resource_list::Resources"]
        [::core::mem::offset_of!(acpi_drtm_resource_list, Resources) - 4usize];
};
pub type ACPI_DRTM_RESOURCE_LIST = acpi_drtm_resource_list;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_drtm_dps_id {
    pub DpsIdLength: UINT32,
    pub DpsId: [UINT8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_drtm_dps_id"][::core::mem::size_of::<acpi_drtm_dps_id>() - 20usize];
    ["Alignment of acpi_drtm_dps_id"][::core::mem::align_of::<acpi_drtm_dps_id>() - 1usize];
    ["Offset of field: acpi_drtm_dps_id::DpsIdLength"]
        [::core::mem::offset_of!(acpi_drtm_dps_id, DpsIdLength) - 0usize];
    ["Offset of field: acpi_drtm_dps_id::DpsId"]
        [::core::mem::offset_of!(acpi_drtm_dps_id, DpsId) - 4usize];
};
pub type ACPI_DRTM_DPS_ID = acpi_drtm_dps_id;
#[doc = " ECDT - Embedded Controller Boot Resources Table\n        Version 1\n"]
#[repr(C, packed)]
pub struct acpi_table_ecdt {
    pub Header: ACPI_TABLE_HEADER,
    pub Control: ACPI_GENERIC_ADDRESS,
    pub Data: ACPI_GENERIC_ADDRESS,
    pub Uid: UINT32,
    pub Gpe: UINT8,
    pub Id: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_ecdt"][::core::mem::size_of::<acpi_table_ecdt>() - 65usize];
    ["Alignment of acpi_table_ecdt"][::core::mem::align_of::<acpi_table_ecdt>() - 1usize];
    ["Offset of field: acpi_table_ecdt::Header"]
        [::core::mem::offset_of!(acpi_table_ecdt, Header) - 0usize];
    ["Offset of field: acpi_table_ecdt::Control"]
        [::core::mem::offset_of!(acpi_table_ecdt, Control) - 36usize];
    ["Offset of field: acpi_table_ecdt::Data"]
        [::core::mem::offset_of!(acpi_table_ecdt, Data) - 48usize];
    ["Offset of field: acpi_table_ecdt::Uid"]
        [::core::mem::offset_of!(acpi_table_ecdt, Uid) - 60usize];
    ["Offset of field: acpi_table_ecdt::Gpe"]
        [::core::mem::offset_of!(acpi_table_ecdt, Gpe) - 64usize];
    ["Offset of field: acpi_table_ecdt::Id"]
        [::core::mem::offset_of!(acpi_table_ecdt, Id) - 65usize];
};
#[doc = " ECDT - Embedded Controller Boot Resources Table\n        Version 1\n"]
pub type ACPI_TABLE_ECDT = acpi_table_ecdt;
#[doc = " EINJ - Error Injection Table (ACPI 4.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_einj {
    pub Header: ACPI_TABLE_HEADER,
    pub HeaderLength: UINT32,
    pub Flags: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub Entries: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_einj"][::core::mem::size_of::<acpi_table_einj>() - 48usize];
    ["Alignment of acpi_table_einj"][::core::mem::align_of::<acpi_table_einj>() - 1usize];
    ["Offset of field: acpi_table_einj::Header"]
        [::core::mem::offset_of!(acpi_table_einj, Header) - 0usize];
    ["Offset of field: acpi_table_einj::HeaderLength"]
        [::core::mem::offset_of!(acpi_table_einj, HeaderLength) - 36usize];
    ["Offset of field: acpi_table_einj::Flags"]
        [::core::mem::offset_of!(acpi_table_einj, Flags) - 40usize];
    ["Offset of field: acpi_table_einj::Reserved"]
        [::core::mem::offset_of!(acpi_table_einj, Reserved) - 41usize];
    ["Offset of field: acpi_table_einj::Entries"]
        [::core::mem::offset_of!(acpi_table_einj, Entries) - 44usize];
};
#[doc = " EINJ - Error Injection Table (ACPI 4.0)\n        Version 1\n"]
pub type ACPI_TABLE_EINJ = acpi_table_einj;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_entry {
    pub WheaHeader: ACPI_WHEA_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_einj_entry"][::core::mem::size_of::<acpi_einj_entry>() - 32usize];
    ["Alignment of acpi_einj_entry"][::core::mem::align_of::<acpi_einj_entry>() - 1usize];
    ["Offset of field: acpi_einj_entry::WheaHeader"]
        [::core::mem::offset_of!(acpi_einj_entry, WheaHeader) - 0usize];
};
pub type ACPI_EINJ_ENTRY = acpi_einj_entry;
pub const AcpiEinjActions_ACPI_EINJ_BEGIN_OPERATION: AcpiEinjActions = 0;
pub const AcpiEinjActions_ACPI_EINJ_GET_TRIGGER_TABLE: AcpiEinjActions = 1;
pub const AcpiEinjActions_ACPI_EINJ_SET_ERROR_TYPE: AcpiEinjActions = 2;
pub const AcpiEinjActions_ACPI_EINJ_GET_ERROR_TYPE: AcpiEinjActions = 3;
pub const AcpiEinjActions_ACPI_EINJ_END_OPERATION: AcpiEinjActions = 4;
pub const AcpiEinjActions_ACPI_EINJ_EXECUTE_OPERATION: AcpiEinjActions = 5;
pub const AcpiEinjActions_ACPI_EINJ_CHECK_BUSY_STATUS: AcpiEinjActions = 6;
pub const AcpiEinjActions_ACPI_EINJ_GET_COMMAND_STATUS: AcpiEinjActions = 7;
pub const AcpiEinjActions_ACPI_EINJ_SET_ERROR_TYPE_WITH_ADDRESS: AcpiEinjActions = 8;
pub const AcpiEinjActions_ACPI_EINJ_GET_EXECUTE_TIMINGS: AcpiEinjActions = 9;
pub const AcpiEinjActions_ACPI_EINJV2_GET_ERROR_TYPE: AcpiEinjActions = 17;
pub const AcpiEinjActions_ACPI_EINJ_ACTION_RESERVED: AcpiEinjActions = 18;
pub const AcpiEinjActions_ACPI_EINJ_TRIGGER_ERROR: AcpiEinjActions = 255;
pub type AcpiEinjActions = ::core::ffi::c_uint;
pub const AcpiEinjInstructions_ACPI_EINJ_READ_REGISTER: AcpiEinjInstructions = 0;
pub const AcpiEinjInstructions_ACPI_EINJ_READ_REGISTER_VALUE: AcpiEinjInstructions = 1;
pub const AcpiEinjInstructions_ACPI_EINJ_WRITE_REGISTER: AcpiEinjInstructions = 2;
pub const AcpiEinjInstructions_ACPI_EINJ_WRITE_REGISTER_VALUE: AcpiEinjInstructions = 3;
pub const AcpiEinjInstructions_ACPI_EINJ_NOOP: AcpiEinjInstructions = 4;
pub const AcpiEinjInstructions_ACPI_EINJ_FLUSH_CACHELINE: AcpiEinjInstructions = 5;
pub const AcpiEinjInstructions_ACPI_EINJ_INSTRUCTION_RESERVED: AcpiEinjInstructions = 6;
pub type AcpiEinjInstructions = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_error_type_with_addr {
    pub ErrorType: UINT32,
    pub VendorStructOffset: UINT32,
    pub Flags: UINT32,
    pub ApicId: UINT32,
    pub Address: UINT64,
    pub Range: UINT64,
    pub PcieId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_einj_error_type_with_addr"]
        [::core::mem::size_of::<acpi_einj_error_type_with_addr>() - 36usize];
    ["Alignment of acpi_einj_error_type_with_addr"]
        [::core::mem::align_of::<acpi_einj_error_type_with_addr>() - 1usize];
    ["Offset of field: acpi_einj_error_type_with_addr::ErrorType"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, ErrorType) - 0usize];
    ["Offset of field: acpi_einj_error_type_with_addr::VendorStructOffset"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, VendorStructOffset) - 4usize];
    ["Offset of field: acpi_einj_error_type_with_addr::Flags"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, Flags) - 8usize];
    ["Offset of field: acpi_einj_error_type_with_addr::ApicId"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, ApicId) - 12usize];
    ["Offset of field: acpi_einj_error_type_with_addr::Address"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, Address) - 16usize];
    ["Offset of field: acpi_einj_error_type_with_addr::Range"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, Range) - 24usize];
    ["Offset of field: acpi_einj_error_type_with_addr::PcieId"]
        [::core::mem::offset_of!(acpi_einj_error_type_with_addr, PcieId) - 32usize];
};
pub type ACPI_EINJ_ERROR_TYPE_WITH_ADDR = acpi_einj_error_type_with_addr;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_vendor {
    pub Length: UINT32,
    pub PcieId: UINT32,
    pub VendorId: UINT16,
    pub DeviceId: UINT16,
    pub RevisionId: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_einj_vendor"][::core::mem::size_of::<acpi_einj_vendor>() - 16usize];
    ["Alignment of acpi_einj_vendor"][::core::mem::align_of::<acpi_einj_vendor>() - 1usize];
    ["Offset of field: acpi_einj_vendor::Length"]
        [::core::mem::offset_of!(acpi_einj_vendor, Length) - 0usize];
    ["Offset of field: acpi_einj_vendor::PcieId"]
        [::core::mem::offset_of!(acpi_einj_vendor, PcieId) - 4usize];
    ["Offset of field: acpi_einj_vendor::VendorId"]
        [::core::mem::offset_of!(acpi_einj_vendor, VendorId) - 8usize];
    ["Offset of field: acpi_einj_vendor::DeviceId"]
        [::core::mem::offset_of!(acpi_einj_vendor, DeviceId) - 10usize];
    ["Offset of field: acpi_einj_vendor::RevisionId"]
        [::core::mem::offset_of!(acpi_einj_vendor, RevisionId) - 12usize];
    ["Offset of field: acpi_einj_vendor::Reserved"]
        [::core::mem::offset_of!(acpi_einj_vendor, Reserved) - 13usize];
};
pub type ACPI_EINJ_VENDOR = acpi_einj_vendor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_trigger {
    pub HeaderSize: UINT32,
    pub Revision: UINT32,
    pub TableSize: UINT32,
    pub EntryCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_einj_trigger"][::core::mem::size_of::<acpi_einj_trigger>() - 16usize];
    ["Alignment of acpi_einj_trigger"][::core::mem::align_of::<acpi_einj_trigger>() - 1usize];
    ["Offset of field: acpi_einj_trigger::HeaderSize"]
        [::core::mem::offset_of!(acpi_einj_trigger, HeaderSize) - 0usize];
    ["Offset of field: acpi_einj_trigger::Revision"]
        [::core::mem::offset_of!(acpi_einj_trigger, Revision) - 4usize];
    ["Offset of field: acpi_einj_trigger::TableSize"]
        [::core::mem::offset_of!(acpi_einj_trigger, TableSize) - 8usize];
    ["Offset of field: acpi_einj_trigger::EntryCount"]
        [::core::mem::offset_of!(acpi_einj_trigger, EntryCount) - 12usize];
};
pub type ACPI_EINJ_TRIGGER = acpi_einj_trigger;
pub const AcpiEinjCommandStatus_ACPI_EINJ_SUCCESS: AcpiEinjCommandStatus = 0;
pub const AcpiEinjCommandStatus_ACPI_EINJ_FAILURE: AcpiEinjCommandStatus = 1;
pub const AcpiEinjCommandStatus_ACPI_EINJ_INVALID_ACCESS: AcpiEinjCommandStatus = 2;
pub const AcpiEinjCommandStatus_ACPI_EINJ_STATUS_RESERVED: AcpiEinjCommandStatus = 3;
pub type AcpiEinjCommandStatus = ::core::ffi::c_uint;
#[doc = " ERST - Error Record Serialization Table (ACPI 4.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_erst {
    pub Header: ACPI_TABLE_HEADER,
    pub HeaderLength: UINT32,
    pub Reserved: UINT32,
    pub Entries: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_erst"][::core::mem::size_of::<acpi_table_erst>() - 48usize];
    ["Alignment of acpi_table_erst"][::core::mem::align_of::<acpi_table_erst>() - 1usize];
    ["Offset of field: acpi_table_erst::Header"]
        [::core::mem::offset_of!(acpi_table_erst, Header) - 0usize];
    ["Offset of field: acpi_table_erst::HeaderLength"]
        [::core::mem::offset_of!(acpi_table_erst, HeaderLength) - 36usize];
    ["Offset of field: acpi_table_erst::Reserved"]
        [::core::mem::offset_of!(acpi_table_erst, Reserved) - 40usize];
    ["Offset of field: acpi_table_erst::Entries"]
        [::core::mem::offset_of!(acpi_table_erst, Entries) - 44usize];
};
#[doc = " ERST - Error Record Serialization Table (ACPI 4.0)\n        Version 1\n"]
pub type ACPI_TABLE_ERST = acpi_table_erst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erst_entry {
    pub WheaHeader: ACPI_WHEA_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erst_entry"][::core::mem::size_of::<acpi_erst_entry>() - 32usize];
    ["Alignment of acpi_erst_entry"][::core::mem::align_of::<acpi_erst_entry>() - 1usize];
    ["Offset of field: acpi_erst_entry::WheaHeader"]
        [::core::mem::offset_of!(acpi_erst_entry, WheaHeader) - 0usize];
};
pub type ACPI_ERST_ENTRY = acpi_erst_entry;
pub const AcpiErstActions_ACPI_ERST_BEGIN_WRITE: AcpiErstActions = 0;
pub const AcpiErstActions_ACPI_ERST_BEGIN_READ: AcpiErstActions = 1;
pub const AcpiErstActions_ACPI_ERST_BEGIN_CLEAR: AcpiErstActions = 2;
pub const AcpiErstActions_ACPI_ERST_END: AcpiErstActions = 3;
pub const AcpiErstActions_ACPI_ERST_SET_RECORD_OFFSET: AcpiErstActions = 4;
pub const AcpiErstActions_ACPI_ERST_EXECUTE_OPERATION: AcpiErstActions = 5;
pub const AcpiErstActions_ACPI_ERST_CHECK_BUSY_STATUS: AcpiErstActions = 6;
pub const AcpiErstActions_ACPI_ERST_GET_COMMAND_STATUS: AcpiErstActions = 7;
pub const AcpiErstActions_ACPI_ERST_GET_RECORD_ID: AcpiErstActions = 8;
pub const AcpiErstActions_ACPI_ERST_SET_RECORD_ID: AcpiErstActions = 9;
pub const AcpiErstActions_ACPI_ERST_GET_RECORD_COUNT: AcpiErstActions = 10;
pub const AcpiErstActions_ACPI_ERST_BEGIN_DUMMY_WRIITE: AcpiErstActions = 11;
pub const AcpiErstActions_ACPI_ERST_NOT_USED: AcpiErstActions = 12;
pub const AcpiErstActions_ACPI_ERST_GET_ERROR_RANGE: AcpiErstActions = 13;
pub const AcpiErstActions_ACPI_ERST_GET_ERROR_LENGTH: AcpiErstActions = 14;
pub const AcpiErstActions_ACPI_ERST_GET_ERROR_ATTRIBUTES: AcpiErstActions = 15;
pub const AcpiErstActions_ACPI_ERST_EXECUTE_TIMINGS: AcpiErstActions = 16;
pub const AcpiErstActions_ACPI_ERST_ACTION_RESERVED: AcpiErstActions = 17;
pub type AcpiErstActions = ::core::ffi::c_uint;
pub const AcpiErstInstructions_ACPI_ERST_READ_REGISTER: AcpiErstInstructions = 0;
pub const AcpiErstInstructions_ACPI_ERST_READ_REGISTER_VALUE: AcpiErstInstructions = 1;
pub const AcpiErstInstructions_ACPI_ERST_WRITE_REGISTER: AcpiErstInstructions = 2;
pub const AcpiErstInstructions_ACPI_ERST_WRITE_REGISTER_VALUE: AcpiErstInstructions = 3;
pub const AcpiErstInstructions_ACPI_ERST_NOOP: AcpiErstInstructions = 4;
pub const AcpiErstInstructions_ACPI_ERST_LOAD_VAR1: AcpiErstInstructions = 5;
pub const AcpiErstInstructions_ACPI_ERST_LOAD_VAR2: AcpiErstInstructions = 6;
pub const AcpiErstInstructions_ACPI_ERST_STORE_VAR1: AcpiErstInstructions = 7;
pub const AcpiErstInstructions_ACPI_ERST_ADD: AcpiErstInstructions = 8;
pub const AcpiErstInstructions_ACPI_ERST_SUBTRACT: AcpiErstInstructions = 9;
pub const AcpiErstInstructions_ACPI_ERST_ADD_VALUE: AcpiErstInstructions = 10;
pub const AcpiErstInstructions_ACPI_ERST_SUBTRACT_VALUE: AcpiErstInstructions = 11;
pub const AcpiErstInstructions_ACPI_ERST_STALL: AcpiErstInstructions = 12;
pub const AcpiErstInstructions_ACPI_ERST_STALL_WHILE_TRUE: AcpiErstInstructions = 13;
pub const AcpiErstInstructions_ACPI_ERST_SKIP_NEXT_IF_TRUE: AcpiErstInstructions = 14;
pub const AcpiErstInstructions_ACPI_ERST_GOTO: AcpiErstInstructions = 15;
pub const AcpiErstInstructions_ACPI_ERST_SET_SRC_ADDRESS_BASE: AcpiErstInstructions = 16;
pub const AcpiErstInstructions_ACPI_ERST_SET_DST_ADDRESS_BASE: AcpiErstInstructions = 17;
pub const AcpiErstInstructions_ACPI_ERST_MOVE_DATA: AcpiErstInstructions = 18;
pub const AcpiErstInstructions_ACPI_ERST_INSTRUCTION_RESERVED: AcpiErstInstructions = 19;
pub type AcpiErstInstructions = ::core::ffi::c_uint;
pub const AcpiErstCommandStatus_ACPI_ERST_SUCCESS: AcpiErstCommandStatus = 0;
pub const AcpiErstCommandStatus_ACPI_ERST_NO_SPACE: AcpiErstCommandStatus = 1;
pub const AcpiErstCommandStatus_ACPI_ERST_NOT_AVAILABLE: AcpiErstCommandStatus = 2;
pub const AcpiErstCommandStatus_ACPI_ERST_FAILURE: AcpiErstCommandStatus = 3;
pub const AcpiErstCommandStatus_ACPI_ERST_RECORD_EMPTY: AcpiErstCommandStatus = 4;
pub const AcpiErstCommandStatus_ACPI_ERST_NOT_FOUND: AcpiErstCommandStatus = 5;
pub const AcpiErstCommandStatus_ACPI_ERST_STATUS_RESERVED: AcpiErstCommandStatus = 6;
pub type AcpiErstCommandStatus = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erst_info {
    pub Signature: UINT16,
    pub Data: [UINT8; 48usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erst_info"][::core::mem::size_of::<acpi_erst_info>() - 50usize];
    ["Alignment of acpi_erst_info"][::core::mem::align_of::<acpi_erst_info>() - 1usize];
    ["Offset of field: acpi_erst_info::Signature"]
        [::core::mem::offset_of!(acpi_erst_info, Signature) - 0usize];
    ["Offset of field: acpi_erst_info::Data"]
        [::core::mem::offset_of!(acpi_erst_info, Data) - 2usize];
};
pub type ACPI_ERST_INFO = acpi_erst_info;
#[doc = " FPDT - Firmware Performance Data Table (ACPI 5.0)\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_fpdt {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_fpdt"][::core::mem::size_of::<acpi_table_fpdt>() - 36usize];
    ["Alignment of acpi_table_fpdt"][::core::mem::align_of::<acpi_table_fpdt>() - 1usize];
    ["Offset of field: acpi_table_fpdt::Header"]
        [::core::mem::offset_of!(acpi_table_fpdt, Header) - 0usize];
};
#[doc = " FPDT - Firmware Performance Data Table (ACPI 5.0)\n        Version 1\n"]
pub type ACPI_TABLE_FPDT = acpi_table_fpdt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_header {
    pub Type: UINT16,
    pub Length: UINT8,
    pub Revision: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_fpdt_header"][::core::mem::size_of::<acpi_fpdt_header>() - 4usize];
    ["Alignment of acpi_fpdt_header"][::core::mem::align_of::<acpi_fpdt_header>() - 1usize];
    ["Offset of field: acpi_fpdt_header::Type"]
        [::core::mem::offset_of!(acpi_fpdt_header, Type) - 0usize];
    ["Offset of field: acpi_fpdt_header::Length"]
        [::core::mem::offset_of!(acpi_fpdt_header, Length) - 2usize];
    ["Offset of field: acpi_fpdt_header::Revision"]
        [::core::mem::offset_of!(acpi_fpdt_header, Revision) - 3usize];
};
pub type ACPI_FPDT_HEADER = acpi_fpdt_header;
pub const AcpiFpdtType_ACPI_FPDT_TYPE_BOOT: AcpiFpdtType = 0;
pub const AcpiFpdtType_ACPI_FPDT_TYPE_S3PERF: AcpiFpdtType = 1;
pub type AcpiFpdtType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_boot_pointer {
    pub Header: ACPI_FPDT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_fpdt_boot_pointer"][::core::mem::size_of::<acpi_fpdt_boot_pointer>() - 16usize];
    ["Alignment of acpi_fpdt_boot_pointer"]
        [::core::mem::align_of::<acpi_fpdt_boot_pointer>() - 1usize];
    ["Offset of field: acpi_fpdt_boot_pointer::Header"]
        [::core::mem::offset_of!(acpi_fpdt_boot_pointer, Header) - 0usize];
    ["Offset of field: acpi_fpdt_boot_pointer::Reserved"]
        [::core::mem::offset_of!(acpi_fpdt_boot_pointer, Reserved) - 4usize];
    ["Offset of field: acpi_fpdt_boot_pointer::Address"]
        [::core::mem::offset_of!(acpi_fpdt_boot_pointer, Address) - 8usize];
};
pub type ACPI_FPDT_BOOT_POINTER = acpi_fpdt_boot_pointer;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_s3pt_pointer {
    pub Header: ACPI_FPDT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_fpdt_s3pt_pointer"][::core::mem::size_of::<acpi_fpdt_s3pt_pointer>() - 16usize];
    ["Alignment of acpi_fpdt_s3pt_pointer"]
        [::core::mem::align_of::<acpi_fpdt_s3pt_pointer>() - 1usize];
    ["Offset of field: acpi_fpdt_s3pt_pointer::Header"]
        [::core::mem::offset_of!(acpi_fpdt_s3pt_pointer, Header) - 0usize];
    ["Offset of field: acpi_fpdt_s3pt_pointer::Reserved"]
        [::core::mem::offset_of!(acpi_fpdt_s3pt_pointer, Reserved) - 4usize];
    ["Offset of field: acpi_fpdt_s3pt_pointer::Address"]
        [::core::mem::offset_of!(acpi_fpdt_s3pt_pointer, Address) - 8usize];
};
pub type ACPI_FPDT_S3PT_POINTER = acpi_fpdt_s3pt_pointer;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_s3pt {
    pub Signature: [UINT8; 4usize],
    pub Length: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_s3pt"][::core::mem::size_of::<acpi_table_s3pt>() - 8usize];
    ["Alignment of acpi_table_s3pt"][::core::mem::align_of::<acpi_table_s3pt>() - 1usize];
    ["Offset of field: acpi_table_s3pt::Signature"]
        [::core::mem::offset_of!(acpi_table_s3pt, Signature) - 0usize];
    ["Offset of field: acpi_table_s3pt::Length"]
        [::core::mem::offset_of!(acpi_table_s3pt, Length) - 4usize];
};
pub type ACPI_TABLE_S3PT = acpi_table_s3pt;
pub const AcpiS3ptType_ACPI_S3PT_TYPE_RESUME: AcpiS3ptType = 0;
pub const AcpiS3ptType_ACPI_S3PT_TYPE_SUSPEND: AcpiS3ptType = 1;
pub const AcpiS3ptType_ACPI_FPDT_BOOT_PERFORMANCE: AcpiS3ptType = 2;
pub type AcpiS3ptType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_s3pt_resume {
    pub Header: ACPI_FPDT_HEADER,
    pub ResumeCount: UINT32,
    pub FullResume: UINT64,
    pub AverageResume: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_s3pt_resume"][::core::mem::size_of::<acpi_s3pt_resume>() - 24usize];
    ["Alignment of acpi_s3pt_resume"][::core::mem::align_of::<acpi_s3pt_resume>() - 1usize];
    ["Offset of field: acpi_s3pt_resume::Header"]
        [::core::mem::offset_of!(acpi_s3pt_resume, Header) - 0usize];
    ["Offset of field: acpi_s3pt_resume::ResumeCount"]
        [::core::mem::offset_of!(acpi_s3pt_resume, ResumeCount) - 4usize];
    ["Offset of field: acpi_s3pt_resume::FullResume"]
        [::core::mem::offset_of!(acpi_s3pt_resume, FullResume) - 8usize];
    ["Offset of field: acpi_s3pt_resume::AverageResume"]
        [::core::mem::offset_of!(acpi_s3pt_resume, AverageResume) - 16usize];
};
pub type ACPI_S3PT_RESUME = acpi_s3pt_resume;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_s3pt_suspend {
    pub Header: ACPI_FPDT_HEADER,
    pub SuspendStart: UINT64,
    pub SuspendEnd: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_s3pt_suspend"][::core::mem::size_of::<acpi_s3pt_suspend>() - 20usize];
    ["Alignment of acpi_s3pt_suspend"][::core::mem::align_of::<acpi_s3pt_suspend>() - 1usize];
    ["Offset of field: acpi_s3pt_suspend::Header"]
        [::core::mem::offset_of!(acpi_s3pt_suspend, Header) - 0usize];
    ["Offset of field: acpi_s3pt_suspend::SuspendStart"]
        [::core::mem::offset_of!(acpi_s3pt_suspend, SuspendStart) - 4usize];
    ["Offset of field: acpi_s3pt_suspend::SuspendEnd"]
        [::core::mem::offset_of!(acpi_s3pt_suspend, SuspendEnd) - 12usize];
};
pub type ACPI_S3PT_SUSPEND = acpi_s3pt_suspend;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_boot {
    pub Header: ACPI_FPDT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub ResetEnd: UINT64,
    pub LoadStart: UINT64,
    pub StartupStart: UINT64,
    pub ExitServicesEntry: UINT64,
    pub ExitServicesExit: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_fpdt_boot"][::core::mem::size_of::<acpi_fpdt_boot>() - 48usize];
    ["Alignment of acpi_fpdt_boot"][::core::mem::align_of::<acpi_fpdt_boot>() - 1usize];
    ["Offset of field: acpi_fpdt_boot::Header"]
        [::core::mem::offset_of!(acpi_fpdt_boot, Header) - 0usize];
    ["Offset of field: acpi_fpdt_boot::Reserved"]
        [::core::mem::offset_of!(acpi_fpdt_boot, Reserved) - 4usize];
    ["Offset of field: acpi_fpdt_boot::ResetEnd"]
        [::core::mem::offset_of!(acpi_fpdt_boot, ResetEnd) - 8usize];
    ["Offset of field: acpi_fpdt_boot::LoadStart"]
        [::core::mem::offset_of!(acpi_fpdt_boot, LoadStart) - 16usize];
    ["Offset of field: acpi_fpdt_boot::StartupStart"]
        [::core::mem::offset_of!(acpi_fpdt_boot, StartupStart) - 24usize];
    ["Offset of field: acpi_fpdt_boot::ExitServicesEntry"]
        [::core::mem::offset_of!(acpi_fpdt_boot, ExitServicesEntry) - 32usize];
    ["Offset of field: acpi_fpdt_boot::ExitServicesExit"]
        [::core::mem::offset_of!(acpi_fpdt_boot, ExitServicesExit) - 40usize];
};
pub type ACPI_FPDT_BOOT = acpi_fpdt_boot;
#[doc = " GTDT - Generic Timer Description Table (ACPI 5.1)\n        Version 2\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_gtdt {
    pub Header: ACPI_TABLE_HEADER,
    pub CounterBlockAddresss: UINT64,
    pub Reserved: UINT32,
    pub SecureEl1Interrupt: UINT32,
    pub SecureEl1Flags: UINT32,
    pub NonSecureEl1Interrupt: UINT32,
    pub NonSecureEl1Flags: UINT32,
    pub VirtualTimerInterrupt: UINT32,
    pub VirtualTimerFlags: UINT32,
    pub NonSecureEl2Interrupt: UINT32,
    pub NonSecureEl2Flags: UINT32,
    pub CounterReadBlockAddress: UINT64,
    pub PlatformTimerCount: UINT32,
    pub PlatformTimerOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_gtdt"][::core::mem::size_of::<acpi_table_gtdt>() - 96usize];
    ["Alignment of acpi_table_gtdt"][::core::mem::align_of::<acpi_table_gtdt>() - 1usize];
    ["Offset of field: acpi_table_gtdt::Header"]
        [::core::mem::offset_of!(acpi_table_gtdt, Header) - 0usize];
    ["Offset of field: acpi_table_gtdt::CounterBlockAddresss"]
        [::core::mem::offset_of!(acpi_table_gtdt, CounterBlockAddresss) - 36usize];
    ["Offset of field: acpi_table_gtdt::Reserved"]
        [::core::mem::offset_of!(acpi_table_gtdt, Reserved) - 44usize];
    ["Offset of field: acpi_table_gtdt::SecureEl1Interrupt"]
        [::core::mem::offset_of!(acpi_table_gtdt, SecureEl1Interrupt) - 48usize];
    ["Offset of field: acpi_table_gtdt::SecureEl1Flags"]
        [::core::mem::offset_of!(acpi_table_gtdt, SecureEl1Flags) - 52usize];
    ["Offset of field: acpi_table_gtdt::NonSecureEl1Interrupt"]
        [::core::mem::offset_of!(acpi_table_gtdt, NonSecureEl1Interrupt) - 56usize];
    ["Offset of field: acpi_table_gtdt::NonSecureEl1Flags"]
        [::core::mem::offset_of!(acpi_table_gtdt, NonSecureEl1Flags) - 60usize];
    ["Offset of field: acpi_table_gtdt::VirtualTimerInterrupt"]
        [::core::mem::offset_of!(acpi_table_gtdt, VirtualTimerInterrupt) - 64usize];
    ["Offset of field: acpi_table_gtdt::VirtualTimerFlags"]
        [::core::mem::offset_of!(acpi_table_gtdt, VirtualTimerFlags) - 68usize];
    ["Offset of field: acpi_table_gtdt::NonSecureEl2Interrupt"]
        [::core::mem::offset_of!(acpi_table_gtdt, NonSecureEl2Interrupt) - 72usize];
    ["Offset of field: acpi_table_gtdt::NonSecureEl2Flags"]
        [::core::mem::offset_of!(acpi_table_gtdt, NonSecureEl2Flags) - 76usize];
    ["Offset of field: acpi_table_gtdt::CounterReadBlockAddress"]
        [::core::mem::offset_of!(acpi_table_gtdt, CounterReadBlockAddress) - 80usize];
    ["Offset of field: acpi_table_gtdt::PlatformTimerCount"]
        [::core::mem::offset_of!(acpi_table_gtdt, PlatformTimerCount) - 88usize];
    ["Offset of field: acpi_table_gtdt::PlatformTimerOffset"]
        [::core::mem::offset_of!(acpi_table_gtdt, PlatformTimerOffset) - 92usize];
};
#[doc = " GTDT - Generic Timer Description Table (ACPI 5.1)\n        Version 2\n"]
pub type ACPI_TABLE_GTDT = acpi_table_gtdt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_el2 {
    pub VirtualEL2TimerGsiv: UINT32,
    pub VirtualEL2TimerFlags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gtdt_el2"][::core::mem::size_of::<acpi_gtdt_el2>() - 8usize];
    ["Alignment of acpi_gtdt_el2"][::core::mem::align_of::<acpi_gtdt_el2>() - 1usize];
    ["Offset of field: acpi_gtdt_el2::VirtualEL2TimerGsiv"]
        [::core::mem::offset_of!(acpi_gtdt_el2, VirtualEL2TimerGsiv) - 0usize];
    ["Offset of field: acpi_gtdt_el2::VirtualEL2TimerFlags"]
        [::core::mem::offset_of!(acpi_gtdt_el2, VirtualEL2TimerFlags) - 4usize];
};
pub type ACPI_GTDT_EL2 = acpi_gtdt_el2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_header {
    pub Type: UINT8,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gtdt_header"][::core::mem::size_of::<acpi_gtdt_header>() - 3usize];
    ["Alignment of acpi_gtdt_header"][::core::mem::align_of::<acpi_gtdt_header>() - 1usize];
    ["Offset of field: acpi_gtdt_header::Type"]
        [::core::mem::offset_of!(acpi_gtdt_header, Type) - 0usize];
    ["Offset of field: acpi_gtdt_header::Length"]
        [::core::mem::offset_of!(acpi_gtdt_header, Length) - 1usize];
};
pub type ACPI_GTDT_HEADER = acpi_gtdt_header;
pub const AcpiGtdtType_ACPI_GTDT_TYPE_TIMER_BLOCK: AcpiGtdtType = 0;
pub const AcpiGtdtType_ACPI_GTDT_TYPE_WATCHDOG: AcpiGtdtType = 1;
pub const AcpiGtdtType_ACPI_GTDT_TYPE_RESERVED: AcpiGtdtType = 2;
pub type AcpiGtdtType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_timer_block {
    pub Header: ACPI_GTDT_HEADER,
    pub Reserved: UINT8,
    pub BlockAddress: UINT64,
    pub TimerCount: UINT32,
    pub TimerOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gtdt_timer_block"][::core::mem::size_of::<acpi_gtdt_timer_block>() - 20usize];
    ["Alignment of acpi_gtdt_timer_block"]
        [::core::mem::align_of::<acpi_gtdt_timer_block>() - 1usize];
    ["Offset of field: acpi_gtdt_timer_block::Header"]
        [::core::mem::offset_of!(acpi_gtdt_timer_block, Header) - 0usize];
    ["Offset of field: acpi_gtdt_timer_block::Reserved"]
        [::core::mem::offset_of!(acpi_gtdt_timer_block, Reserved) - 3usize];
    ["Offset of field: acpi_gtdt_timer_block::BlockAddress"]
        [::core::mem::offset_of!(acpi_gtdt_timer_block, BlockAddress) - 4usize];
    ["Offset of field: acpi_gtdt_timer_block::TimerCount"]
        [::core::mem::offset_of!(acpi_gtdt_timer_block, TimerCount) - 12usize];
    ["Offset of field: acpi_gtdt_timer_block::TimerOffset"]
        [::core::mem::offset_of!(acpi_gtdt_timer_block, TimerOffset) - 16usize];
};
pub type ACPI_GTDT_TIMER_BLOCK = acpi_gtdt_timer_block;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_timer_entry {
    pub FrameNumber: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub BaseAddress: UINT64,
    pub El0BaseAddress: UINT64,
    pub TimerInterrupt: UINT32,
    pub TimerFlags: UINT32,
    pub VirtualTimerInterrupt: UINT32,
    pub VirtualTimerFlags: UINT32,
    pub CommonFlags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gtdt_timer_entry"][::core::mem::size_of::<acpi_gtdt_timer_entry>() - 40usize];
    ["Alignment of acpi_gtdt_timer_entry"]
        [::core::mem::align_of::<acpi_gtdt_timer_entry>() - 1usize];
    ["Offset of field: acpi_gtdt_timer_entry::FrameNumber"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, FrameNumber) - 0usize];
    ["Offset of field: acpi_gtdt_timer_entry::Reserved"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, Reserved) - 1usize];
    ["Offset of field: acpi_gtdt_timer_entry::BaseAddress"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, BaseAddress) - 4usize];
    ["Offset of field: acpi_gtdt_timer_entry::El0BaseAddress"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, El0BaseAddress) - 12usize];
    ["Offset of field: acpi_gtdt_timer_entry::TimerInterrupt"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, TimerInterrupt) - 20usize];
    ["Offset of field: acpi_gtdt_timer_entry::TimerFlags"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, TimerFlags) - 24usize];
    ["Offset of field: acpi_gtdt_timer_entry::VirtualTimerInterrupt"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, VirtualTimerInterrupt) - 28usize];
    ["Offset of field: acpi_gtdt_timer_entry::VirtualTimerFlags"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, VirtualTimerFlags) - 32usize];
    ["Offset of field: acpi_gtdt_timer_entry::CommonFlags"]
        [::core::mem::offset_of!(acpi_gtdt_timer_entry, CommonFlags) - 36usize];
};
pub type ACPI_GTDT_TIMER_ENTRY = acpi_gtdt_timer_entry;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_watchdog {
    pub Header: ACPI_GTDT_HEADER,
    pub Reserved: UINT8,
    pub RefreshFrameAddress: UINT64,
    pub ControlFrameAddress: UINT64,
    pub TimerInterrupt: UINT32,
    pub TimerFlags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gtdt_watchdog"][::core::mem::size_of::<acpi_gtdt_watchdog>() - 28usize];
    ["Alignment of acpi_gtdt_watchdog"][::core::mem::align_of::<acpi_gtdt_watchdog>() - 1usize];
    ["Offset of field: acpi_gtdt_watchdog::Header"]
        [::core::mem::offset_of!(acpi_gtdt_watchdog, Header) - 0usize];
    ["Offset of field: acpi_gtdt_watchdog::Reserved"]
        [::core::mem::offset_of!(acpi_gtdt_watchdog, Reserved) - 3usize];
    ["Offset of field: acpi_gtdt_watchdog::RefreshFrameAddress"]
        [::core::mem::offset_of!(acpi_gtdt_watchdog, RefreshFrameAddress) - 4usize];
    ["Offset of field: acpi_gtdt_watchdog::ControlFrameAddress"]
        [::core::mem::offset_of!(acpi_gtdt_watchdog, ControlFrameAddress) - 12usize];
    ["Offset of field: acpi_gtdt_watchdog::TimerInterrupt"]
        [::core::mem::offset_of!(acpi_gtdt_watchdog, TimerInterrupt) - 20usize];
    ["Offset of field: acpi_gtdt_watchdog::TimerFlags"]
        [::core::mem::offset_of!(acpi_gtdt_watchdog, TimerFlags) - 24usize];
};
pub type ACPI_GTDT_WATCHDOG = acpi_gtdt_watchdog;
#[doc = " HEST - Hardware Error Source Table (ACPI 4.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_hest {
    pub Header: ACPI_TABLE_HEADER,
    pub ErrorSourceCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_hest"][::core::mem::size_of::<acpi_table_hest>() - 40usize];
    ["Alignment of acpi_table_hest"][::core::mem::align_of::<acpi_table_hest>() - 1usize];
    ["Offset of field: acpi_table_hest::Header"]
        [::core::mem::offset_of!(acpi_table_hest, Header) - 0usize];
    ["Offset of field: acpi_table_hest::ErrorSourceCount"]
        [::core::mem::offset_of!(acpi_table_hest, ErrorSourceCount) - 36usize];
};
#[doc = " HEST - Hardware Error Source Table (ACPI 4.0)\n        Version 1\n"]
pub type ACPI_TABLE_HEST = acpi_table_hest;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_header {
    pub Type: UINT16,
    pub SourceId: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_header"][::core::mem::size_of::<acpi_hest_header>() - 4usize];
    ["Alignment of acpi_hest_header"][::core::mem::align_of::<acpi_hest_header>() - 1usize];
    ["Offset of field: acpi_hest_header::Type"]
        [::core::mem::offset_of!(acpi_hest_header, Type) - 0usize];
    ["Offset of field: acpi_hest_header::SourceId"]
        [::core::mem::offset_of!(acpi_hest_header, SourceId) - 2usize];
};
pub type ACPI_HEST_HEADER = acpi_hest_header;
pub const AcpiHestTypes_ACPI_HEST_TYPE_IA32_CHECK: AcpiHestTypes = 0;
pub const AcpiHestTypes_ACPI_HEST_TYPE_IA32_CORRECTED_CHECK: AcpiHestTypes = 1;
pub const AcpiHestTypes_ACPI_HEST_TYPE_IA32_NMI: AcpiHestTypes = 2;
pub const AcpiHestTypes_ACPI_HEST_TYPE_NOT_USED3: AcpiHestTypes = 3;
pub const AcpiHestTypes_ACPI_HEST_TYPE_NOT_USED4: AcpiHestTypes = 4;
pub const AcpiHestTypes_ACPI_HEST_TYPE_NOT_USED5: AcpiHestTypes = 5;
pub const AcpiHestTypes_ACPI_HEST_TYPE_AER_ROOT_PORT: AcpiHestTypes = 6;
pub const AcpiHestTypes_ACPI_HEST_TYPE_AER_ENDPOINT: AcpiHestTypes = 7;
pub const AcpiHestTypes_ACPI_HEST_TYPE_AER_BRIDGE: AcpiHestTypes = 8;
pub const AcpiHestTypes_ACPI_HEST_TYPE_GENERIC_ERROR: AcpiHestTypes = 9;
pub const AcpiHestTypes_ACPI_HEST_TYPE_GENERIC_ERROR_V2: AcpiHestTypes = 10;
pub const AcpiHestTypes_ACPI_HEST_TYPE_IA32_DEFERRED_CHECK: AcpiHestTypes = 11;
pub const AcpiHestTypes_ACPI_HEST_TYPE_RESERVED: AcpiHestTypes = 12;
pub type AcpiHestTypes = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_error_bank {
    pub BankNumber: UINT8,
    pub ClearStatusOnInit: UINT8,
    pub StatusFormat: UINT8,
    pub Reserved: UINT8,
    pub ControlRegister: UINT32,
    pub ControlData: UINT64,
    pub StatusRegister: UINT32,
    pub AddressRegister: UINT32,
    pub MiscRegister: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_ia_error_bank"]
        [::core::mem::size_of::<acpi_hest_ia_error_bank>() - 28usize];
    ["Alignment of acpi_hest_ia_error_bank"]
        [::core::mem::align_of::<acpi_hest_ia_error_bank>() - 1usize];
    ["Offset of field: acpi_hest_ia_error_bank::BankNumber"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, BankNumber) - 0usize];
    ["Offset of field: acpi_hest_ia_error_bank::ClearStatusOnInit"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, ClearStatusOnInit) - 1usize];
    ["Offset of field: acpi_hest_ia_error_bank::StatusFormat"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, StatusFormat) - 2usize];
    ["Offset of field: acpi_hest_ia_error_bank::Reserved"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, Reserved) - 3usize];
    ["Offset of field: acpi_hest_ia_error_bank::ControlRegister"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, ControlRegister) - 4usize];
    ["Offset of field: acpi_hest_ia_error_bank::ControlData"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, ControlData) - 8usize];
    ["Offset of field: acpi_hest_ia_error_bank::StatusRegister"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, StatusRegister) - 16usize];
    ["Offset of field: acpi_hest_ia_error_bank::AddressRegister"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, AddressRegister) - 20usize];
    ["Offset of field: acpi_hest_ia_error_bank::MiscRegister"]
        [::core::mem::offset_of!(acpi_hest_ia_error_bank, MiscRegister) - 24usize];
};
pub type ACPI_HEST_IA_ERROR_BANK = acpi_hest_ia_error_bank;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer_common {
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub Bus: UINT32,
    pub Device: UINT16,
    pub Function: UINT16,
    pub DeviceControl: UINT16,
    pub Reserved2: UINT16,
    pub UncorrectableMask: UINT32,
    pub UncorrectableSeverity: UINT32,
    pub CorrectableMask: UINT32,
    pub AdvancedCapabilities: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_aer_common"][::core::mem::size_of::<acpi_hest_aer_common>() - 40usize];
    ["Alignment of acpi_hest_aer_common"][::core::mem::align_of::<acpi_hest_aer_common>() - 1usize];
    ["Offset of field: acpi_hest_aer_common::Reserved1"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Reserved1) - 0usize];
    ["Offset of field: acpi_hest_aer_common::Flags"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Flags) - 2usize];
    ["Offset of field: acpi_hest_aer_common::Enabled"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Enabled) - 3usize];
    ["Offset of field: acpi_hest_aer_common::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_aer_common, RecordsToPreallocate) - 4usize];
    ["Offset of field: acpi_hest_aer_common::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_aer_common, MaxSectionsPerRecord) - 8usize];
    ["Offset of field: acpi_hest_aer_common::Bus"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Bus) - 12usize];
    ["Offset of field: acpi_hest_aer_common::Device"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Device) - 16usize];
    ["Offset of field: acpi_hest_aer_common::Function"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Function) - 18usize];
    ["Offset of field: acpi_hest_aer_common::DeviceControl"]
        [::core::mem::offset_of!(acpi_hest_aer_common, DeviceControl) - 20usize];
    ["Offset of field: acpi_hest_aer_common::Reserved2"]
        [::core::mem::offset_of!(acpi_hest_aer_common, Reserved2) - 22usize];
    ["Offset of field: acpi_hest_aer_common::UncorrectableMask"]
        [::core::mem::offset_of!(acpi_hest_aer_common, UncorrectableMask) - 24usize];
    ["Offset of field: acpi_hest_aer_common::UncorrectableSeverity"]
        [::core::mem::offset_of!(acpi_hest_aer_common, UncorrectableSeverity) - 28usize];
    ["Offset of field: acpi_hest_aer_common::CorrectableMask"]
        [::core::mem::offset_of!(acpi_hest_aer_common, CorrectableMask) - 32usize];
    ["Offset of field: acpi_hest_aer_common::AdvancedCapabilities"]
        [::core::mem::offset_of!(acpi_hest_aer_common, AdvancedCapabilities) - 36usize];
};
pub type ACPI_HEST_AER_COMMON = acpi_hest_aer_common;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_notify {
    pub Type: UINT8,
    pub Length: UINT8,
    pub ConfigWriteEnable: UINT16,
    pub PollInterval: UINT32,
    pub Vector: UINT32,
    pub PollingThresholdValue: UINT32,
    pub PollingThresholdWindow: UINT32,
    pub ErrorThresholdValue: UINT32,
    pub ErrorThresholdWindow: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_notify"][::core::mem::size_of::<acpi_hest_notify>() - 28usize];
    ["Alignment of acpi_hest_notify"][::core::mem::align_of::<acpi_hest_notify>() - 1usize];
    ["Offset of field: acpi_hest_notify::Type"]
        [::core::mem::offset_of!(acpi_hest_notify, Type) - 0usize];
    ["Offset of field: acpi_hest_notify::Length"]
        [::core::mem::offset_of!(acpi_hest_notify, Length) - 1usize];
    ["Offset of field: acpi_hest_notify::ConfigWriteEnable"]
        [::core::mem::offset_of!(acpi_hest_notify, ConfigWriteEnable) - 2usize];
    ["Offset of field: acpi_hest_notify::PollInterval"]
        [::core::mem::offset_of!(acpi_hest_notify, PollInterval) - 4usize];
    ["Offset of field: acpi_hest_notify::Vector"]
        [::core::mem::offset_of!(acpi_hest_notify, Vector) - 8usize];
    ["Offset of field: acpi_hest_notify::PollingThresholdValue"]
        [::core::mem::offset_of!(acpi_hest_notify, PollingThresholdValue) - 12usize];
    ["Offset of field: acpi_hest_notify::PollingThresholdWindow"]
        [::core::mem::offset_of!(acpi_hest_notify, PollingThresholdWindow) - 16usize];
    ["Offset of field: acpi_hest_notify::ErrorThresholdValue"]
        [::core::mem::offset_of!(acpi_hest_notify, ErrorThresholdValue) - 20usize];
    ["Offset of field: acpi_hest_notify::ErrorThresholdWindow"]
        [::core::mem::offset_of!(acpi_hest_notify, ErrorThresholdWindow) - 24usize];
};
pub type ACPI_HEST_NOTIFY = acpi_hest_notify;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_POLLED: AcpiHestNotifyTypes = 0;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_EXTERNAL: AcpiHestNotifyTypes = 1;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_LOCAL: AcpiHestNotifyTypes = 2;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_SCI: AcpiHestNotifyTypes = 3;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_NMI: AcpiHestNotifyTypes = 4;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_CMCI: AcpiHestNotifyTypes = 5;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_MCE: AcpiHestNotifyTypes = 6;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_GPIO: AcpiHestNotifyTypes = 7;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_SEA: AcpiHestNotifyTypes = 8;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_SEI: AcpiHestNotifyTypes = 9;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_GSIV: AcpiHestNotifyTypes = 10;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_SOFTWARE_DELEGATED: AcpiHestNotifyTypes = 11;
pub const AcpiHestNotifyTypes_ACPI_HEST_NOTIFY_RESERVED: AcpiHestNotifyTypes = 12;
pub type AcpiHestNotifyTypes = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_machine_check {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub GlobalCapabilityData: UINT64,
    pub GlobalControlData: UINT64,
    pub NumHardwareBanks: UINT8,
    pub Reserved3: [UINT8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_ia_machine_check"]
        [::core::mem::size_of::<acpi_hest_ia_machine_check>() - 40usize];
    ["Alignment of acpi_hest_ia_machine_check"]
        [::core::mem::align_of::<acpi_hest_ia_machine_check>() - 1usize];
    ["Offset of field: acpi_hest_ia_machine_check::Header"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, Header) - 0usize];
    ["Offset of field: acpi_hest_ia_machine_check::Reserved1"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, Reserved1) - 4usize];
    ["Offset of field: acpi_hest_ia_machine_check::Flags"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, Flags) - 6usize];
    ["Offset of field: acpi_hest_ia_machine_check::Enabled"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, Enabled) - 7usize];
    ["Offset of field: acpi_hest_ia_machine_check::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, RecordsToPreallocate) - 8usize];
    ["Offset of field: acpi_hest_ia_machine_check::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, MaxSectionsPerRecord) - 12usize];
    ["Offset of field: acpi_hest_ia_machine_check::GlobalCapabilityData"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, GlobalCapabilityData) - 16usize];
    ["Offset of field: acpi_hest_ia_machine_check::GlobalControlData"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, GlobalControlData) - 24usize];
    ["Offset of field: acpi_hest_ia_machine_check::NumHardwareBanks"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, NumHardwareBanks) - 32usize];
    ["Offset of field: acpi_hest_ia_machine_check::Reserved3"]
        [::core::mem::offset_of!(acpi_hest_ia_machine_check, Reserved3) - 33usize];
};
pub type ACPI_HEST_IA_MACHINE_CHECK = acpi_hest_ia_machine_check;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_corrected {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub Notify: ACPI_HEST_NOTIFY,
    pub NumHardwareBanks: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_ia_corrected"][::core::mem::size_of::<acpi_hest_ia_corrected>() - 48usize];
    ["Alignment of acpi_hest_ia_corrected"]
        [::core::mem::align_of::<acpi_hest_ia_corrected>() - 1usize];
    ["Offset of field: acpi_hest_ia_corrected::Header"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, Header) - 0usize];
    ["Offset of field: acpi_hest_ia_corrected::Reserved1"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, Reserved1) - 4usize];
    ["Offset of field: acpi_hest_ia_corrected::Flags"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, Flags) - 6usize];
    ["Offset of field: acpi_hest_ia_corrected::Enabled"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, Enabled) - 7usize];
    ["Offset of field: acpi_hest_ia_corrected::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, RecordsToPreallocate) - 8usize];
    ["Offset of field: acpi_hest_ia_corrected::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, MaxSectionsPerRecord) - 12usize];
    ["Offset of field: acpi_hest_ia_corrected::Notify"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, Notify) - 16usize];
    ["Offset of field: acpi_hest_ia_corrected::NumHardwareBanks"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, NumHardwareBanks) - 44usize];
    ["Offset of field: acpi_hest_ia_corrected::Reserved2"]
        [::core::mem::offset_of!(acpi_hest_ia_corrected, Reserved2) - 45usize];
};
pub type ACPI_HEST_IA_CORRECTED = acpi_hest_ia_corrected;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_nmi {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved: UINT32,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub MaxRawDataLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_ia_nmi"][::core::mem::size_of::<acpi_hest_ia_nmi>() - 20usize];
    ["Alignment of acpi_hest_ia_nmi"][::core::mem::align_of::<acpi_hest_ia_nmi>() - 1usize];
    ["Offset of field: acpi_hest_ia_nmi::Header"]
        [::core::mem::offset_of!(acpi_hest_ia_nmi, Header) - 0usize];
    ["Offset of field: acpi_hest_ia_nmi::Reserved"]
        [::core::mem::offset_of!(acpi_hest_ia_nmi, Reserved) - 4usize];
    ["Offset of field: acpi_hest_ia_nmi::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_ia_nmi, RecordsToPreallocate) - 8usize];
    ["Offset of field: acpi_hest_ia_nmi::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_ia_nmi, MaxSectionsPerRecord) - 12usize];
    ["Offset of field: acpi_hest_ia_nmi::MaxRawDataLength"]
        [::core::mem::offset_of!(acpi_hest_ia_nmi, MaxRawDataLength) - 16usize];
};
pub type ACPI_HEST_IA_NMI = acpi_hest_ia_nmi;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer_root {
    pub Header: ACPI_HEST_HEADER,
    pub Aer: ACPI_HEST_AER_COMMON,
    pub RootErrorCommand: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_aer_root"][::core::mem::size_of::<acpi_hest_aer_root>() - 48usize];
    ["Alignment of acpi_hest_aer_root"][::core::mem::align_of::<acpi_hest_aer_root>() - 1usize];
    ["Offset of field: acpi_hest_aer_root::Header"]
        [::core::mem::offset_of!(acpi_hest_aer_root, Header) - 0usize];
    ["Offset of field: acpi_hest_aer_root::Aer"]
        [::core::mem::offset_of!(acpi_hest_aer_root, Aer) - 4usize];
    ["Offset of field: acpi_hest_aer_root::RootErrorCommand"]
        [::core::mem::offset_of!(acpi_hest_aer_root, RootErrorCommand) - 44usize];
};
pub type ACPI_HEST_AER_ROOT = acpi_hest_aer_root;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer {
    pub Header: ACPI_HEST_HEADER,
    pub Aer: ACPI_HEST_AER_COMMON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_aer"][::core::mem::size_of::<acpi_hest_aer>() - 44usize];
    ["Alignment of acpi_hest_aer"][::core::mem::align_of::<acpi_hest_aer>() - 1usize];
    ["Offset of field: acpi_hest_aer::Header"]
        [::core::mem::offset_of!(acpi_hest_aer, Header) - 0usize];
    ["Offset of field: acpi_hest_aer::Aer"][::core::mem::offset_of!(acpi_hest_aer, Aer) - 4usize];
};
pub type ACPI_HEST_AER = acpi_hest_aer;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer_bridge {
    pub Header: ACPI_HEST_HEADER,
    pub Aer: ACPI_HEST_AER_COMMON,
    pub UncorrectableMask2: UINT32,
    pub UncorrectableSeverity2: UINT32,
    pub AdvancedCapabilities2: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_aer_bridge"][::core::mem::size_of::<acpi_hest_aer_bridge>() - 56usize];
    ["Alignment of acpi_hest_aer_bridge"][::core::mem::align_of::<acpi_hest_aer_bridge>() - 1usize];
    ["Offset of field: acpi_hest_aer_bridge::Header"]
        [::core::mem::offset_of!(acpi_hest_aer_bridge, Header) - 0usize];
    ["Offset of field: acpi_hest_aer_bridge::Aer"]
        [::core::mem::offset_of!(acpi_hest_aer_bridge, Aer) - 4usize];
    ["Offset of field: acpi_hest_aer_bridge::UncorrectableMask2"]
        [::core::mem::offset_of!(acpi_hest_aer_bridge, UncorrectableMask2) - 44usize];
    ["Offset of field: acpi_hest_aer_bridge::UncorrectableSeverity2"]
        [::core::mem::offset_of!(acpi_hest_aer_bridge, UncorrectableSeverity2) - 48usize];
    ["Offset of field: acpi_hest_aer_bridge::AdvancedCapabilities2"]
        [::core::mem::offset_of!(acpi_hest_aer_bridge, AdvancedCapabilities2) - 52usize];
};
pub type ACPI_HEST_AER_BRIDGE = acpi_hest_aer_bridge;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic {
    pub Header: ACPI_HEST_HEADER,
    pub RelatedSourceId: UINT16,
    pub Reserved: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub MaxRawDataLength: UINT32,
    pub ErrorStatusAddress: ACPI_GENERIC_ADDRESS,
    pub Notify: ACPI_HEST_NOTIFY,
    pub ErrorBlockLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_generic"][::core::mem::size_of::<acpi_hest_generic>() - 64usize];
    ["Alignment of acpi_hest_generic"][::core::mem::align_of::<acpi_hest_generic>() - 1usize];
    ["Offset of field: acpi_hest_generic::Header"]
        [::core::mem::offset_of!(acpi_hest_generic, Header) - 0usize];
    ["Offset of field: acpi_hest_generic::RelatedSourceId"]
        [::core::mem::offset_of!(acpi_hest_generic, RelatedSourceId) - 4usize];
    ["Offset of field: acpi_hest_generic::Reserved"]
        [::core::mem::offset_of!(acpi_hest_generic, Reserved) - 6usize];
    ["Offset of field: acpi_hest_generic::Enabled"]
        [::core::mem::offset_of!(acpi_hest_generic, Enabled) - 7usize];
    ["Offset of field: acpi_hest_generic::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_generic, RecordsToPreallocate) - 8usize];
    ["Offset of field: acpi_hest_generic::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_generic, MaxSectionsPerRecord) - 12usize];
    ["Offset of field: acpi_hest_generic::MaxRawDataLength"]
        [::core::mem::offset_of!(acpi_hest_generic, MaxRawDataLength) - 16usize];
    ["Offset of field: acpi_hest_generic::ErrorStatusAddress"]
        [::core::mem::offset_of!(acpi_hest_generic, ErrorStatusAddress) - 20usize];
    ["Offset of field: acpi_hest_generic::Notify"]
        [::core::mem::offset_of!(acpi_hest_generic, Notify) - 32usize];
    ["Offset of field: acpi_hest_generic::ErrorBlockLength"]
        [::core::mem::offset_of!(acpi_hest_generic, ErrorBlockLength) - 60usize];
};
pub type ACPI_HEST_GENERIC = acpi_hest_generic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_v2 {
    pub Header: ACPI_HEST_HEADER,
    pub RelatedSourceId: UINT16,
    pub Reserved: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub MaxRawDataLength: UINT32,
    pub ErrorStatusAddress: ACPI_GENERIC_ADDRESS,
    pub Notify: ACPI_HEST_NOTIFY,
    pub ErrorBlockLength: UINT32,
    pub ReadAckRegister: ACPI_GENERIC_ADDRESS,
    pub ReadAckPreserve: UINT64,
    pub ReadAckWrite: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_generic_v2"][::core::mem::size_of::<acpi_hest_generic_v2>() - 92usize];
    ["Alignment of acpi_hest_generic_v2"][::core::mem::align_of::<acpi_hest_generic_v2>() - 1usize];
    ["Offset of field: acpi_hest_generic_v2::Header"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, Header) - 0usize];
    ["Offset of field: acpi_hest_generic_v2::RelatedSourceId"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, RelatedSourceId) - 4usize];
    ["Offset of field: acpi_hest_generic_v2::Reserved"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, Reserved) - 6usize];
    ["Offset of field: acpi_hest_generic_v2::Enabled"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, Enabled) - 7usize];
    ["Offset of field: acpi_hest_generic_v2::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, RecordsToPreallocate) - 8usize];
    ["Offset of field: acpi_hest_generic_v2::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, MaxSectionsPerRecord) - 12usize];
    ["Offset of field: acpi_hest_generic_v2::MaxRawDataLength"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, MaxRawDataLength) - 16usize];
    ["Offset of field: acpi_hest_generic_v2::ErrorStatusAddress"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, ErrorStatusAddress) - 20usize];
    ["Offset of field: acpi_hest_generic_v2::Notify"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, Notify) - 32usize];
    ["Offset of field: acpi_hest_generic_v2::ErrorBlockLength"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, ErrorBlockLength) - 60usize];
    ["Offset of field: acpi_hest_generic_v2::ReadAckRegister"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, ReadAckRegister) - 64usize];
    ["Offset of field: acpi_hest_generic_v2::ReadAckPreserve"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, ReadAckPreserve) - 76usize];
    ["Offset of field: acpi_hest_generic_v2::ReadAckWrite"]
        [::core::mem::offset_of!(acpi_hest_generic_v2, ReadAckWrite) - 84usize];
};
pub type ACPI_HEST_GENERIC_V2 = acpi_hest_generic_v2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_status {
    pub BlockStatus: UINT32,
    pub RawDataOffset: UINT32,
    pub RawDataLength: UINT32,
    pub DataLength: UINT32,
    pub ErrorSeverity: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_generic_status"]
        [::core::mem::size_of::<acpi_hest_generic_status>() - 20usize];
    ["Alignment of acpi_hest_generic_status"]
        [::core::mem::align_of::<acpi_hest_generic_status>() - 1usize];
    ["Offset of field: acpi_hest_generic_status::BlockStatus"]
        [::core::mem::offset_of!(acpi_hest_generic_status, BlockStatus) - 0usize];
    ["Offset of field: acpi_hest_generic_status::RawDataOffset"]
        [::core::mem::offset_of!(acpi_hest_generic_status, RawDataOffset) - 4usize];
    ["Offset of field: acpi_hest_generic_status::RawDataLength"]
        [::core::mem::offset_of!(acpi_hest_generic_status, RawDataLength) - 8usize];
    ["Offset of field: acpi_hest_generic_status::DataLength"]
        [::core::mem::offset_of!(acpi_hest_generic_status, DataLength) - 12usize];
    ["Offset of field: acpi_hest_generic_status::ErrorSeverity"]
        [::core::mem::offset_of!(acpi_hest_generic_status, ErrorSeverity) - 16usize];
};
pub type ACPI_HEST_GENERIC_STATUS = acpi_hest_generic_status;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_data {
    pub SectionType: [UINT8; 16usize],
    pub ErrorSeverity: UINT32,
    pub Revision: UINT16,
    pub ValidationBits: UINT8,
    pub Flags: UINT8,
    pub ErrorDataLength: UINT32,
    pub FruId: [UINT8; 16usize],
    pub FruText: [UINT8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_generic_data"][::core::mem::size_of::<acpi_hest_generic_data>() - 64usize];
    ["Alignment of acpi_hest_generic_data"]
        [::core::mem::align_of::<acpi_hest_generic_data>() - 1usize];
    ["Offset of field: acpi_hest_generic_data::SectionType"]
        [::core::mem::offset_of!(acpi_hest_generic_data, SectionType) - 0usize];
    ["Offset of field: acpi_hest_generic_data::ErrorSeverity"]
        [::core::mem::offset_of!(acpi_hest_generic_data, ErrorSeverity) - 16usize];
    ["Offset of field: acpi_hest_generic_data::Revision"]
        [::core::mem::offset_of!(acpi_hest_generic_data, Revision) - 20usize];
    ["Offset of field: acpi_hest_generic_data::ValidationBits"]
        [::core::mem::offset_of!(acpi_hest_generic_data, ValidationBits) - 22usize];
    ["Offset of field: acpi_hest_generic_data::Flags"]
        [::core::mem::offset_of!(acpi_hest_generic_data, Flags) - 23usize];
    ["Offset of field: acpi_hest_generic_data::ErrorDataLength"]
        [::core::mem::offset_of!(acpi_hest_generic_data, ErrorDataLength) - 24usize];
    ["Offset of field: acpi_hest_generic_data::FruId"]
        [::core::mem::offset_of!(acpi_hest_generic_data, FruId) - 28usize];
    ["Offset of field: acpi_hest_generic_data::FruText"]
        [::core::mem::offset_of!(acpi_hest_generic_data, FruText) - 44usize];
};
pub type ACPI_HEST_GENERIC_DATA = acpi_hest_generic_data;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_data_v300 {
    pub SectionType: [UINT8; 16usize],
    pub ErrorSeverity: UINT32,
    pub Revision: UINT16,
    pub ValidationBits: UINT8,
    pub Flags: UINT8,
    pub ErrorDataLength: UINT32,
    pub FruId: [UINT8; 16usize],
    pub FruText: [UINT8; 20usize],
    pub TimeStamp: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_generic_data_v300"]
        [::core::mem::size_of::<acpi_hest_generic_data_v300>() - 72usize];
    ["Alignment of acpi_hest_generic_data_v300"]
        [::core::mem::align_of::<acpi_hest_generic_data_v300>() - 1usize];
    ["Offset of field: acpi_hest_generic_data_v300::SectionType"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, SectionType) - 0usize];
    ["Offset of field: acpi_hest_generic_data_v300::ErrorSeverity"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, ErrorSeverity) - 16usize];
    ["Offset of field: acpi_hest_generic_data_v300::Revision"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, Revision) - 20usize];
    ["Offset of field: acpi_hest_generic_data_v300::ValidationBits"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, ValidationBits) - 22usize];
    ["Offset of field: acpi_hest_generic_data_v300::Flags"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, Flags) - 23usize];
    ["Offset of field: acpi_hest_generic_data_v300::ErrorDataLength"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, ErrorDataLength) - 24usize];
    ["Offset of field: acpi_hest_generic_data_v300::FruId"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, FruId) - 28usize];
    ["Offset of field: acpi_hest_generic_data_v300::FruText"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, FruText) - 44usize];
    ["Offset of field: acpi_hest_generic_data_v300::TimeStamp"]
        [::core::mem::offset_of!(acpi_hest_generic_data_v300, TimeStamp) - 64usize];
};
pub type ACPI_HEST_GENERIC_DATA_V300 = acpi_hest_generic_data_v300;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_deferred_check {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub Notify: ACPI_HEST_NOTIFY,
    pub NumHardwareBanks: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hest_ia_deferred_check"]
        [::core::mem::size_of::<acpi_hest_ia_deferred_check>() - 48usize];
    ["Alignment of acpi_hest_ia_deferred_check"]
        [::core::mem::align_of::<acpi_hest_ia_deferred_check>() - 1usize];
    ["Offset of field: acpi_hest_ia_deferred_check::Header"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, Header) - 0usize];
    ["Offset of field: acpi_hest_ia_deferred_check::Reserved1"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, Reserved1) - 4usize];
    ["Offset of field: acpi_hest_ia_deferred_check::Flags"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, Flags) - 6usize];
    ["Offset of field: acpi_hest_ia_deferred_check::Enabled"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, Enabled) - 7usize];
    ["Offset of field: acpi_hest_ia_deferred_check::RecordsToPreallocate"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, RecordsToPreallocate) - 8usize];
    ["Offset of field: acpi_hest_ia_deferred_check::MaxSectionsPerRecord"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, MaxSectionsPerRecord) - 12usize];
    ["Offset of field: acpi_hest_ia_deferred_check::Notify"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, Notify) - 16usize];
    ["Offset of field: acpi_hest_ia_deferred_check::NumHardwareBanks"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, NumHardwareBanks) - 44usize];
    ["Offset of field: acpi_hest_ia_deferred_check::Reserved2"]
        [::core::mem::offset_of!(acpi_hest_ia_deferred_check, Reserved2) - 45usize];
};
pub type ACPI_HEST_IA_DEFERRED_CHECK = acpi_hest_ia_deferred_check;
#[doc = " HMAT - Heterogeneous Memory Attributes Table (ACPI 6.3)\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_hmat {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_hmat"][::core::mem::size_of::<acpi_table_hmat>() - 40usize];
    ["Alignment of acpi_table_hmat"][::core::mem::align_of::<acpi_table_hmat>() - 1usize];
    ["Offset of field: acpi_table_hmat::Header"]
        [::core::mem::offset_of!(acpi_table_hmat, Header) - 0usize];
    ["Offset of field: acpi_table_hmat::Reserved"]
        [::core::mem::offset_of!(acpi_table_hmat, Reserved) - 36usize];
};
#[doc = " HMAT - Heterogeneous Memory Attributes Table (ACPI 6.3)\n"]
pub type ACPI_TABLE_HMAT = acpi_table_hmat;
pub const AcpiHmatType_ACPI_HMAT_TYPE_ADDRESS_RANGE: AcpiHmatType = 0;
pub const AcpiHmatType_ACPI_HMAT_TYPE_LOCALITY: AcpiHmatType = 1;
pub const AcpiHmatType_ACPI_HMAT_TYPE_CACHE: AcpiHmatType = 2;
pub const AcpiHmatType_ACPI_HMAT_TYPE_RESERVED: AcpiHmatType = 3;
pub type AcpiHmatType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_structure {
    pub Type: UINT16,
    pub Reserved: UINT16,
    pub Length: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hmat_structure"][::core::mem::size_of::<acpi_hmat_structure>() - 8usize];
    ["Alignment of acpi_hmat_structure"][::core::mem::align_of::<acpi_hmat_structure>() - 1usize];
    ["Offset of field: acpi_hmat_structure::Type"]
        [::core::mem::offset_of!(acpi_hmat_structure, Type) - 0usize];
    ["Offset of field: acpi_hmat_structure::Reserved"]
        [::core::mem::offset_of!(acpi_hmat_structure, Reserved) - 2usize];
    ["Offset of field: acpi_hmat_structure::Length"]
        [::core::mem::offset_of!(acpi_hmat_structure, Length) - 4usize];
};
pub type ACPI_HMAT_STRUCTURE = acpi_hmat_structure;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_proximity_domain {
    pub Header: ACPI_HMAT_STRUCTURE,
    pub Flags: UINT16,
    pub Reserved1: UINT16,
    pub InitiatorPD: UINT32,
    pub MemoryPD: UINT32,
    pub Reserved2: UINT32,
    pub Reserved3: UINT64,
    pub Reserved4: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hmat_proximity_domain"]
        [::core::mem::size_of::<acpi_hmat_proximity_domain>() - 40usize];
    ["Alignment of acpi_hmat_proximity_domain"]
        [::core::mem::align_of::<acpi_hmat_proximity_domain>() - 1usize];
    ["Offset of field: acpi_hmat_proximity_domain::Header"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, Header) - 0usize];
    ["Offset of field: acpi_hmat_proximity_domain::Flags"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, Flags) - 8usize];
    ["Offset of field: acpi_hmat_proximity_domain::Reserved1"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, Reserved1) - 10usize];
    ["Offset of field: acpi_hmat_proximity_domain::InitiatorPD"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, InitiatorPD) - 12usize];
    ["Offset of field: acpi_hmat_proximity_domain::MemoryPD"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, MemoryPD) - 16usize];
    ["Offset of field: acpi_hmat_proximity_domain::Reserved2"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, Reserved2) - 20usize];
    ["Offset of field: acpi_hmat_proximity_domain::Reserved3"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, Reserved3) - 24usize];
    ["Offset of field: acpi_hmat_proximity_domain::Reserved4"]
        [::core::mem::offset_of!(acpi_hmat_proximity_domain, Reserved4) - 32usize];
};
pub type ACPI_HMAT_PROXIMITY_DOMAIN = acpi_hmat_proximity_domain;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_locality {
    pub Header: ACPI_HMAT_STRUCTURE,
    pub Flags: UINT8,
    pub DataType: UINT8,
    pub MinTransferSize: UINT8,
    pub Reserved1: UINT8,
    pub NumberOfInitiatorPDs: UINT32,
    pub NumberOfTargetPDs: UINT32,
    pub Reserved2: UINT32,
    pub EntryBaseUnit: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hmat_locality"][::core::mem::size_of::<acpi_hmat_locality>() - 32usize];
    ["Alignment of acpi_hmat_locality"][::core::mem::align_of::<acpi_hmat_locality>() - 1usize];
    ["Offset of field: acpi_hmat_locality::Header"]
        [::core::mem::offset_of!(acpi_hmat_locality, Header) - 0usize];
    ["Offset of field: acpi_hmat_locality::Flags"]
        [::core::mem::offset_of!(acpi_hmat_locality, Flags) - 8usize];
    ["Offset of field: acpi_hmat_locality::DataType"]
        [::core::mem::offset_of!(acpi_hmat_locality, DataType) - 9usize];
    ["Offset of field: acpi_hmat_locality::MinTransferSize"]
        [::core::mem::offset_of!(acpi_hmat_locality, MinTransferSize) - 10usize];
    ["Offset of field: acpi_hmat_locality::Reserved1"]
        [::core::mem::offset_of!(acpi_hmat_locality, Reserved1) - 11usize];
    ["Offset of field: acpi_hmat_locality::NumberOfInitiatorPDs"]
        [::core::mem::offset_of!(acpi_hmat_locality, NumberOfInitiatorPDs) - 12usize];
    ["Offset of field: acpi_hmat_locality::NumberOfTargetPDs"]
        [::core::mem::offset_of!(acpi_hmat_locality, NumberOfTargetPDs) - 16usize];
    ["Offset of field: acpi_hmat_locality::Reserved2"]
        [::core::mem::offset_of!(acpi_hmat_locality, Reserved2) - 20usize];
    ["Offset of field: acpi_hmat_locality::EntryBaseUnit"]
        [::core::mem::offset_of!(acpi_hmat_locality, EntryBaseUnit) - 24usize];
};
pub type ACPI_HMAT_LOCALITY = acpi_hmat_locality;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_cache {
    pub Header: ACPI_HMAT_STRUCTURE,
    pub MemoryPD: UINT32,
    pub Reserved1: UINT32,
    pub CacheSize: UINT64,
    pub CacheAttributes: UINT32,
    pub AddressMode: UINT16,
    pub NumberOfSMBIOSHandles: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_hmat_cache"][::core::mem::size_of::<acpi_hmat_cache>() - 32usize];
    ["Alignment of acpi_hmat_cache"][::core::mem::align_of::<acpi_hmat_cache>() - 1usize];
    ["Offset of field: acpi_hmat_cache::Header"]
        [::core::mem::offset_of!(acpi_hmat_cache, Header) - 0usize];
    ["Offset of field: acpi_hmat_cache::MemoryPD"]
        [::core::mem::offset_of!(acpi_hmat_cache, MemoryPD) - 8usize];
    ["Offset of field: acpi_hmat_cache::Reserved1"]
        [::core::mem::offset_of!(acpi_hmat_cache, Reserved1) - 12usize];
    ["Offset of field: acpi_hmat_cache::CacheSize"]
        [::core::mem::offset_of!(acpi_hmat_cache, CacheSize) - 16usize];
    ["Offset of field: acpi_hmat_cache::CacheAttributes"]
        [::core::mem::offset_of!(acpi_hmat_cache, CacheAttributes) - 24usize];
    ["Offset of field: acpi_hmat_cache::AddressMode"]
        [::core::mem::offset_of!(acpi_hmat_cache, AddressMode) - 28usize];
    ["Offset of field: acpi_hmat_cache::NumberOfSMBIOSHandles"]
        [::core::mem::offset_of!(acpi_hmat_cache, NumberOfSMBIOSHandles) - 30usize];
};
pub type ACPI_HMAT_CACHE = acpi_hmat_cache;
#[doc = " HPET - High Precision Event Timer table\n        Version 1\n\n Conforms to \"IA-PC HPET (High Precision Event Timers) Specification\",\n Version 1.0a, October 2004\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_hpet {
    pub Header: ACPI_TABLE_HEADER,
    pub Id: UINT32,
    pub Address: ACPI_GENERIC_ADDRESS,
    pub Sequence: UINT8,
    pub MinimumTick: UINT16,
    pub Flags: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_hpet"][::core::mem::size_of::<acpi_table_hpet>() - 56usize];
    ["Alignment of acpi_table_hpet"][::core::mem::align_of::<acpi_table_hpet>() - 1usize];
    ["Offset of field: acpi_table_hpet::Header"]
        [::core::mem::offset_of!(acpi_table_hpet, Header) - 0usize];
    ["Offset of field: acpi_table_hpet::Id"]
        [::core::mem::offset_of!(acpi_table_hpet, Id) - 36usize];
    ["Offset of field: acpi_table_hpet::Address"]
        [::core::mem::offset_of!(acpi_table_hpet, Address) - 40usize];
    ["Offset of field: acpi_table_hpet::Sequence"]
        [::core::mem::offset_of!(acpi_table_hpet, Sequence) - 52usize];
    ["Offset of field: acpi_table_hpet::MinimumTick"]
        [::core::mem::offset_of!(acpi_table_hpet, MinimumTick) - 53usize];
    ["Offset of field: acpi_table_hpet::Flags"]
        [::core::mem::offset_of!(acpi_table_hpet, Flags) - 55usize];
};
#[doc = " HPET - High Precision Event Timer table\n        Version 1\n\n Conforms to \"IA-PC HPET (High Precision Event Timers) Specification\",\n Version 1.0a, October 2004\n"]
pub type ACPI_TABLE_HPET = acpi_table_hpet;
pub const AcpiHpetPageProtect_ACPI_HPET_NO_PAGE_PROTECT: AcpiHpetPageProtect = 0;
pub const AcpiHpetPageProtect_ACPI_HPET_PAGE_PROTECT4: AcpiHpetPageProtect = 1;
pub const AcpiHpetPageProtect_ACPI_HPET_PAGE_PROTECT64: AcpiHpetPageProtect = 2;
pub type AcpiHpetPageProtect = ::core::ffi::c_uint;
#[doc = " IBFT - Boot Firmware Table\n        Version 1\n\n Conforms to \"iSCSI Boot Firmware Table (iBFT) as Defined in ACPI 3.0b\n Specification\", Version 1.01, March 1, 2007\n\n Note: It appears that this table is not intended to appear in the RSDT/XSDT.\n Therefore, it is not currently supported by the disassembler.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ibft {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: [UINT8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_ibft"][::core::mem::size_of::<acpi_table_ibft>() - 48usize];
    ["Alignment of acpi_table_ibft"][::core::mem::align_of::<acpi_table_ibft>() - 1usize];
    ["Offset of field: acpi_table_ibft::Header"]
        [::core::mem::offset_of!(acpi_table_ibft, Header) - 0usize];
    ["Offset of field: acpi_table_ibft::Reserved"]
        [::core::mem::offset_of!(acpi_table_ibft, Reserved) - 36usize];
};
#[doc = " IBFT - Boot Firmware Table\n        Version 1\n\n Conforms to \"iSCSI Boot Firmware Table (iBFT) as Defined in ACPI 3.0b\n Specification\", Version 1.01, March 1, 2007\n\n Note: It appears that this table is not intended to appear in the RSDT/XSDT.\n Therefore, it is not currently supported by the disassembler.\n"]
pub type ACPI_TABLE_IBFT = acpi_table_ibft;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_header {
    pub Type: UINT8,
    pub Version: UINT8,
    pub Length: UINT16,
    pub Index: UINT8,
    pub Flags: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ibft_header"][::core::mem::size_of::<acpi_ibft_header>() - 6usize];
    ["Alignment of acpi_ibft_header"][::core::mem::align_of::<acpi_ibft_header>() - 1usize];
    ["Offset of field: acpi_ibft_header::Type"]
        [::core::mem::offset_of!(acpi_ibft_header, Type) - 0usize];
    ["Offset of field: acpi_ibft_header::Version"]
        [::core::mem::offset_of!(acpi_ibft_header, Version) - 1usize];
    ["Offset of field: acpi_ibft_header::Length"]
        [::core::mem::offset_of!(acpi_ibft_header, Length) - 2usize];
    ["Offset of field: acpi_ibft_header::Index"]
        [::core::mem::offset_of!(acpi_ibft_header, Index) - 4usize];
    ["Offset of field: acpi_ibft_header::Flags"]
        [::core::mem::offset_of!(acpi_ibft_header, Flags) - 5usize];
};
pub type ACPI_IBFT_HEADER = acpi_ibft_header;
pub const AcpiIbftType_ACPI_IBFT_TYPE_NOT_USED: AcpiIbftType = 0;
pub const AcpiIbftType_ACPI_IBFT_TYPE_CONTROL: AcpiIbftType = 1;
pub const AcpiIbftType_ACPI_IBFT_TYPE_INITIATOR: AcpiIbftType = 2;
pub const AcpiIbftType_ACPI_IBFT_TYPE_NIC: AcpiIbftType = 3;
pub const AcpiIbftType_ACPI_IBFT_TYPE_TARGET: AcpiIbftType = 4;
pub const AcpiIbftType_ACPI_IBFT_TYPE_EXTENSIONS: AcpiIbftType = 5;
pub const AcpiIbftType_ACPI_IBFT_TYPE_RESERVED: AcpiIbftType = 6;
pub type AcpiIbftType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_control {
    pub Header: ACPI_IBFT_HEADER,
    pub Extensions: UINT16,
    pub InitiatorOffset: UINT16,
    pub Nic0Offset: UINT16,
    pub Target0Offset: UINT16,
    pub Nic1Offset: UINT16,
    pub Target1Offset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ibft_control"][::core::mem::size_of::<acpi_ibft_control>() - 18usize];
    ["Alignment of acpi_ibft_control"][::core::mem::align_of::<acpi_ibft_control>() - 1usize];
    ["Offset of field: acpi_ibft_control::Header"]
        [::core::mem::offset_of!(acpi_ibft_control, Header) - 0usize];
    ["Offset of field: acpi_ibft_control::Extensions"]
        [::core::mem::offset_of!(acpi_ibft_control, Extensions) - 6usize];
    ["Offset of field: acpi_ibft_control::InitiatorOffset"]
        [::core::mem::offset_of!(acpi_ibft_control, InitiatorOffset) - 8usize];
    ["Offset of field: acpi_ibft_control::Nic0Offset"]
        [::core::mem::offset_of!(acpi_ibft_control, Nic0Offset) - 10usize];
    ["Offset of field: acpi_ibft_control::Target0Offset"]
        [::core::mem::offset_of!(acpi_ibft_control, Target0Offset) - 12usize];
    ["Offset of field: acpi_ibft_control::Nic1Offset"]
        [::core::mem::offset_of!(acpi_ibft_control, Nic1Offset) - 14usize];
    ["Offset of field: acpi_ibft_control::Target1Offset"]
        [::core::mem::offset_of!(acpi_ibft_control, Target1Offset) - 16usize];
};
pub type ACPI_IBFT_CONTROL = acpi_ibft_control;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_initiator {
    pub Header: ACPI_IBFT_HEADER,
    pub SnsServer: [UINT8; 16usize],
    pub SlpServer: [UINT8; 16usize],
    pub PrimaryServer: [UINT8; 16usize],
    pub SecondaryServer: [UINT8; 16usize],
    pub NameLength: UINT16,
    pub NameOffset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ibft_initiator"][::core::mem::size_of::<acpi_ibft_initiator>() - 74usize];
    ["Alignment of acpi_ibft_initiator"][::core::mem::align_of::<acpi_ibft_initiator>() - 1usize];
    ["Offset of field: acpi_ibft_initiator::Header"]
        [::core::mem::offset_of!(acpi_ibft_initiator, Header) - 0usize];
    ["Offset of field: acpi_ibft_initiator::SnsServer"]
        [::core::mem::offset_of!(acpi_ibft_initiator, SnsServer) - 6usize];
    ["Offset of field: acpi_ibft_initiator::SlpServer"]
        [::core::mem::offset_of!(acpi_ibft_initiator, SlpServer) - 22usize];
    ["Offset of field: acpi_ibft_initiator::PrimaryServer"]
        [::core::mem::offset_of!(acpi_ibft_initiator, PrimaryServer) - 38usize];
    ["Offset of field: acpi_ibft_initiator::SecondaryServer"]
        [::core::mem::offset_of!(acpi_ibft_initiator, SecondaryServer) - 54usize];
    ["Offset of field: acpi_ibft_initiator::NameLength"]
        [::core::mem::offset_of!(acpi_ibft_initiator, NameLength) - 70usize];
    ["Offset of field: acpi_ibft_initiator::NameOffset"]
        [::core::mem::offset_of!(acpi_ibft_initiator, NameOffset) - 72usize];
};
pub type ACPI_IBFT_INITIATOR = acpi_ibft_initiator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_nic {
    pub Header: ACPI_IBFT_HEADER,
    pub IpAddress: [UINT8; 16usize],
    pub SubnetMaskPrefix: UINT8,
    pub Origin: UINT8,
    pub Gateway: [UINT8; 16usize],
    pub PrimaryDns: [UINT8; 16usize],
    pub SecondaryDns: [UINT8; 16usize],
    pub Dhcp: [UINT8; 16usize],
    pub Vlan: UINT16,
    pub MacAddress: [UINT8; 6usize],
    pub PciAddress: UINT16,
    pub NameLength: UINT16,
    pub NameOffset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ibft_nic"][::core::mem::size_of::<acpi_ibft_nic>() - 102usize];
    ["Alignment of acpi_ibft_nic"][::core::mem::align_of::<acpi_ibft_nic>() - 1usize];
    ["Offset of field: acpi_ibft_nic::Header"]
        [::core::mem::offset_of!(acpi_ibft_nic, Header) - 0usize];
    ["Offset of field: acpi_ibft_nic::IpAddress"]
        [::core::mem::offset_of!(acpi_ibft_nic, IpAddress) - 6usize];
    ["Offset of field: acpi_ibft_nic::SubnetMaskPrefix"]
        [::core::mem::offset_of!(acpi_ibft_nic, SubnetMaskPrefix) - 22usize];
    ["Offset of field: acpi_ibft_nic::Origin"]
        [::core::mem::offset_of!(acpi_ibft_nic, Origin) - 23usize];
    ["Offset of field: acpi_ibft_nic::Gateway"]
        [::core::mem::offset_of!(acpi_ibft_nic, Gateway) - 24usize];
    ["Offset of field: acpi_ibft_nic::PrimaryDns"]
        [::core::mem::offset_of!(acpi_ibft_nic, PrimaryDns) - 40usize];
    ["Offset of field: acpi_ibft_nic::SecondaryDns"]
        [::core::mem::offset_of!(acpi_ibft_nic, SecondaryDns) - 56usize];
    ["Offset of field: acpi_ibft_nic::Dhcp"]
        [::core::mem::offset_of!(acpi_ibft_nic, Dhcp) - 72usize];
    ["Offset of field: acpi_ibft_nic::Vlan"]
        [::core::mem::offset_of!(acpi_ibft_nic, Vlan) - 88usize];
    ["Offset of field: acpi_ibft_nic::MacAddress"]
        [::core::mem::offset_of!(acpi_ibft_nic, MacAddress) - 90usize];
    ["Offset of field: acpi_ibft_nic::PciAddress"]
        [::core::mem::offset_of!(acpi_ibft_nic, PciAddress) - 96usize];
    ["Offset of field: acpi_ibft_nic::NameLength"]
        [::core::mem::offset_of!(acpi_ibft_nic, NameLength) - 98usize];
    ["Offset of field: acpi_ibft_nic::NameOffset"]
        [::core::mem::offset_of!(acpi_ibft_nic, NameOffset) - 100usize];
};
pub type ACPI_IBFT_NIC = acpi_ibft_nic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_target {
    pub Header: ACPI_IBFT_HEADER,
    pub TargetIpAddress: [UINT8; 16usize],
    pub TargetIpSocket: UINT16,
    pub TargetBootLun: [UINT8; 8usize],
    pub ChapType: UINT8,
    pub NicAssociation: UINT8,
    pub TargetNameLength: UINT16,
    pub TargetNameOffset: UINT16,
    pub ChapNameLength: UINT16,
    pub ChapNameOffset: UINT16,
    pub ChapSecretLength: UINT16,
    pub ChapSecretOffset: UINT16,
    pub ReverseChapNameLength: UINT16,
    pub ReverseChapNameOffset: UINT16,
    pub ReverseChapSecretLength: UINT16,
    pub ReverseChapSecretOffset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ibft_target"][::core::mem::size_of::<acpi_ibft_target>() - 54usize];
    ["Alignment of acpi_ibft_target"][::core::mem::align_of::<acpi_ibft_target>() - 1usize];
    ["Offset of field: acpi_ibft_target::Header"]
        [::core::mem::offset_of!(acpi_ibft_target, Header) - 0usize];
    ["Offset of field: acpi_ibft_target::TargetIpAddress"]
        [::core::mem::offset_of!(acpi_ibft_target, TargetIpAddress) - 6usize];
    ["Offset of field: acpi_ibft_target::TargetIpSocket"]
        [::core::mem::offset_of!(acpi_ibft_target, TargetIpSocket) - 22usize];
    ["Offset of field: acpi_ibft_target::TargetBootLun"]
        [::core::mem::offset_of!(acpi_ibft_target, TargetBootLun) - 24usize];
    ["Offset of field: acpi_ibft_target::ChapType"]
        [::core::mem::offset_of!(acpi_ibft_target, ChapType) - 32usize];
    ["Offset of field: acpi_ibft_target::NicAssociation"]
        [::core::mem::offset_of!(acpi_ibft_target, NicAssociation) - 33usize];
    ["Offset of field: acpi_ibft_target::TargetNameLength"]
        [::core::mem::offset_of!(acpi_ibft_target, TargetNameLength) - 34usize];
    ["Offset of field: acpi_ibft_target::TargetNameOffset"]
        [::core::mem::offset_of!(acpi_ibft_target, TargetNameOffset) - 36usize];
    ["Offset of field: acpi_ibft_target::ChapNameLength"]
        [::core::mem::offset_of!(acpi_ibft_target, ChapNameLength) - 38usize];
    ["Offset of field: acpi_ibft_target::ChapNameOffset"]
        [::core::mem::offset_of!(acpi_ibft_target, ChapNameOffset) - 40usize];
    ["Offset of field: acpi_ibft_target::ChapSecretLength"]
        [::core::mem::offset_of!(acpi_ibft_target, ChapSecretLength) - 42usize];
    ["Offset of field: acpi_ibft_target::ChapSecretOffset"]
        [::core::mem::offset_of!(acpi_ibft_target, ChapSecretOffset) - 44usize];
    ["Offset of field: acpi_ibft_target::ReverseChapNameLength"]
        [::core::mem::offset_of!(acpi_ibft_target, ReverseChapNameLength) - 46usize];
    ["Offset of field: acpi_ibft_target::ReverseChapNameOffset"]
        [::core::mem::offset_of!(acpi_ibft_target, ReverseChapNameOffset) - 48usize];
    ["Offset of field: acpi_ibft_target::ReverseChapSecretLength"]
        [::core::mem::offset_of!(acpi_ibft_target, ReverseChapSecretLength) - 50usize];
    ["Offset of field: acpi_ibft_target::ReverseChapSecretOffset"]
        [::core::mem::offset_of!(acpi_ibft_target, ReverseChapSecretOffset) - 52usize];
};
pub type ACPI_IBFT_TARGET = acpi_ibft_target;
#[doc = " AEST - Arm Error Source Table\n\n Conforms to: ACPI for the Armv8 RAS Extensions 1.1 Platform Design Document\n September 2020.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_aest {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_aest"][::core::mem::size_of::<acpi_table_aest>() - 36usize];
    ["Alignment of acpi_table_aest"][::core::mem::align_of::<acpi_table_aest>() - 1usize];
    ["Offset of field: acpi_table_aest::Header"]
        [::core::mem::offset_of!(acpi_table_aest, Header) - 0usize];
};
#[doc = " AEST - Arm Error Source Table\n\n Conforms to: ACPI for the Armv8 RAS Extensions 1.1 Platform Design Document\n September 2020.\n"]
pub type ACPI_TABLE_AEST = acpi_table_aest;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_hdr {
    pub Type: UINT8,
    pub Length: UINT16,
    pub Reserved: UINT8,
    pub NodeSpecificOffset: UINT32,
    pub NodeInterfaceOffset: UINT32,
    pub NodeInterruptOffset: UINT32,
    pub NodeInterruptCount: UINT32,
    pub TimestampRate: UINT64,
    pub Reserved1: UINT64,
    pub ErrorInjectionRate: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_hdr"][::core::mem::size_of::<acpi_aest_hdr>() - 44usize];
    ["Alignment of acpi_aest_hdr"][::core::mem::align_of::<acpi_aest_hdr>() - 1usize];
    ["Offset of field: acpi_aest_hdr::Type"][::core::mem::offset_of!(acpi_aest_hdr, Type) - 0usize];
    ["Offset of field: acpi_aest_hdr::Length"]
        [::core::mem::offset_of!(acpi_aest_hdr, Length) - 1usize];
    ["Offset of field: acpi_aest_hdr::Reserved"]
        [::core::mem::offset_of!(acpi_aest_hdr, Reserved) - 3usize];
    ["Offset of field: acpi_aest_hdr::NodeSpecificOffset"]
        [::core::mem::offset_of!(acpi_aest_hdr, NodeSpecificOffset) - 4usize];
    ["Offset of field: acpi_aest_hdr::NodeInterfaceOffset"]
        [::core::mem::offset_of!(acpi_aest_hdr, NodeInterfaceOffset) - 8usize];
    ["Offset of field: acpi_aest_hdr::NodeInterruptOffset"]
        [::core::mem::offset_of!(acpi_aest_hdr, NodeInterruptOffset) - 12usize];
    ["Offset of field: acpi_aest_hdr::NodeInterruptCount"]
        [::core::mem::offset_of!(acpi_aest_hdr, NodeInterruptCount) - 16usize];
    ["Offset of field: acpi_aest_hdr::TimestampRate"]
        [::core::mem::offset_of!(acpi_aest_hdr, TimestampRate) - 20usize];
    ["Offset of field: acpi_aest_hdr::Reserved1"]
        [::core::mem::offset_of!(acpi_aest_hdr, Reserved1) - 28usize];
    ["Offset of field: acpi_aest_hdr::ErrorInjectionRate"]
        [::core::mem::offset_of!(acpi_aest_hdr, ErrorInjectionRate) - 36usize];
};
pub type ACPI_AEST_HEADER = acpi_aest_hdr;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_processor {
    pub ProcessorId: UINT32,
    pub ResourceType: UINT8,
    pub Reserved: UINT8,
    pub Flags: UINT8,
    pub Revision: UINT8,
    pub ProcessorAffinity: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_processor"][::core::mem::size_of::<acpi_aest_processor>() - 16usize];
    ["Alignment of acpi_aest_processor"][::core::mem::align_of::<acpi_aest_processor>() - 1usize];
    ["Offset of field: acpi_aest_processor::ProcessorId"]
        [::core::mem::offset_of!(acpi_aest_processor, ProcessorId) - 0usize];
    ["Offset of field: acpi_aest_processor::ResourceType"]
        [::core::mem::offset_of!(acpi_aest_processor, ResourceType) - 4usize];
    ["Offset of field: acpi_aest_processor::Reserved"]
        [::core::mem::offset_of!(acpi_aest_processor, Reserved) - 5usize];
    ["Offset of field: acpi_aest_processor::Flags"]
        [::core::mem::offset_of!(acpi_aest_processor, Flags) - 6usize];
    ["Offset of field: acpi_aest_processor::Revision"]
        [::core::mem::offset_of!(acpi_aest_processor, Revision) - 7usize];
    ["Offset of field: acpi_aest_processor::ProcessorAffinity"]
        [::core::mem::offset_of!(acpi_aest_processor, ProcessorAffinity) - 8usize];
};
pub type ACPI_AEST_PROCESSOR = acpi_aest_processor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_processor_cache {
    pub CacheReference: UINT32,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_processor_cache"]
        [::core::mem::size_of::<acpi_aest_processor_cache>() - 8usize];
    ["Alignment of acpi_aest_processor_cache"]
        [::core::mem::align_of::<acpi_aest_processor_cache>() - 1usize];
    ["Offset of field: acpi_aest_processor_cache::CacheReference"]
        [::core::mem::offset_of!(acpi_aest_processor_cache, CacheReference) - 0usize];
    ["Offset of field: acpi_aest_processor_cache::Reserved"]
        [::core::mem::offset_of!(acpi_aest_processor_cache, Reserved) - 4usize];
};
pub type ACPI_AEST_PROCESSOR_CACHE = acpi_aest_processor_cache;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_processor_tlb {
    pub TlbLevel: UINT32,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_processor_tlb"][::core::mem::size_of::<acpi_aest_processor_tlb>() - 8usize];
    ["Alignment of acpi_aest_processor_tlb"]
        [::core::mem::align_of::<acpi_aest_processor_tlb>() - 1usize];
    ["Offset of field: acpi_aest_processor_tlb::TlbLevel"]
        [::core::mem::offset_of!(acpi_aest_processor_tlb, TlbLevel) - 0usize];
    ["Offset of field: acpi_aest_processor_tlb::Reserved"]
        [::core::mem::offset_of!(acpi_aest_processor_tlb, Reserved) - 4usize];
};
pub type ACPI_AEST_PROCESSOR_TLB = acpi_aest_processor_tlb;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_processor_generic {
    pub Resource: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_processor_generic"]
        [::core::mem::size_of::<acpi_aest_processor_generic>() - 4usize];
    ["Alignment of acpi_aest_processor_generic"]
        [::core::mem::align_of::<acpi_aest_processor_generic>() - 1usize];
    ["Offset of field: acpi_aest_processor_generic::Resource"]
        [::core::mem::offset_of!(acpi_aest_processor_generic, Resource) - 0usize];
};
pub type ACPI_AEST_PROCESSOR_GENERIC = acpi_aest_processor_generic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_memory {
    pub SratProximityDomain: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_memory"][::core::mem::size_of::<acpi_aest_memory>() - 4usize];
    ["Alignment of acpi_aest_memory"][::core::mem::align_of::<acpi_aest_memory>() - 1usize];
    ["Offset of field: acpi_aest_memory::SratProximityDomain"]
        [::core::mem::offset_of!(acpi_aest_memory, SratProximityDomain) - 0usize];
};
pub type ACPI_AEST_MEMORY = acpi_aest_memory;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_smmu {
    pub IortNodeReference: UINT32,
    pub SubcomponentReference: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_smmu"][::core::mem::size_of::<acpi_aest_smmu>() - 8usize];
    ["Alignment of acpi_aest_smmu"][::core::mem::align_of::<acpi_aest_smmu>() - 1usize];
    ["Offset of field: acpi_aest_smmu::IortNodeReference"]
        [::core::mem::offset_of!(acpi_aest_smmu, IortNodeReference) - 0usize];
    ["Offset of field: acpi_aest_smmu::SubcomponentReference"]
        [::core::mem::offset_of!(acpi_aest_smmu, SubcomponentReference) - 4usize];
};
pub type ACPI_AEST_SMMU = acpi_aest_smmu;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_vendor {
    pub AcpiHid: UINT32,
    pub AcpiUid: UINT32,
    pub VendorSpecificData: [UINT8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_vendor"][::core::mem::size_of::<acpi_aest_vendor>() - 24usize];
    ["Alignment of acpi_aest_vendor"][::core::mem::align_of::<acpi_aest_vendor>() - 1usize];
    ["Offset of field: acpi_aest_vendor::AcpiHid"]
        [::core::mem::offset_of!(acpi_aest_vendor, AcpiHid) - 0usize];
    ["Offset of field: acpi_aest_vendor::AcpiUid"]
        [::core::mem::offset_of!(acpi_aest_vendor, AcpiUid) - 4usize];
    ["Offset of field: acpi_aest_vendor::VendorSpecificData"]
        [::core::mem::offset_of!(acpi_aest_vendor, VendorSpecificData) - 8usize];
};
pub type ACPI_AEST_VENDOR = acpi_aest_vendor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_vendor_v2 {
    pub AcpiHid: UINT64,
    pub AcpiUid: UINT32,
    pub VendorSpecificData: [UINT8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_vendor_v2"][::core::mem::size_of::<acpi_aest_vendor_v2>() - 28usize];
    ["Alignment of acpi_aest_vendor_v2"][::core::mem::align_of::<acpi_aest_vendor_v2>() - 1usize];
    ["Offset of field: acpi_aest_vendor_v2::AcpiHid"]
        [::core::mem::offset_of!(acpi_aest_vendor_v2, AcpiHid) - 0usize];
    ["Offset of field: acpi_aest_vendor_v2::AcpiUid"]
        [::core::mem::offset_of!(acpi_aest_vendor_v2, AcpiUid) - 8usize];
    ["Offset of field: acpi_aest_vendor_v2::VendorSpecificData"]
        [::core::mem::offset_of!(acpi_aest_vendor_v2, VendorSpecificData) - 12usize];
};
pub type ACPI_AEST_VENDOR_V2 = acpi_aest_vendor_v2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_gic {
    pub InterfaceType: UINT32,
    pub InstanceId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_gic"][::core::mem::size_of::<acpi_aest_gic>() - 8usize];
    ["Alignment of acpi_aest_gic"][::core::mem::align_of::<acpi_aest_gic>() - 1usize];
    ["Offset of field: acpi_aest_gic::InterfaceType"]
        [::core::mem::offset_of!(acpi_aest_gic, InterfaceType) - 0usize];
    ["Offset of field: acpi_aest_gic::InstanceId"]
        [::core::mem::offset_of!(acpi_aest_gic, InstanceId) - 4usize];
};
pub type ACPI_AEST_GIC = acpi_aest_gic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_pcie {
    pub IortNodeReference: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_pcie"][::core::mem::size_of::<acpi_aest_pcie>() - 4usize];
    ["Alignment of acpi_aest_pcie"][::core::mem::align_of::<acpi_aest_pcie>() - 1usize];
    ["Offset of field: acpi_aest_pcie::IortNodeReference"]
        [::core::mem::offset_of!(acpi_aest_pcie, IortNodeReference) - 0usize];
};
pub type ACPI_AEST_PCIE = acpi_aest_pcie;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_proxy {
    pub NodeAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_proxy"][::core::mem::size_of::<acpi_aest_proxy>() - 8usize];
    ["Alignment of acpi_aest_proxy"][::core::mem::align_of::<acpi_aest_proxy>() - 1usize];
    ["Offset of field: acpi_aest_proxy::NodeAddress"]
        [::core::mem::offset_of!(acpi_aest_proxy, NodeAddress) - 0usize];
};
pub type ACPI_AEST_PROXY = acpi_aest_proxy;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interface {
    pub Type: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub Flags: UINT32,
    pub Address: UINT64,
    pub ErrorRecordIndex: UINT32,
    pub ErrorRecordCount: UINT32,
    pub ErrorRecordImplemented: UINT64,
    pub ErrorStatusReporting: UINT64,
    pub AddressingMode: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interface"]
        [::core::mem::size_of::<acpi_aest_node_interface>() - 48usize];
    ["Alignment of acpi_aest_node_interface"]
        [::core::mem::align_of::<acpi_aest_node_interface>() - 1usize];
    ["Offset of field: acpi_aest_node_interface::Type"]
        [::core::mem::offset_of!(acpi_aest_node_interface, Type) - 0usize];
    ["Offset of field: acpi_aest_node_interface::Reserved"]
        [::core::mem::offset_of!(acpi_aest_node_interface, Reserved) - 1usize];
    ["Offset of field: acpi_aest_node_interface::Flags"]
        [::core::mem::offset_of!(acpi_aest_node_interface, Flags) - 4usize];
    ["Offset of field: acpi_aest_node_interface::Address"]
        [::core::mem::offset_of!(acpi_aest_node_interface, Address) - 8usize];
    ["Offset of field: acpi_aest_node_interface::ErrorRecordIndex"]
        [::core::mem::offset_of!(acpi_aest_node_interface, ErrorRecordIndex) - 16usize];
    ["Offset of field: acpi_aest_node_interface::ErrorRecordCount"]
        [::core::mem::offset_of!(acpi_aest_node_interface, ErrorRecordCount) - 20usize];
    ["Offset of field: acpi_aest_node_interface::ErrorRecordImplemented"]
        [::core::mem::offset_of!(acpi_aest_node_interface, ErrorRecordImplemented) - 24usize];
    ["Offset of field: acpi_aest_node_interface::ErrorStatusReporting"]
        [::core::mem::offset_of!(acpi_aest_node_interface, ErrorStatusReporting) - 32usize];
    ["Offset of field: acpi_aest_node_interface::AddressingMode"]
        [::core::mem::offset_of!(acpi_aest_node_interface, AddressingMode) - 40usize];
};
pub type ACPI_AEST_NODE_INTERFACE = acpi_aest_node_interface;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interface_header {
    pub Type: UINT8,
    pub GroupFormat: UINT8,
    pub Reserved: [UINT8; 2usize],
    pub Flags: UINT32,
    pub Address: UINT64,
    pub ErrorRecordIndex: UINT32,
    pub ErrorRecordCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interface_header"]
        [::core::mem::size_of::<acpi_aest_node_interface_header>() - 24usize];
    ["Alignment of acpi_aest_node_interface_header"]
        [::core::mem::align_of::<acpi_aest_node_interface_header>() - 1usize];
    ["Offset of field: acpi_aest_node_interface_header::Type"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, Type) - 0usize];
    ["Offset of field: acpi_aest_node_interface_header::GroupFormat"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, GroupFormat) - 1usize];
    ["Offset of field: acpi_aest_node_interface_header::Reserved"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, Reserved) - 2usize];
    ["Offset of field: acpi_aest_node_interface_header::Flags"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, Flags) - 4usize];
    ["Offset of field: acpi_aest_node_interface_header::Address"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, Address) - 8usize];
    ["Offset of field: acpi_aest_node_interface_header::ErrorRecordIndex"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, ErrorRecordIndex) - 16usize];
    ["Offset of field: acpi_aest_node_interface_header::ErrorRecordCount"]
        [::core::mem::offset_of!(acpi_aest_node_interface_header, ErrorRecordCount) - 20usize];
};
pub type ACPI_AEST_NODE_INTERFACE_HEADER = acpi_aest_node_interface_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interface_common {
    pub ErrorNodeDevice: UINT32,
    pub ProcessorAffinity: UINT32,
    pub ErrorGroupRegisterBase: UINT64,
    pub FaultInjectRegisterBase: UINT64,
    pub InterruptConfigRegisterBase: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interface_common"]
        [::core::mem::size_of::<acpi_aest_node_interface_common>() - 32usize];
    ["Alignment of acpi_aest_node_interface_common"]
        [::core::mem::align_of::<acpi_aest_node_interface_common>() - 1usize];
    ["Offset of field: acpi_aest_node_interface_common::ErrorNodeDevice"]
        [::core::mem::offset_of!(acpi_aest_node_interface_common, ErrorNodeDevice) - 0usize];
    ["Offset of field: acpi_aest_node_interface_common::ProcessorAffinity"]
        [::core::mem::offset_of!(acpi_aest_node_interface_common, ProcessorAffinity) - 4usize];
    ["Offset of field: acpi_aest_node_interface_common::ErrorGroupRegisterBase"]
        [::core::mem::offset_of!(acpi_aest_node_interface_common, ErrorGroupRegisterBase) - 8usize];
    ["Offset of field: acpi_aest_node_interface_common::FaultInjectRegisterBase"][::core::mem::offset_of!(
        acpi_aest_node_interface_common,
        FaultInjectRegisterBase
    ) - 16usize];
    ["Offset of field: acpi_aest_node_interface_common::InterruptConfigRegisterBase"][::core::mem::offset_of!(
        acpi_aest_node_interface_common,
        InterruptConfigRegisterBase
    ) - 24usize];
};
pub type ACPI_AEST_NODE_INTERFACE_COMMON = acpi_aest_node_interface_common;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interface_4k {
    pub ErrorRecordImplemented: UINT64,
    pub ErrorStatusReporting: UINT64,
    pub AddressingMode: UINT64,
    pub Common: ACPI_AEST_NODE_INTERFACE_COMMON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interface_4k"]
        [::core::mem::size_of::<acpi_aest_node_interface_4k>() - 56usize];
    ["Alignment of acpi_aest_node_interface_4k"]
        [::core::mem::align_of::<acpi_aest_node_interface_4k>() - 1usize];
    ["Offset of field: acpi_aest_node_interface_4k::ErrorRecordImplemented"]
        [::core::mem::offset_of!(acpi_aest_node_interface_4k, ErrorRecordImplemented) - 0usize];
    ["Offset of field: acpi_aest_node_interface_4k::ErrorStatusReporting"]
        [::core::mem::offset_of!(acpi_aest_node_interface_4k, ErrorStatusReporting) - 8usize];
    ["Offset of field: acpi_aest_node_interface_4k::AddressingMode"]
        [::core::mem::offset_of!(acpi_aest_node_interface_4k, AddressingMode) - 16usize];
    ["Offset of field: acpi_aest_node_interface_4k::Common"]
        [::core::mem::offset_of!(acpi_aest_node_interface_4k, Common) - 24usize];
};
pub type ACPI_AEST_NODE_INTERFACE_4K = acpi_aest_node_interface_4k;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interface_16k {
    pub ErrorRecordImplemented: [UINT64; 4usize],
    pub ErrorStatusReporting: [UINT64; 4usize],
    pub AddressingMode: [UINT64; 4usize],
    pub Common: ACPI_AEST_NODE_INTERFACE_COMMON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interface_16k"]
        [::core::mem::size_of::<acpi_aest_node_interface_16k>() - 128usize];
    ["Alignment of acpi_aest_node_interface_16k"]
        [::core::mem::align_of::<acpi_aest_node_interface_16k>() - 1usize];
    ["Offset of field: acpi_aest_node_interface_16k::ErrorRecordImplemented"]
        [::core::mem::offset_of!(acpi_aest_node_interface_16k, ErrorRecordImplemented) - 0usize];
    ["Offset of field: acpi_aest_node_interface_16k::ErrorStatusReporting"]
        [::core::mem::offset_of!(acpi_aest_node_interface_16k, ErrorStatusReporting) - 32usize];
    ["Offset of field: acpi_aest_node_interface_16k::AddressingMode"]
        [::core::mem::offset_of!(acpi_aest_node_interface_16k, AddressingMode) - 64usize];
    ["Offset of field: acpi_aest_node_interface_16k::Common"]
        [::core::mem::offset_of!(acpi_aest_node_interface_16k, Common) - 96usize];
};
pub type ACPI_AEST_NODE_INTERFACE_16K = acpi_aest_node_interface_16k;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interface_64k {
    pub ErrorRecordImplemented: [INT64; 14usize],
    pub ErrorStatusReporting: [UINT64; 14usize],
    pub AddressingMode: [UINT64; 14usize],
    pub Common: ACPI_AEST_NODE_INTERFACE_COMMON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interface_64k"]
        [::core::mem::size_of::<acpi_aest_node_interface_64k>() - 368usize];
    ["Alignment of acpi_aest_node_interface_64k"]
        [::core::mem::align_of::<acpi_aest_node_interface_64k>() - 1usize];
    ["Offset of field: acpi_aest_node_interface_64k::ErrorRecordImplemented"]
        [::core::mem::offset_of!(acpi_aest_node_interface_64k, ErrorRecordImplemented) - 0usize];
    ["Offset of field: acpi_aest_node_interface_64k::ErrorStatusReporting"]
        [::core::mem::offset_of!(acpi_aest_node_interface_64k, ErrorStatusReporting) - 112usize];
    ["Offset of field: acpi_aest_node_interface_64k::AddressingMode"]
        [::core::mem::offset_of!(acpi_aest_node_interface_64k, AddressingMode) - 224usize];
    ["Offset of field: acpi_aest_node_interface_64k::Common"]
        [::core::mem::offset_of!(acpi_aest_node_interface_64k, Common) - 336usize];
};
pub type ACPI_AEST_NODE_INTERFACE_64K = acpi_aest_node_interface_64k;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interrupt {
    pub Type: UINT8,
    pub Reserved: [UINT8; 2usize],
    pub Flags: UINT8,
    pub Gsiv: UINT32,
    pub IortId: UINT8,
    pub Reserved1: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interrupt"]
        [::core::mem::size_of::<acpi_aest_node_interrupt>() - 12usize];
    ["Alignment of acpi_aest_node_interrupt"]
        [::core::mem::align_of::<acpi_aest_node_interrupt>() - 1usize];
    ["Offset of field: acpi_aest_node_interrupt::Type"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt, Type) - 0usize];
    ["Offset of field: acpi_aest_node_interrupt::Reserved"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt, Reserved) - 1usize];
    ["Offset of field: acpi_aest_node_interrupt::Flags"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt, Flags) - 3usize];
    ["Offset of field: acpi_aest_node_interrupt::Gsiv"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt, Gsiv) - 4usize];
    ["Offset of field: acpi_aest_node_interrupt::IortId"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt, IortId) - 8usize];
    ["Offset of field: acpi_aest_node_interrupt::Reserved1"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt, Reserved1) - 9usize];
};
pub type ACPI_AEST_NODE_INTERRUPT = acpi_aest_node_interrupt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_aest_node_interrupt_v2 {
    pub Type: UINT8,
    pub Reserved: [UINT8; 2usize],
    pub Flags: UINT8,
    pub Gsiv: UINT32,
    pub Reserved1: [UINT8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_aest_node_interrupt_v2"]
        [::core::mem::size_of::<acpi_aest_node_interrupt_v2>() - 12usize];
    ["Alignment of acpi_aest_node_interrupt_v2"]
        [::core::mem::align_of::<acpi_aest_node_interrupt_v2>() - 1usize];
    ["Offset of field: acpi_aest_node_interrupt_v2::Type"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt_v2, Type) - 0usize];
    ["Offset of field: acpi_aest_node_interrupt_v2::Reserved"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt_v2, Reserved) - 1usize];
    ["Offset of field: acpi_aest_node_interrupt_v2::Flags"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt_v2, Flags) - 3usize];
    ["Offset of field: acpi_aest_node_interrupt_v2::Gsiv"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt_v2, Gsiv) - 4usize];
    ["Offset of field: acpi_aest_node_interrupt_v2::Reserved1"]
        [::core::mem::offset_of!(acpi_aest_node_interrupt_v2, Reserved1) - 8usize];
};
pub type ACPI_AEST_NODE_INTERRUPT_V2 = acpi_aest_node_interrupt_v2;
#[doc = " AGDI - Arm Generic Diagnostic Dump and Reset Device Interface\n\n Conforms to \"ACPI for Arm Components 1.1, Platform Design Document\"\n ARM DEN0093 v1.1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_agdi {
    pub Header: ACPI_TABLE_HEADER,
    pub Flags: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub SdeiEvent: UINT32,
    pub Gsiv: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_agdi"][::core::mem::size_of::<acpi_table_agdi>() - 48usize];
    ["Alignment of acpi_table_agdi"][::core::mem::align_of::<acpi_table_agdi>() - 1usize];
    ["Offset of field: acpi_table_agdi::Header"]
        [::core::mem::offset_of!(acpi_table_agdi, Header) - 0usize];
    ["Offset of field: acpi_table_agdi::Flags"]
        [::core::mem::offset_of!(acpi_table_agdi, Flags) - 36usize];
    ["Offset of field: acpi_table_agdi::Reserved"]
        [::core::mem::offset_of!(acpi_table_agdi, Reserved) - 37usize];
    ["Offset of field: acpi_table_agdi::SdeiEvent"]
        [::core::mem::offset_of!(acpi_table_agdi, SdeiEvent) - 40usize];
    ["Offset of field: acpi_table_agdi::Gsiv"]
        [::core::mem::offset_of!(acpi_table_agdi, Gsiv) - 44usize];
};
#[doc = " AGDI - Arm Generic Diagnostic Dump and Reset Device Interface\n\n Conforms to \"ACPI for Arm Components 1.1, Platform Design Document\"\n ARM DEN0093 v1.1\n"]
pub type ACPI_TABLE_AGDI = acpi_table_agdi;
#[doc = " APMT - ARM Performance Monitoring Unit Table\n\n Conforms to:\n ARM Performance Monitoring Unit Architecture 1.0 Platform Design Document\n ARM DEN0117 v1.0 November 25, 2021\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_apmt {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_apmt"][::core::mem::size_of::<acpi_table_apmt>() - 36usize];
    ["Alignment of acpi_table_apmt"][::core::mem::align_of::<acpi_table_apmt>() - 1usize];
    ["Offset of field: acpi_table_apmt::Header"]
        [::core::mem::offset_of!(acpi_table_apmt, Header) - 0usize];
};
#[doc = " APMT - ARM Performance Monitoring Unit Table\n\n Conforms to:\n ARM Performance Monitoring Unit Architecture 1.0 Platform Design Document\n ARM DEN0117 v1.0 November 25, 2021\n"]
pub type ACPI_TABLE_APMT = acpi_table_apmt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_apmt_node {
    pub Length: UINT16,
    pub Flags: UINT8,
    pub Type: UINT8,
    pub Id: UINT32,
    pub InstPrimary: UINT64,
    pub InstSecondary: UINT32,
    pub BaseAddress0: UINT64,
    pub BaseAddress1: UINT64,
    pub OvflwIrq: UINT32,
    pub Reserved: UINT32,
    pub OvflwIrqFlags: UINT32,
    pub ProcAffinity: UINT32,
    pub ImplId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_apmt_node"][::core::mem::size_of::<acpi_apmt_node>() - 56usize];
    ["Alignment of acpi_apmt_node"][::core::mem::align_of::<acpi_apmt_node>() - 1usize];
    ["Offset of field: acpi_apmt_node::Length"]
        [::core::mem::offset_of!(acpi_apmt_node, Length) - 0usize];
    ["Offset of field: acpi_apmt_node::Flags"]
        [::core::mem::offset_of!(acpi_apmt_node, Flags) - 2usize];
    ["Offset of field: acpi_apmt_node::Type"]
        [::core::mem::offset_of!(acpi_apmt_node, Type) - 3usize];
    ["Offset of field: acpi_apmt_node::Id"][::core::mem::offset_of!(acpi_apmt_node, Id) - 4usize];
    ["Offset of field: acpi_apmt_node::InstPrimary"]
        [::core::mem::offset_of!(acpi_apmt_node, InstPrimary) - 8usize];
    ["Offset of field: acpi_apmt_node::InstSecondary"]
        [::core::mem::offset_of!(acpi_apmt_node, InstSecondary) - 16usize];
    ["Offset of field: acpi_apmt_node::BaseAddress0"]
        [::core::mem::offset_of!(acpi_apmt_node, BaseAddress0) - 20usize];
    ["Offset of field: acpi_apmt_node::BaseAddress1"]
        [::core::mem::offset_of!(acpi_apmt_node, BaseAddress1) - 28usize];
    ["Offset of field: acpi_apmt_node::OvflwIrq"]
        [::core::mem::offset_of!(acpi_apmt_node, OvflwIrq) - 36usize];
    ["Offset of field: acpi_apmt_node::Reserved"]
        [::core::mem::offset_of!(acpi_apmt_node, Reserved) - 40usize];
    ["Offset of field: acpi_apmt_node::OvflwIrqFlags"]
        [::core::mem::offset_of!(acpi_apmt_node, OvflwIrqFlags) - 44usize];
    ["Offset of field: acpi_apmt_node::ProcAffinity"]
        [::core::mem::offset_of!(acpi_apmt_node, ProcAffinity) - 48usize];
    ["Offset of field: acpi_apmt_node::ImplId"]
        [::core::mem::offset_of!(acpi_apmt_node, ImplId) - 52usize];
};
pub type ACPI_APMT_NODE = acpi_apmt_node;
pub const acpi_apmt_node_type_ACPI_APMT_NODE_TYPE_MC: acpi_apmt_node_type = 0;
pub const acpi_apmt_node_type_ACPI_APMT_NODE_TYPE_SMMU: acpi_apmt_node_type = 1;
pub const acpi_apmt_node_type_ACPI_APMT_NODE_TYPE_PCIE_ROOT: acpi_apmt_node_type = 2;
pub const acpi_apmt_node_type_ACPI_APMT_NODE_TYPE_ACPI: acpi_apmt_node_type = 3;
pub const acpi_apmt_node_type_ACPI_APMT_NODE_TYPE_CACHE: acpi_apmt_node_type = 4;
pub const acpi_apmt_node_type_ACPI_APMT_NODE_TYPE_COUNT: acpi_apmt_node_type = 5;
pub type acpi_apmt_node_type = ::core::ffi::c_uint;
#[doc = " BDAT - BIOS Data ACPI Table\n\n Conforms to \"BIOS Data ACPI Table\", Interface Specification v4.0 Draft 5\n Nov 2020\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_bdat {
    pub Header: ACPI_TABLE_HEADER,
    pub Gas: ACPI_GENERIC_ADDRESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_bdat"][::core::mem::size_of::<acpi_table_bdat>() - 48usize];
    ["Alignment of acpi_table_bdat"][::core::mem::align_of::<acpi_table_bdat>() - 1usize];
    ["Offset of field: acpi_table_bdat::Header"]
        [::core::mem::offset_of!(acpi_table_bdat, Header) - 0usize];
    ["Offset of field: acpi_table_bdat::Gas"]
        [::core::mem::offset_of!(acpi_table_bdat, Gas) - 36usize];
};
#[doc = " BDAT - BIOS Data ACPI Table\n\n Conforms to \"BIOS Data ACPI Table\", Interface Specification v4.0 Draft 5\n Nov 2020\n"]
pub type ACPI_TABLE_BDAT = acpi_table_bdat;
#[doc = " CCEL - CC-Event Log\n        From: \"Guest-Host-Communication Interface (GHCI) for Intel\n        Trust Domain Extensions (Intel TDX)\". Feb 2022\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ccel {
    pub Header: ACPI_TABLE_HEADER,
    pub CCType: UINT8,
    pub CCSubType: UINT8,
    pub Reserved: UINT16,
    pub LogAreaMinimumLength: UINT64,
    pub LogAreaStartAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_ccel"][::core::mem::size_of::<acpi_table_ccel>() - 56usize];
    ["Alignment of acpi_table_ccel"][::core::mem::align_of::<acpi_table_ccel>() - 1usize];
    ["Offset of field: acpi_table_ccel::Header"]
        [::core::mem::offset_of!(acpi_table_ccel, Header) - 0usize];
    ["Offset of field: acpi_table_ccel::CCType"]
        [::core::mem::offset_of!(acpi_table_ccel, CCType) - 36usize];
    ["Offset of field: acpi_table_ccel::CCSubType"]
        [::core::mem::offset_of!(acpi_table_ccel, CCSubType) - 37usize];
    ["Offset of field: acpi_table_ccel::Reserved"]
        [::core::mem::offset_of!(acpi_table_ccel, Reserved) - 38usize];
    ["Offset of field: acpi_table_ccel::LogAreaMinimumLength"]
        [::core::mem::offset_of!(acpi_table_ccel, LogAreaMinimumLength) - 40usize];
    ["Offset of field: acpi_table_ccel::LogAreaStartAddress"]
        [::core::mem::offset_of!(acpi_table_ccel, LogAreaStartAddress) - 48usize];
};
#[doc = " CCEL - CC-Event Log\n        From: \"Guest-Host-Communication Interface (GHCI) for Intel\n        Trust Domain Extensions (Intel TDX)\". Feb 2022\n"]
pub type ACPI_TABLE_CCEL = acpi_table_ccel;
#[doc = " ERDT - Enhanced Resource Director Technology (ERDT) table\n\n Conforms to \"Intel Resource Director Technology Architecture Specification\"\n Version 1.1, January 2025\n"]
#[repr(C, packed)]
pub struct acpi_table_erdt {
    pub Header: ACPI_TABLE_HEADER,
    pub MaxClos: UINT32,
    pub Reserved: [UINT8; 24usize],
    pub Erdt_Substructures: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_erdt"][::core::mem::size_of::<acpi_table_erdt>() - 64usize];
    ["Alignment of acpi_table_erdt"][::core::mem::align_of::<acpi_table_erdt>() - 1usize];
    ["Offset of field: acpi_table_erdt::Header"]
        [::core::mem::offset_of!(acpi_table_erdt, Header) - 0usize];
    ["Offset of field: acpi_table_erdt::MaxClos"]
        [::core::mem::offset_of!(acpi_table_erdt, MaxClos) - 36usize];
    ["Offset of field: acpi_table_erdt::Reserved"]
        [::core::mem::offset_of!(acpi_table_erdt, Reserved) - 40usize];
    ["Offset of field: acpi_table_erdt::Erdt_Substructures"]
        [::core::mem::offset_of!(acpi_table_erdt, Erdt_Substructures) - 64usize];
};
#[doc = " ERDT - Enhanced Resource Director Technology (ERDT) table\n\n Conforms to \"Intel Resource Director Technology Architecture Specification\"\n Version 1.1, January 2025\n"]
pub type ACPI_TABLE_ERDT = acpi_table_erdt;
pub const AcpiErdtType_ACPI_ERDT_TYPE_RMDD: AcpiErdtType = 0;
pub const AcpiErdtType_ACPI_ERDT_TYPE_CACD: AcpiErdtType = 1;
pub const AcpiErdtType_ACPI_ERDT_TYPE_DACD: AcpiErdtType = 2;
pub const AcpiErdtType_ACPI_ERDT_TYPE_CMRC: AcpiErdtType = 3;
pub const AcpiErdtType_ACPI_ERDT_TYPE_MMRC: AcpiErdtType = 4;
pub const AcpiErdtType_ACPI_ERDT_TYPE_MARC: AcpiErdtType = 5;
pub const AcpiErdtType_ACPI_ERDT_TYPE_CARC: AcpiErdtType = 6;
pub const AcpiErdtType_ACPI_ERDT_TYPE_CMRD: AcpiErdtType = 7;
pub const AcpiErdtType_ACPI_ERDT_TYPE_IBRD: AcpiErdtType = 8;
pub const AcpiErdtType_ACPI_ERDT_TYPE_IBAD: AcpiErdtType = 9;
pub const AcpiErdtType_ACPI_ERDT_TYPE_CARD: AcpiErdtType = 10;
pub const AcpiErdtType_ACPI_ERDT_TYPE_RESERVED: AcpiErdtType = 11;
pub type AcpiErdtType = ::core::ffi::c_uint;
#[repr(C, packed)]
pub struct acpi_erdt_rmdd {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Flags: UINT16,
    pub IO_l3_Slices: UINT16,
    pub IO_l3_Sets: UINT8,
    pub IO_l3_Ways: UINT8,
    pub Reserved: UINT64,
    pub DomainId: UINT16,
    pub MaxRmid: UINT32,
    pub CregBase: UINT64,
    pub CregSize: UINT16,
    pub RmddStructs: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_rmdd"][::core::mem::size_of::<acpi_erdt_rmdd>() - 34usize];
    ["Alignment of acpi_erdt_rmdd"][::core::mem::align_of::<acpi_erdt_rmdd>() - 1usize];
    ["Offset of field: acpi_erdt_rmdd::Header"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, Header) - 0usize];
    ["Offset of field: acpi_erdt_rmdd::Flags"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, Flags) - 4usize];
    ["Offset of field: acpi_erdt_rmdd::IO_l3_Slices"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, IO_l3_Slices) - 6usize];
    ["Offset of field: acpi_erdt_rmdd::IO_l3_Sets"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, IO_l3_Sets) - 8usize];
    ["Offset of field: acpi_erdt_rmdd::IO_l3_Ways"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, IO_l3_Ways) - 9usize];
    ["Offset of field: acpi_erdt_rmdd::Reserved"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, Reserved) - 10usize];
    ["Offset of field: acpi_erdt_rmdd::DomainId"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, DomainId) - 18usize];
    ["Offset of field: acpi_erdt_rmdd::MaxRmid"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, MaxRmid) - 20usize];
    ["Offset of field: acpi_erdt_rmdd::CregBase"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, CregBase) - 24usize];
    ["Offset of field: acpi_erdt_rmdd::CregSize"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, CregSize) - 32usize];
    ["Offset of field: acpi_erdt_rmdd::RmddStructs"]
        [::core::mem::offset_of!(acpi_erdt_rmdd, RmddStructs) - 34usize];
};
pub type ACPI_ERDT_RMDD = acpi_erdt_rmdd;
#[repr(C, packed)]
pub struct acpi_erdt_cacd {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved: UINT16,
    pub DomainId: UINT16,
    pub X2APICIDS: __IncompleteArrayField<UINT32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_cacd"][::core::mem::size_of::<acpi_erdt_cacd>() - 8usize];
    ["Alignment of acpi_erdt_cacd"][::core::mem::align_of::<acpi_erdt_cacd>() - 1usize];
    ["Offset of field: acpi_erdt_cacd::Header"]
        [::core::mem::offset_of!(acpi_erdt_cacd, Header) - 0usize];
    ["Offset of field: acpi_erdt_cacd::Reserved"]
        [::core::mem::offset_of!(acpi_erdt_cacd, Reserved) - 4usize];
    ["Offset of field: acpi_erdt_cacd::DomainId"]
        [::core::mem::offset_of!(acpi_erdt_cacd, DomainId) - 6usize];
    ["Offset of field: acpi_erdt_cacd::X2APICIDS"]
        [::core::mem::offset_of!(acpi_erdt_cacd, X2APICIDS) - 8usize];
};
pub type ACPI_ERDT_CACD = acpi_erdt_cacd;
#[repr(C, packed)]
pub struct acpi_erdt_dacd {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved: UINT16,
    pub DomainId: UINT16,
    pub DevPaths: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_dacd"][::core::mem::size_of::<acpi_erdt_dacd>() - 8usize];
    ["Alignment of acpi_erdt_dacd"][::core::mem::align_of::<acpi_erdt_dacd>() - 1usize];
    ["Offset of field: acpi_erdt_dacd::Header"]
        [::core::mem::offset_of!(acpi_erdt_dacd, Header) - 0usize];
    ["Offset of field: acpi_erdt_dacd::Reserved"]
        [::core::mem::offset_of!(acpi_erdt_dacd, Reserved) - 4usize];
    ["Offset of field: acpi_erdt_dacd::DomainId"]
        [::core::mem::offset_of!(acpi_erdt_dacd, DomainId) - 6usize];
    ["Offset of field: acpi_erdt_dacd::DevPaths"]
        [::core::mem::offset_of!(acpi_erdt_dacd, DevPaths) - 8usize];
};
pub type ACPI_ERDT_DACD = acpi_erdt_dacd;
#[repr(C, packed)]
pub struct acpi_erdt_dacd_dev_paths {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Segment: UINT16,
    pub Reserved: UINT8,
    pub StartBus: UINT8,
    pub Path: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_dacd_dev_paths"]
        [::core::mem::size_of::<acpi_erdt_dacd_dev_paths>() - 6usize];
    ["Alignment of acpi_erdt_dacd_dev_paths"]
        [::core::mem::align_of::<acpi_erdt_dacd_dev_paths>() - 1usize];
    ["Offset of field: acpi_erdt_dacd_dev_paths::Header"]
        [::core::mem::offset_of!(acpi_erdt_dacd_dev_paths, Header) - 0usize];
    ["Offset of field: acpi_erdt_dacd_dev_paths::Segment"]
        [::core::mem::offset_of!(acpi_erdt_dacd_dev_paths, Segment) - 2usize];
    ["Offset of field: acpi_erdt_dacd_dev_paths::Reserved"]
        [::core::mem::offset_of!(acpi_erdt_dacd_dev_paths, Reserved) - 4usize];
    ["Offset of field: acpi_erdt_dacd_dev_paths::StartBus"]
        [::core::mem::offset_of!(acpi_erdt_dacd_dev_paths, StartBus) - 5usize];
    ["Offset of field: acpi_erdt_dacd_dev_paths::Path"]
        [::core::mem::offset_of!(acpi_erdt_dacd_dev_paths, Path) - 6usize];
};
pub type ACPI_ERDT_DACD_PATHS = acpi_erdt_dacd_dev_paths;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erdt_cmrc {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub IndexFn: UINT8,
    pub Reserved2: [UINT8; 11usize],
    pub CmtRegBase: UINT64,
    pub CmtRegSize: UINT32,
    pub ClumpSize: UINT16,
    pub ClumpStride: UINT16,
    pub UpScale: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_cmrc"][::core::mem::size_of::<acpi_erdt_cmrc>() - 48usize];
    ["Alignment of acpi_erdt_cmrc"][::core::mem::align_of::<acpi_erdt_cmrc>() - 1usize];
    ["Offset of field: acpi_erdt_cmrc::Header"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, Header) - 0usize];
    ["Offset of field: acpi_erdt_cmrc::Reserved1"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, Reserved1) - 4usize];
    ["Offset of field: acpi_erdt_cmrc::Flags"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, Flags) - 8usize];
    ["Offset of field: acpi_erdt_cmrc::IndexFn"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, IndexFn) - 12usize];
    ["Offset of field: acpi_erdt_cmrc::Reserved2"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, Reserved2) - 13usize];
    ["Offset of field: acpi_erdt_cmrc::CmtRegBase"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, CmtRegBase) - 24usize];
    ["Offset of field: acpi_erdt_cmrc::CmtRegSize"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, CmtRegSize) - 32usize];
    ["Offset of field: acpi_erdt_cmrc::ClumpSize"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, ClumpSize) - 36usize];
    ["Offset of field: acpi_erdt_cmrc::ClumpStride"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, ClumpStride) - 38usize];
    ["Offset of field: acpi_erdt_cmrc::UpScale"]
        [::core::mem::offset_of!(acpi_erdt_cmrc, UpScale) - 40usize];
};
pub type ACPI_ERDT_CMRC = acpi_erdt_cmrc;
#[repr(C, packed)]
pub struct acpi_erdt_mmrc {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub IndexFn: UINT8,
    pub Reserved2: [UINT8; 11usize],
    pub RegBase: UINT64,
    pub RegSize: UINT32,
    pub CounterWidth: UINT8,
    pub UpScale: UINT64,
    pub Reserved3: [UINT8; 7usize],
    pub CorrFactorListLen: UINT32,
    pub CorrFactorList: __IncompleteArrayField<UINT32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_mmrc"][::core::mem::size_of::<acpi_erdt_mmrc>() - 56usize];
    ["Alignment of acpi_erdt_mmrc"][::core::mem::align_of::<acpi_erdt_mmrc>() - 1usize];
    ["Offset of field: acpi_erdt_mmrc::Header"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, Header) - 0usize];
    ["Offset of field: acpi_erdt_mmrc::Reserved1"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, Reserved1) - 4usize];
    ["Offset of field: acpi_erdt_mmrc::Flags"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, Flags) - 8usize];
    ["Offset of field: acpi_erdt_mmrc::IndexFn"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, IndexFn) - 12usize];
    ["Offset of field: acpi_erdt_mmrc::Reserved2"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, Reserved2) - 13usize];
    ["Offset of field: acpi_erdt_mmrc::RegBase"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, RegBase) - 24usize];
    ["Offset of field: acpi_erdt_mmrc::RegSize"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, RegSize) - 32usize];
    ["Offset of field: acpi_erdt_mmrc::CounterWidth"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, CounterWidth) - 36usize];
    ["Offset of field: acpi_erdt_mmrc::UpScale"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, UpScale) - 37usize];
    ["Offset of field: acpi_erdt_mmrc::Reserved3"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, Reserved3) - 45usize];
    ["Offset of field: acpi_erdt_mmrc::CorrFactorListLen"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, CorrFactorListLen) - 52usize];
    ["Offset of field: acpi_erdt_mmrc::CorrFactorList"]
        [::core::mem::offset_of!(acpi_erdt_mmrc, CorrFactorList) - 56usize];
};
pub type ACPI_ERDT_MMRC = acpi_erdt_mmrc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erdt_marc {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved1: UINT16,
    pub Flags: UINT16,
    pub IndexFn: UINT8,
    pub Reserved2: [UINT8; 7usize],
    pub RegBaseOpt: UINT64,
    pub RegBaseMin: UINT64,
    pub RegBaseMax: UINT64,
    pub MbaRegSize: UINT32,
    pub MbaCtrlRange: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_marc"][::core::mem::size_of::<acpi_erdt_marc>() - 48usize];
    ["Alignment of acpi_erdt_marc"][::core::mem::align_of::<acpi_erdt_marc>() - 1usize];
    ["Offset of field: acpi_erdt_marc::Header"]
        [::core::mem::offset_of!(acpi_erdt_marc, Header) - 0usize];
    ["Offset of field: acpi_erdt_marc::Reserved1"]
        [::core::mem::offset_of!(acpi_erdt_marc, Reserved1) - 4usize];
    ["Offset of field: acpi_erdt_marc::Flags"]
        [::core::mem::offset_of!(acpi_erdt_marc, Flags) - 6usize];
    ["Offset of field: acpi_erdt_marc::IndexFn"]
        [::core::mem::offset_of!(acpi_erdt_marc, IndexFn) - 8usize];
    ["Offset of field: acpi_erdt_marc::Reserved2"]
        [::core::mem::offset_of!(acpi_erdt_marc, Reserved2) - 9usize];
    ["Offset of field: acpi_erdt_marc::RegBaseOpt"]
        [::core::mem::offset_of!(acpi_erdt_marc, RegBaseOpt) - 16usize];
    ["Offset of field: acpi_erdt_marc::RegBaseMin"]
        [::core::mem::offset_of!(acpi_erdt_marc, RegBaseMin) - 24usize];
    ["Offset of field: acpi_erdt_marc::RegBaseMax"]
        [::core::mem::offset_of!(acpi_erdt_marc, RegBaseMax) - 32usize];
    ["Offset of field: acpi_erdt_marc::MbaRegSize"]
        [::core::mem::offset_of!(acpi_erdt_marc, MbaRegSize) - 40usize];
    ["Offset of field: acpi_erdt_marc::MbaCtrlRange"]
        [::core::mem::offset_of!(acpi_erdt_marc, MbaCtrlRange) - 44usize];
};
pub type ACPI_ERDT_MARC = acpi_erdt_marc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erdt_carc {
    pub Header: ACPI_SUBTBL_HDR_16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_carc"][::core::mem::size_of::<acpi_erdt_carc>() - 4usize];
    ["Alignment of acpi_erdt_carc"][::core::mem::align_of::<acpi_erdt_carc>() - 1usize];
    ["Offset of field: acpi_erdt_carc::Header"]
        [::core::mem::offset_of!(acpi_erdt_carc, Header) - 0usize];
};
pub type ACPI_ERDT_CARC = acpi_erdt_carc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erdt_cmrd {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub IndexFn: UINT8,
    pub Reserved2: [UINT8; 11usize],
    pub RegBase: UINT64,
    pub RegSize: UINT32,
    pub CmtRegOff: UINT16,
    pub CmtClumpSize: UINT16,
    pub UpScale: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_cmrd"][::core::mem::size_of::<acpi_erdt_cmrd>() - 48usize];
    ["Alignment of acpi_erdt_cmrd"][::core::mem::align_of::<acpi_erdt_cmrd>() - 1usize];
    ["Offset of field: acpi_erdt_cmrd::Header"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, Header) - 0usize];
    ["Offset of field: acpi_erdt_cmrd::Reserved1"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, Reserved1) - 4usize];
    ["Offset of field: acpi_erdt_cmrd::Flags"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, Flags) - 8usize];
    ["Offset of field: acpi_erdt_cmrd::IndexFn"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, IndexFn) - 12usize];
    ["Offset of field: acpi_erdt_cmrd::Reserved2"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, Reserved2) - 13usize];
    ["Offset of field: acpi_erdt_cmrd::RegBase"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, RegBase) - 24usize];
    ["Offset of field: acpi_erdt_cmrd::RegSize"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, RegSize) - 32usize];
    ["Offset of field: acpi_erdt_cmrd::CmtRegOff"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, CmtRegOff) - 36usize];
    ["Offset of field: acpi_erdt_cmrd::CmtClumpSize"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, CmtClumpSize) - 38usize];
    ["Offset of field: acpi_erdt_cmrd::UpScale"]
        [::core::mem::offset_of!(acpi_erdt_cmrd, UpScale) - 40usize];
};
pub type ACPI_ERDT_CMRD = acpi_erdt_cmrd;
#[repr(C, packed)]
pub struct acpi_erdt_ibrd {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub IndexFn: UINT8,
    pub Reserved2: [UINT8; 11usize],
    pub RegBase: UINT64,
    pub RegSize: UINT32,
    pub TotalBwOffset: UINT16,
    pub IOMissBwOffset: UINT16,
    pub TotalBwClump: UINT16,
    pub IOMissBwClump: UINT16,
    pub Reserved3: [UINT8; 7usize],
    pub CounterWidth: UINT8,
    pub UpScale: UINT64,
    pub CorrFactorListLen: UINT32,
    pub CorrFactorList: __IncompleteArrayField<UINT32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_ibrd"][::core::mem::size_of::<acpi_erdt_ibrd>() - 64usize];
    ["Alignment of acpi_erdt_ibrd"][::core::mem::align_of::<acpi_erdt_ibrd>() - 1usize];
    ["Offset of field: acpi_erdt_ibrd::Header"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, Header) - 0usize];
    ["Offset of field: acpi_erdt_ibrd::Reserved1"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, Reserved1) - 4usize];
    ["Offset of field: acpi_erdt_ibrd::Flags"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, Flags) - 8usize];
    ["Offset of field: acpi_erdt_ibrd::IndexFn"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, IndexFn) - 12usize];
    ["Offset of field: acpi_erdt_ibrd::Reserved2"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, Reserved2) - 13usize];
    ["Offset of field: acpi_erdt_ibrd::RegBase"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, RegBase) - 24usize];
    ["Offset of field: acpi_erdt_ibrd::RegSize"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, RegSize) - 32usize];
    ["Offset of field: acpi_erdt_ibrd::TotalBwOffset"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, TotalBwOffset) - 36usize];
    ["Offset of field: acpi_erdt_ibrd::IOMissBwOffset"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, IOMissBwOffset) - 38usize];
    ["Offset of field: acpi_erdt_ibrd::TotalBwClump"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, TotalBwClump) - 40usize];
    ["Offset of field: acpi_erdt_ibrd::IOMissBwClump"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, IOMissBwClump) - 42usize];
    ["Offset of field: acpi_erdt_ibrd::Reserved3"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, Reserved3) - 44usize];
    ["Offset of field: acpi_erdt_ibrd::CounterWidth"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, CounterWidth) - 51usize];
    ["Offset of field: acpi_erdt_ibrd::UpScale"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, UpScale) - 52usize];
    ["Offset of field: acpi_erdt_ibrd::CorrFactorListLen"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, CorrFactorListLen) - 60usize];
    ["Offset of field: acpi_erdt_ibrd::CorrFactorList"]
        [::core::mem::offset_of!(acpi_erdt_ibrd, CorrFactorList) - 64usize];
};
pub type ACPI_ERDT_IBRD = acpi_erdt_ibrd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erdt_ibad {
    pub Header: ACPI_SUBTBL_HDR_16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_ibad"][::core::mem::size_of::<acpi_erdt_ibad>() - 4usize];
    ["Alignment of acpi_erdt_ibad"][::core::mem::align_of::<acpi_erdt_ibad>() - 1usize];
    ["Offset of field: acpi_erdt_ibad::Header"]
        [::core::mem::offset_of!(acpi_erdt_ibad, Header) - 0usize];
};
pub type ACPI_ERDT_IBAD = acpi_erdt_ibad;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erdt_card {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub ContentionMask: UINT32,
    pub IndexFn: UINT8,
    pub Reserved2: [UINT8; 7usize],
    pub RegBase: UINT64,
    pub RegSize: UINT32,
    pub CatRegOffset: UINT16,
    pub CatRegBlockSize: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_erdt_card"][::core::mem::size_of::<acpi_erdt_card>() - 40usize];
    ["Alignment of acpi_erdt_card"][::core::mem::align_of::<acpi_erdt_card>() - 1usize];
    ["Offset of field: acpi_erdt_card::Header"]
        [::core::mem::offset_of!(acpi_erdt_card, Header) - 0usize];
    ["Offset of field: acpi_erdt_card::Reserved1"]
        [::core::mem::offset_of!(acpi_erdt_card, Reserved1) - 4usize];
    ["Offset of field: acpi_erdt_card::Flags"]
        [::core::mem::offset_of!(acpi_erdt_card, Flags) - 8usize];
    ["Offset of field: acpi_erdt_card::ContentionMask"]
        [::core::mem::offset_of!(acpi_erdt_card, ContentionMask) - 12usize];
    ["Offset of field: acpi_erdt_card::IndexFn"]
        [::core::mem::offset_of!(acpi_erdt_card, IndexFn) - 16usize];
    ["Offset of field: acpi_erdt_card::Reserved2"]
        [::core::mem::offset_of!(acpi_erdt_card, Reserved2) - 17usize];
    ["Offset of field: acpi_erdt_card::RegBase"]
        [::core::mem::offset_of!(acpi_erdt_card, RegBase) - 24usize];
    ["Offset of field: acpi_erdt_card::RegSize"]
        [::core::mem::offset_of!(acpi_erdt_card, RegSize) - 32usize];
    ["Offset of field: acpi_erdt_card::CatRegOffset"]
        [::core::mem::offset_of!(acpi_erdt_card, CatRegOffset) - 36usize];
    ["Offset of field: acpi_erdt_card::CatRegBlockSize"]
        [::core::mem::offset_of!(acpi_erdt_card, CatRegBlockSize) - 38usize];
};
pub type ACPI_ERDT_CARD = acpi_erdt_card;
#[doc = " IORT - IO Remapping Table\n\n Conforms to \"IO Remapping Table System Software on ARM Platforms\",\n Document number: ARM DEN 0049E.f, Apr 2024\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_iort {
    pub Header: ACPI_TABLE_HEADER,
    pub NodeCount: UINT32,
    pub NodeOffset: UINT32,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_iort"][::core::mem::size_of::<acpi_table_iort>() - 48usize];
    ["Alignment of acpi_table_iort"][::core::mem::align_of::<acpi_table_iort>() - 1usize];
    ["Offset of field: acpi_table_iort::Header"]
        [::core::mem::offset_of!(acpi_table_iort, Header) - 0usize];
    ["Offset of field: acpi_table_iort::NodeCount"]
        [::core::mem::offset_of!(acpi_table_iort, NodeCount) - 36usize];
    ["Offset of field: acpi_table_iort::NodeOffset"]
        [::core::mem::offset_of!(acpi_table_iort, NodeOffset) - 40usize];
    ["Offset of field: acpi_table_iort::Reserved"]
        [::core::mem::offset_of!(acpi_table_iort, Reserved) - 44usize];
};
#[doc = " IORT - IO Remapping Table\n\n Conforms to \"IO Remapping Table System Software on ARM Platforms\",\n Document number: ARM DEN 0049E.f, Apr 2024\n"]
pub type ACPI_TABLE_IORT = acpi_table_iort;
#[repr(C, packed)]
pub struct acpi_iort_node {
    pub Type: UINT8,
    pub Length: UINT16,
    pub Revision: UINT8,
    pub Identifier: UINT32,
    pub MappingCount: UINT32,
    pub MappingOffset: UINT32,
    pub NodeData: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_node"][::core::mem::size_of::<acpi_iort_node>() - 16usize];
    ["Alignment of acpi_iort_node"][::core::mem::align_of::<acpi_iort_node>() - 1usize];
    ["Offset of field: acpi_iort_node::Type"]
        [::core::mem::offset_of!(acpi_iort_node, Type) - 0usize];
    ["Offset of field: acpi_iort_node::Length"]
        [::core::mem::offset_of!(acpi_iort_node, Length) - 1usize];
    ["Offset of field: acpi_iort_node::Revision"]
        [::core::mem::offset_of!(acpi_iort_node, Revision) - 3usize];
    ["Offset of field: acpi_iort_node::Identifier"]
        [::core::mem::offset_of!(acpi_iort_node, Identifier) - 4usize];
    ["Offset of field: acpi_iort_node::MappingCount"]
        [::core::mem::offset_of!(acpi_iort_node, MappingCount) - 8usize];
    ["Offset of field: acpi_iort_node::MappingOffset"]
        [::core::mem::offset_of!(acpi_iort_node, MappingOffset) - 12usize];
    ["Offset of field: acpi_iort_node::NodeData"]
        [::core::mem::offset_of!(acpi_iort_node, NodeData) - 16usize];
};
pub type ACPI_IORT_NODE = acpi_iort_node;
pub const AcpiIortNodeType_ACPI_IORT_NODE_ITS_GROUP: AcpiIortNodeType = 0;
pub const AcpiIortNodeType_ACPI_IORT_NODE_NAMED_COMPONENT: AcpiIortNodeType = 1;
pub const AcpiIortNodeType_ACPI_IORT_NODE_PCI_ROOT_COMPLEX: AcpiIortNodeType = 2;
pub const AcpiIortNodeType_ACPI_IORT_NODE_SMMU: AcpiIortNodeType = 3;
pub const AcpiIortNodeType_ACPI_IORT_NODE_SMMU_V3: AcpiIortNodeType = 4;
pub const AcpiIortNodeType_ACPI_IORT_NODE_PMCG: AcpiIortNodeType = 5;
pub const AcpiIortNodeType_ACPI_IORT_NODE_RMR: AcpiIortNodeType = 6;
pub type AcpiIortNodeType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_id_mapping {
    pub InputBase: UINT32,
    pub IdCount: UINT32,
    pub OutputBase: UINT32,
    pub OutputReference: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_id_mapping"][::core::mem::size_of::<acpi_iort_id_mapping>() - 20usize];
    ["Alignment of acpi_iort_id_mapping"][::core::mem::align_of::<acpi_iort_id_mapping>() - 1usize];
    ["Offset of field: acpi_iort_id_mapping::InputBase"]
        [::core::mem::offset_of!(acpi_iort_id_mapping, InputBase) - 0usize];
    ["Offset of field: acpi_iort_id_mapping::IdCount"]
        [::core::mem::offset_of!(acpi_iort_id_mapping, IdCount) - 4usize];
    ["Offset of field: acpi_iort_id_mapping::OutputBase"]
        [::core::mem::offset_of!(acpi_iort_id_mapping, OutputBase) - 8usize];
    ["Offset of field: acpi_iort_id_mapping::OutputReference"]
        [::core::mem::offset_of!(acpi_iort_id_mapping, OutputReference) - 12usize];
    ["Offset of field: acpi_iort_id_mapping::Flags"]
        [::core::mem::offset_of!(acpi_iort_id_mapping, Flags) - 16usize];
};
pub type ACPI_IORT_ID_MAPPING = acpi_iort_id_mapping;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_memory_access {
    pub CacheCoherency: UINT32,
    pub Hints: UINT8,
    pub Reserved: UINT16,
    pub MemoryFlags: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_memory_access"][::core::mem::size_of::<acpi_iort_memory_access>() - 8usize];
    ["Alignment of acpi_iort_memory_access"]
        [::core::mem::align_of::<acpi_iort_memory_access>() - 1usize];
    ["Offset of field: acpi_iort_memory_access::CacheCoherency"]
        [::core::mem::offset_of!(acpi_iort_memory_access, CacheCoherency) - 0usize];
    ["Offset of field: acpi_iort_memory_access::Hints"]
        [::core::mem::offset_of!(acpi_iort_memory_access, Hints) - 4usize];
    ["Offset of field: acpi_iort_memory_access::Reserved"]
        [::core::mem::offset_of!(acpi_iort_memory_access, Reserved) - 5usize];
    ["Offset of field: acpi_iort_memory_access::MemoryFlags"]
        [::core::mem::offset_of!(acpi_iort_memory_access, MemoryFlags) - 7usize];
};
pub type ACPI_IORT_MEMORY_ACCESS = acpi_iort_memory_access;
#[repr(C, packed)]
pub struct acpi_iort_its_group {
    pub ItsCount: UINT32,
    pub Identifiers: __IncompleteArrayField<UINT32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_its_group"][::core::mem::size_of::<acpi_iort_its_group>() - 4usize];
    ["Alignment of acpi_iort_its_group"][::core::mem::align_of::<acpi_iort_its_group>() - 1usize];
    ["Offset of field: acpi_iort_its_group::ItsCount"]
        [::core::mem::offset_of!(acpi_iort_its_group, ItsCount) - 0usize];
    ["Offset of field: acpi_iort_its_group::Identifiers"]
        [::core::mem::offset_of!(acpi_iort_its_group, Identifiers) - 4usize];
};
pub type ACPI_IORT_ITS_GROUP = acpi_iort_its_group;
#[repr(C, packed)]
pub struct acpi_iort_named_component {
    pub NodeFlags: UINT32,
    pub MemoryProperties: UINT64,
    pub MemoryAddressLimit: UINT8,
    pub DeviceName: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_named_component"]
        [::core::mem::size_of::<acpi_iort_named_component>() - 13usize];
    ["Alignment of acpi_iort_named_component"]
        [::core::mem::align_of::<acpi_iort_named_component>() - 1usize];
    ["Offset of field: acpi_iort_named_component::NodeFlags"]
        [::core::mem::offset_of!(acpi_iort_named_component, NodeFlags) - 0usize];
    ["Offset of field: acpi_iort_named_component::MemoryProperties"]
        [::core::mem::offset_of!(acpi_iort_named_component, MemoryProperties) - 4usize];
    ["Offset of field: acpi_iort_named_component::MemoryAddressLimit"]
        [::core::mem::offset_of!(acpi_iort_named_component, MemoryAddressLimit) - 12usize];
    ["Offset of field: acpi_iort_named_component::DeviceName"]
        [::core::mem::offset_of!(acpi_iort_named_component, DeviceName) - 13usize];
};
pub type ACPI_IORT_NAMED_COMPONENT = acpi_iort_named_component;
#[repr(C, packed)]
pub struct acpi_iort_root_complex {
    pub MemoryProperties: UINT64,
    pub AtsAttribute: UINT32,
    pub PciSegmentNumber: UINT32,
    pub MemoryAddressLimit: UINT8,
    pub PasidCapabilities: UINT16,
    pub Reserved: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_root_complex"][::core::mem::size_of::<acpi_iort_root_complex>() - 19usize];
    ["Alignment of acpi_iort_root_complex"]
        [::core::mem::align_of::<acpi_iort_root_complex>() - 1usize];
    ["Offset of field: acpi_iort_root_complex::MemoryProperties"]
        [::core::mem::offset_of!(acpi_iort_root_complex, MemoryProperties) - 0usize];
    ["Offset of field: acpi_iort_root_complex::AtsAttribute"]
        [::core::mem::offset_of!(acpi_iort_root_complex, AtsAttribute) - 8usize];
    ["Offset of field: acpi_iort_root_complex::PciSegmentNumber"]
        [::core::mem::offset_of!(acpi_iort_root_complex, PciSegmentNumber) - 12usize];
    ["Offset of field: acpi_iort_root_complex::MemoryAddressLimit"]
        [::core::mem::offset_of!(acpi_iort_root_complex, MemoryAddressLimit) - 16usize];
    ["Offset of field: acpi_iort_root_complex::PasidCapabilities"]
        [::core::mem::offset_of!(acpi_iort_root_complex, PasidCapabilities) - 17usize];
    ["Offset of field: acpi_iort_root_complex::Reserved"]
        [::core::mem::offset_of!(acpi_iort_root_complex, Reserved) - 19usize];
};
pub type ACPI_IORT_ROOT_COMPLEX = acpi_iort_root_complex;
#[repr(C, packed)]
pub struct acpi_iort_smmu {
    pub BaseAddress: UINT64,
    pub Span: UINT64,
    pub Model: UINT32,
    pub Flags: UINT32,
    pub GlobalInterruptOffset: UINT32,
    pub ContextInterruptCount: UINT32,
    pub ContextInterruptOffset: UINT32,
    pub PmuInterruptCount: UINT32,
    pub PmuInterruptOffset: UINT32,
    pub Interrupts: __IncompleteArrayField<UINT64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_smmu"][::core::mem::size_of::<acpi_iort_smmu>() - 44usize];
    ["Alignment of acpi_iort_smmu"][::core::mem::align_of::<acpi_iort_smmu>() - 1usize];
    ["Offset of field: acpi_iort_smmu::BaseAddress"]
        [::core::mem::offset_of!(acpi_iort_smmu, BaseAddress) - 0usize];
    ["Offset of field: acpi_iort_smmu::Span"]
        [::core::mem::offset_of!(acpi_iort_smmu, Span) - 8usize];
    ["Offset of field: acpi_iort_smmu::Model"]
        [::core::mem::offset_of!(acpi_iort_smmu, Model) - 16usize];
    ["Offset of field: acpi_iort_smmu::Flags"]
        [::core::mem::offset_of!(acpi_iort_smmu, Flags) - 20usize];
    ["Offset of field: acpi_iort_smmu::GlobalInterruptOffset"]
        [::core::mem::offset_of!(acpi_iort_smmu, GlobalInterruptOffset) - 24usize];
    ["Offset of field: acpi_iort_smmu::ContextInterruptCount"]
        [::core::mem::offset_of!(acpi_iort_smmu, ContextInterruptCount) - 28usize];
    ["Offset of field: acpi_iort_smmu::ContextInterruptOffset"]
        [::core::mem::offset_of!(acpi_iort_smmu, ContextInterruptOffset) - 32usize];
    ["Offset of field: acpi_iort_smmu::PmuInterruptCount"]
        [::core::mem::offset_of!(acpi_iort_smmu, PmuInterruptCount) - 36usize];
    ["Offset of field: acpi_iort_smmu::PmuInterruptOffset"]
        [::core::mem::offset_of!(acpi_iort_smmu, PmuInterruptOffset) - 40usize];
    ["Offset of field: acpi_iort_smmu::Interrupts"]
        [::core::mem::offset_of!(acpi_iort_smmu, Interrupts) - 44usize];
};
pub type ACPI_IORT_SMMU = acpi_iort_smmu;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_smmu_gsi {
    pub NSgIrpt: UINT32,
    pub NSgIrptFlags: UINT32,
    pub NSgCfgIrpt: UINT32,
    pub NSgCfgIrptFlags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_smmu_gsi"][::core::mem::size_of::<acpi_iort_smmu_gsi>() - 16usize];
    ["Alignment of acpi_iort_smmu_gsi"][::core::mem::align_of::<acpi_iort_smmu_gsi>() - 1usize];
    ["Offset of field: acpi_iort_smmu_gsi::NSgIrpt"]
        [::core::mem::offset_of!(acpi_iort_smmu_gsi, NSgIrpt) - 0usize];
    ["Offset of field: acpi_iort_smmu_gsi::NSgIrptFlags"]
        [::core::mem::offset_of!(acpi_iort_smmu_gsi, NSgIrptFlags) - 4usize];
    ["Offset of field: acpi_iort_smmu_gsi::NSgCfgIrpt"]
        [::core::mem::offset_of!(acpi_iort_smmu_gsi, NSgCfgIrpt) - 8usize];
    ["Offset of field: acpi_iort_smmu_gsi::NSgCfgIrptFlags"]
        [::core::mem::offset_of!(acpi_iort_smmu_gsi, NSgCfgIrptFlags) - 12usize];
};
pub type ACPI_IORT_SMMU_GSI = acpi_iort_smmu_gsi;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_smmu_v3 {
    pub BaseAddress: UINT64,
    pub Flags: UINT32,
    pub Reserved: UINT32,
    pub VatosAddress: UINT64,
    pub Model: UINT32,
    pub EventGsiv: UINT32,
    pub PriGsiv: UINT32,
    pub GerrGsiv: UINT32,
    pub SyncGsiv: UINT32,
    pub Pxm: UINT32,
    pub IdMappingIndex: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_smmu_v3"][::core::mem::size_of::<acpi_iort_smmu_v3>() - 52usize];
    ["Alignment of acpi_iort_smmu_v3"][::core::mem::align_of::<acpi_iort_smmu_v3>() - 1usize];
    ["Offset of field: acpi_iort_smmu_v3::BaseAddress"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, BaseAddress) - 0usize];
    ["Offset of field: acpi_iort_smmu_v3::Flags"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, Flags) - 8usize];
    ["Offset of field: acpi_iort_smmu_v3::Reserved"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, Reserved) - 12usize];
    ["Offset of field: acpi_iort_smmu_v3::VatosAddress"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, VatosAddress) - 16usize];
    ["Offset of field: acpi_iort_smmu_v3::Model"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, Model) - 24usize];
    ["Offset of field: acpi_iort_smmu_v3::EventGsiv"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, EventGsiv) - 28usize];
    ["Offset of field: acpi_iort_smmu_v3::PriGsiv"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, PriGsiv) - 32usize];
    ["Offset of field: acpi_iort_smmu_v3::GerrGsiv"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, GerrGsiv) - 36usize];
    ["Offset of field: acpi_iort_smmu_v3::SyncGsiv"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, SyncGsiv) - 40usize];
    ["Offset of field: acpi_iort_smmu_v3::Pxm"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, Pxm) - 44usize];
    ["Offset of field: acpi_iort_smmu_v3::IdMappingIndex"]
        [::core::mem::offset_of!(acpi_iort_smmu_v3, IdMappingIndex) - 48usize];
};
pub type ACPI_IORT_SMMU_V3 = acpi_iort_smmu_v3;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_pmcg {
    pub Page0BaseAddress: UINT64,
    pub OverflowGsiv: UINT32,
    pub NodeReference: UINT32,
    pub Page1BaseAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_pmcg"][::core::mem::size_of::<acpi_iort_pmcg>() - 24usize];
    ["Alignment of acpi_iort_pmcg"][::core::mem::align_of::<acpi_iort_pmcg>() - 1usize];
    ["Offset of field: acpi_iort_pmcg::Page0BaseAddress"]
        [::core::mem::offset_of!(acpi_iort_pmcg, Page0BaseAddress) - 0usize];
    ["Offset of field: acpi_iort_pmcg::OverflowGsiv"]
        [::core::mem::offset_of!(acpi_iort_pmcg, OverflowGsiv) - 8usize];
    ["Offset of field: acpi_iort_pmcg::NodeReference"]
        [::core::mem::offset_of!(acpi_iort_pmcg, NodeReference) - 12usize];
    ["Offset of field: acpi_iort_pmcg::Page1BaseAddress"]
        [::core::mem::offset_of!(acpi_iort_pmcg, Page1BaseAddress) - 16usize];
};
pub type ACPI_IORT_PMCG = acpi_iort_pmcg;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_rmr {
    pub Flags: UINT32,
    pub RmrCount: UINT32,
    pub RmrOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_rmr"][::core::mem::size_of::<acpi_iort_rmr>() - 12usize];
    ["Alignment of acpi_iort_rmr"][::core::mem::align_of::<acpi_iort_rmr>() - 1usize];
    ["Offset of field: acpi_iort_rmr::Flags"]
        [::core::mem::offset_of!(acpi_iort_rmr, Flags) - 0usize];
    ["Offset of field: acpi_iort_rmr::RmrCount"]
        [::core::mem::offset_of!(acpi_iort_rmr, RmrCount) - 4usize];
    ["Offset of field: acpi_iort_rmr::RmrOffset"]
        [::core::mem::offset_of!(acpi_iort_rmr, RmrOffset) - 8usize];
};
pub type ACPI_IORT_RMR = acpi_iort_rmr;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_rmr_desc {
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_iort_rmr_desc"][::core::mem::size_of::<acpi_iort_rmr_desc>() - 20usize];
    ["Alignment of acpi_iort_rmr_desc"][::core::mem::align_of::<acpi_iort_rmr_desc>() - 1usize];
    ["Offset of field: acpi_iort_rmr_desc::BaseAddress"]
        [::core::mem::offset_of!(acpi_iort_rmr_desc, BaseAddress) - 0usize];
    ["Offset of field: acpi_iort_rmr_desc::Length"]
        [::core::mem::offset_of!(acpi_iort_rmr_desc, Length) - 8usize];
    ["Offset of field: acpi_iort_rmr_desc::Reserved"]
        [::core::mem::offset_of!(acpi_iort_rmr_desc, Reserved) - 16usize];
};
pub type ACPI_IORT_RMR_DESC = acpi_iort_rmr_desc;
#[doc = " IVRS - I/O Virtualization Reporting Structure\n        Version 1\n\n Conforms to \"AMD I/O Virtualization Technology (IOMMU) Specification\",\n Revision 1.26, February 2009.\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ivrs {
    pub Header: ACPI_TABLE_HEADER,
    pub Info: UINT32,
    pub Reserved: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_ivrs"][::core::mem::size_of::<acpi_table_ivrs>() - 48usize];
    ["Alignment of acpi_table_ivrs"][::core::mem::align_of::<acpi_table_ivrs>() - 1usize];
    ["Offset of field: acpi_table_ivrs::Header"]
        [::core::mem::offset_of!(acpi_table_ivrs, Header) - 0usize];
    ["Offset of field: acpi_table_ivrs::Info"]
        [::core::mem::offset_of!(acpi_table_ivrs, Info) - 36usize];
    ["Offset of field: acpi_table_ivrs::Reserved"]
        [::core::mem::offset_of!(acpi_table_ivrs, Reserved) - 40usize];
};
#[doc = " IVRS - I/O Virtualization Reporting Structure\n        Version 1\n\n Conforms to \"AMD I/O Virtualization Technology (IOMMU) Specification\",\n Revision 1.26, February 2009.\n"]
pub type ACPI_TABLE_IVRS = acpi_table_ivrs;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_header {
    pub Type: UINT8,
    pub Flags: UINT8,
    pub Length: UINT16,
    pub DeviceId: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_header"][::core::mem::size_of::<acpi_ivrs_header>() - 6usize];
    ["Alignment of acpi_ivrs_header"][::core::mem::align_of::<acpi_ivrs_header>() - 1usize];
    ["Offset of field: acpi_ivrs_header::Type"]
        [::core::mem::offset_of!(acpi_ivrs_header, Type) - 0usize];
    ["Offset of field: acpi_ivrs_header::Flags"]
        [::core::mem::offset_of!(acpi_ivrs_header, Flags) - 1usize];
    ["Offset of field: acpi_ivrs_header::Length"]
        [::core::mem::offset_of!(acpi_ivrs_header, Length) - 2usize];
    ["Offset of field: acpi_ivrs_header::DeviceId"]
        [::core::mem::offset_of!(acpi_ivrs_header, DeviceId) - 4usize];
};
pub type ACPI_IVRS_HEADER = acpi_ivrs_header;
pub const AcpiIvrsType_ACPI_IVRS_TYPE_HARDWARE1: AcpiIvrsType = 16;
pub const AcpiIvrsType_ACPI_IVRS_TYPE_HARDWARE2: AcpiIvrsType = 17;
pub const AcpiIvrsType_ACPI_IVRS_TYPE_HARDWARE3: AcpiIvrsType = 64;
pub const AcpiIvrsType_ACPI_IVRS_TYPE_MEMORY1: AcpiIvrsType = 32;
pub const AcpiIvrsType_ACPI_IVRS_TYPE_MEMORY2: AcpiIvrsType = 33;
pub const AcpiIvrsType_ACPI_IVRS_TYPE_MEMORY3: AcpiIvrsType = 34;
pub type AcpiIvrsType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_hardware_10 {
    pub Header: ACPI_IVRS_HEADER,
    pub CapabilityOffset: UINT16,
    pub BaseAddress: UINT64,
    pub PciSegmentGroup: UINT16,
    pub Info: UINT16,
    pub FeatureReporting: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_hardware_10"][::core::mem::size_of::<acpi_ivrs_hardware_10>() - 24usize];
    ["Alignment of acpi_ivrs_hardware_10"]
        [::core::mem::align_of::<acpi_ivrs_hardware_10>() - 1usize];
    ["Offset of field: acpi_ivrs_hardware_10::Header"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_10, Header) - 0usize];
    ["Offset of field: acpi_ivrs_hardware_10::CapabilityOffset"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_10, CapabilityOffset) - 6usize];
    ["Offset of field: acpi_ivrs_hardware_10::BaseAddress"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_10, BaseAddress) - 8usize];
    ["Offset of field: acpi_ivrs_hardware_10::PciSegmentGroup"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_10, PciSegmentGroup) - 16usize];
    ["Offset of field: acpi_ivrs_hardware_10::Info"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_10, Info) - 18usize];
    ["Offset of field: acpi_ivrs_hardware_10::FeatureReporting"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_10, FeatureReporting) - 20usize];
};
pub type ACPI_IVRS_HARDWARE1 = acpi_ivrs_hardware_10;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_hardware_11 {
    pub Header: ACPI_IVRS_HEADER,
    pub CapabilityOffset: UINT16,
    pub BaseAddress: UINT64,
    pub PciSegmentGroup: UINT16,
    pub Info: UINT16,
    pub Attributes: UINT32,
    pub EfrRegisterImage: UINT64,
    pub Reserved: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_hardware_11"][::core::mem::size_of::<acpi_ivrs_hardware_11>() - 40usize];
    ["Alignment of acpi_ivrs_hardware_11"]
        [::core::mem::align_of::<acpi_ivrs_hardware_11>() - 1usize];
    ["Offset of field: acpi_ivrs_hardware_11::Header"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, Header) - 0usize];
    ["Offset of field: acpi_ivrs_hardware_11::CapabilityOffset"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, CapabilityOffset) - 6usize];
    ["Offset of field: acpi_ivrs_hardware_11::BaseAddress"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, BaseAddress) - 8usize];
    ["Offset of field: acpi_ivrs_hardware_11::PciSegmentGroup"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, PciSegmentGroup) - 16usize];
    ["Offset of field: acpi_ivrs_hardware_11::Info"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, Info) - 18usize];
    ["Offset of field: acpi_ivrs_hardware_11::Attributes"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, Attributes) - 20usize];
    ["Offset of field: acpi_ivrs_hardware_11::EfrRegisterImage"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, EfrRegisterImage) - 24usize];
    ["Offset of field: acpi_ivrs_hardware_11::Reserved"]
        [::core::mem::offset_of!(acpi_ivrs_hardware_11, Reserved) - 32usize];
};
pub type ACPI_IVRS_HARDWARE2 = acpi_ivrs_hardware_11;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_de_header {
    pub Type: UINT8,
    pub Id: UINT16,
    pub DataSetting: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_de_header"][::core::mem::size_of::<acpi_ivrs_de_header>() - 4usize];
    ["Alignment of acpi_ivrs_de_header"][::core::mem::align_of::<acpi_ivrs_de_header>() - 1usize];
    ["Offset of field: acpi_ivrs_de_header::Type"]
        [::core::mem::offset_of!(acpi_ivrs_de_header, Type) - 0usize];
    ["Offset of field: acpi_ivrs_de_header::Id"]
        [::core::mem::offset_of!(acpi_ivrs_de_header, Id) - 1usize];
    ["Offset of field: acpi_ivrs_de_header::DataSetting"]
        [::core::mem::offset_of!(acpi_ivrs_de_header, DataSetting) - 3usize];
};
pub type ACPI_IVRS_DE_HEADER = acpi_ivrs_de_header;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_PAD4: AcpiIvrsDeviceEntryType = 0;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_ALL: AcpiIvrsDeviceEntryType = 1;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_SELECT: AcpiIvrsDeviceEntryType = 2;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_START: AcpiIvrsDeviceEntryType = 3;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_END: AcpiIvrsDeviceEntryType = 4;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_PAD8: AcpiIvrsDeviceEntryType = 64;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_NOT_USED: AcpiIvrsDeviceEntryType = 65;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_ALIAS_SELECT: AcpiIvrsDeviceEntryType = 66;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_ALIAS_START: AcpiIvrsDeviceEntryType = 67;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_EXT_SELECT: AcpiIvrsDeviceEntryType = 70;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_EXT_START: AcpiIvrsDeviceEntryType = 71;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_SPECIAL: AcpiIvrsDeviceEntryType = 72;
pub const AcpiIvrsDeviceEntryType_ACPI_IVRS_TYPE_HID: AcpiIvrsDeviceEntryType = 240;
pub type AcpiIvrsDeviceEntryType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device4 {
    pub Header: ACPI_IVRS_DE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_device4"][::core::mem::size_of::<acpi_ivrs_device4>() - 4usize];
    ["Alignment of acpi_ivrs_device4"][::core::mem::align_of::<acpi_ivrs_device4>() - 1usize];
    ["Offset of field: acpi_ivrs_device4::Header"]
        [::core::mem::offset_of!(acpi_ivrs_device4, Header) - 0usize];
};
pub type ACPI_IVRS_DEVICE4 = acpi_ivrs_device4;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device8a {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub Reserved1: UINT8,
    pub UsedId: UINT16,
    pub Reserved2: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_device8a"][::core::mem::size_of::<acpi_ivrs_device8a>() - 8usize];
    ["Alignment of acpi_ivrs_device8a"][::core::mem::align_of::<acpi_ivrs_device8a>() - 1usize];
    ["Offset of field: acpi_ivrs_device8a::Header"]
        [::core::mem::offset_of!(acpi_ivrs_device8a, Header) - 0usize];
    ["Offset of field: acpi_ivrs_device8a::Reserved1"]
        [::core::mem::offset_of!(acpi_ivrs_device8a, Reserved1) - 4usize];
    ["Offset of field: acpi_ivrs_device8a::UsedId"]
        [::core::mem::offset_of!(acpi_ivrs_device8a, UsedId) - 5usize];
    ["Offset of field: acpi_ivrs_device8a::Reserved2"]
        [::core::mem::offset_of!(acpi_ivrs_device8a, Reserved2) - 7usize];
};
pub type ACPI_IVRS_DEVICE8A = acpi_ivrs_device8a;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device8b {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub ExtendedData: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_device8b"][::core::mem::size_of::<acpi_ivrs_device8b>() - 8usize];
    ["Alignment of acpi_ivrs_device8b"][::core::mem::align_of::<acpi_ivrs_device8b>() - 1usize];
    ["Offset of field: acpi_ivrs_device8b::Header"]
        [::core::mem::offset_of!(acpi_ivrs_device8b, Header) - 0usize];
    ["Offset of field: acpi_ivrs_device8b::ExtendedData"]
        [::core::mem::offset_of!(acpi_ivrs_device8b, ExtendedData) - 4usize];
};
pub type ACPI_IVRS_DEVICE8B = acpi_ivrs_device8b;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device8c {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub Handle: UINT8,
    pub UsedId: UINT16,
    pub Variety: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_device8c"][::core::mem::size_of::<acpi_ivrs_device8c>() - 8usize];
    ["Alignment of acpi_ivrs_device8c"][::core::mem::align_of::<acpi_ivrs_device8c>() - 1usize];
    ["Offset of field: acpi_ivrs_device8c::Header"]
        [::core::mem::offset_of!(acpi_ivrs_device8c, Header) - 0usize];
    ["Offset of field: acpi_ivrs_device8c::Handle"]
        [::core::mem::offset_of!(acpi_ivrs_device8c, Handle) - 4usize];
    ["Offset of field: acpi_ivrs_device8c::UsedId"]
        [::core::mem::offset_of!(acpi_ivrs_device8c, UsedId) - 5usize];
    ["Offset of field: acpi_ivrs_device8c::Variety"]
        [::core::mem::offset_of!(acpi_ivrs_device8c, Variety) - 7usize];
};
pub type ACPI_IVRS_DEVICE8C = acpi_ivrs_device8c;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device_hid {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub AcpiHid: UINT64,
    pub AcpiCid: UINT64,
    pub UidType: UINT8,
    pub UidLength: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_device_hid"][::core::mem::size_of::<acpi_ivrs_device_hid>() - 22usize];
    ["Alignment of acpi_ivrs_device_hid"][::core::mem::align_of::<acpi_ivrs_device_hid>() - 1usize];
    ["Offset of field: acpi_ivrs_device_hid::Header"]
        [::core::mem::offset_of!(acpi_ivrs_device_hid, Header) - 0usize];
    ["Offset of field: acpi_ivrs_device_hid::AcpiHid"]
        [::core::mem::offset_of!(acpi_ivrs_device_hid, AcpiHid) - 4usize];
    ["Offset of field: acpi_ivrs_device_hid::AcpiCid"]
        [::core::mem::offset_of!(acpi_ivrs_device_hid, AcpiCid) - 12usize];
    ["Offset of field: acpi_ivrs_device_hid::UidType"]
        [::core::mem::offset_of!(acpi_ivrs_device_hid, UidType) - 20usize];
    ["Offset of field: acpi_ivrs_device_hid::UidLength"]
        [::core::mem::offset_of!(acpi_ivrs_device_hid, UidLength) - 21usize];
};
pub type ACPI_IVRS_DEVICE_HID = acpi_ivrs_device_hid;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_memory {
    pub Header: ACPI_IVRS_HEADER,
    pub AuxData: UINT16,
    pub Reserved: UINT64,
    pub StartAddress: UINT64,
    pub MemoryLength: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ivrs_memory"][::core::mem::size_of::<acpi_ivrs_memory>() - 32usize];
    ["Alignment of acpi_ivrs_memory"][::core::mem::align_of::<acpi_ivrs_memory>() - 1usize];
    ["Offset of field: acpi_ivrs_memory::Header"]
        [::core::mem::offset_of!(acpi_ivrs_memory, Header) - 0usize];
    ["Offset of field: acpi_ivrs_memory::AuxData"]
        [::core::mem::offset_of!(acpi_ivrs_memory, AuxData) - 6usize];
    ["Offset of field: acpi_ivrs_memory::Reserved"]
        [::core::mem::offset_of!(acpi_ivrs_memory, Reserved) - 8usize];
    ["Offset of field: acpi_ivrs_memory::StartAddress"]
        [::core::mem::offset_of!(acpi_ivrs_memory, StartAddress) - 16usize];
    ["Offset of field: acpi_ivrs_memory::MemoryLength"]
        [::core::mem::offset_of!(acpi_ivrs_memory, MemoryLength) - 24usize];
};
pub type ACPI_IVRS_MEMORY = acpi_ivrs_memory;
#[doc = " LPIT - Low Power Idle Table\n\n Conforms to \"ACPI Low Power Idle Table (LPIT)\" July 2014.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_lpit {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_lpit"][::core::mem::size_of::<acpi_table_lpit>() - 36usize];
    ["Alignment of acpi_table_lpit"][::core::mem::align_of::<acpi_table_lpit>() - 1usize];
    ["Offset of field: acpi_table_lpit::Header"]
        [::core::mem::offset_of!(acpi_table_lpit, Header) - 0usize];
};
#[doc = " LPIT - Low Power Idle Table\n\n Conforms to \"ACPI Low Power Idle Table (LPIT)\" July 2014.\n"]
pub type ACPI_TABLE_LPIT = acpi_table_lpit;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_lpit_header {
    pub Type: UINT32,
    pub Length: UINT32,
    pub UniqueId: UINT16,
    pub Reserved: UINT16,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_lpit_header"][::core::mem::size_of::<acpi_lpit_header>() - 16usize];
    ["Alignment of acpi_lpit_header"][::core::mem::align_of::<acpi_lpit_header>() - 1usize];
    ["Offset of field: acpi_lpit_header::Type"]
        [::core::mem::offset_of!(acpi_lpit_header, Type) - 0usize];
    ["Offset of field: acpi_lpit_header::Length"]
        [::core::mem::offset_of!(acpi_lpit_header, Length) - 4usize];
    ["Offset of field: acpi_lpit_header::UniqueId"]
        [::core::mem::offset_of!(acpi_lpit_header, UniqueId) - 8usize];
    ["Offset of field: acpi_lpit_header::Reserved"]
        [::core::mem::offset_of!(acpi_lpit_header, Reserved) - 10usize];
    ["Offset of field: acpi_lpit_header::Flags"]
        [::core::mem::offset_of!(acpi_lpit_header, Flags) - 12usize];
};
pub type ACPI_LPIT_HEADER = acpi_lpit_header;
pub const AcpiLpitType_ACPI_LPIT_TYPE_NATIVE_CSTATE: AcpiLpitType = 0;
pub const AcpiLpitType_ACPI_LPIT_TYPE_RESERVED: AcpiLpitType = 1;
pub type AcpiLpitType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_lpit_native {
    pub Header: ACPI_LPIT_HEADER,
    pub EntryTrigger: ACPI_GENERIC_ADDRESS,
    pub Residency: UINT32,
    pub Latency: UINT32,
    pub ResidencyCounter: ACPI_GENERIC_ADDRESS,
    pub CounterFrequency: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_lpit_native"][::core::mem::size_of::<acpi_lpit_native>() - 56usize];
    ["Alignment of acpi_lpit_native"][::core::mem::align_of::<acpi_lpit_native>() - 1usize];
    ["Offset of field: acpi_lpit_native::Header"]
        [::core::mem::offset_of!(acpi_lpit_native, Header) - 0usize];
    ["Offset of field: acpi_lpit_native::EntryTrigger"]
        [::core::mem::offset_of!(acpi_lpit_native, EntryTrigger) - 16usize];
    ["Offset of field: acpi_lpit_native::Residency"]
        [::core::mem::offset_of!(acpi_lpit_native, Residency) - 28usize];
    ["Offset of field: acpi_lpit_native::Latency"]
        [::core::mem::offset_of!(acpi_lpit_native, Latency) - 32usize];
    ["Offset of field: acpi_lpit_native::ResidencyCounter"]
        [::core::mem::offset_of!(acpi_lpit_native, ResidencyCounter) - 36usize];
    ["Offset of field: acpi_lpit_native::CounterFrequency"]
        [::core::mem::offset_of!(acpi_lpit_native, CounterFrequency) - 48usize];
};
pub type ACPI_LPIT_NATIVE = acpi_lpit_native;
#[doc = " MADT - Multiple APIC Description Table\n        Version 3\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_madt {
    pub Header: ACPI_TABLE_HEADER,
    pub Address: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_madt"][::core::mem::size_of::<acpi_table_madt>() - 44usize];
    ["Alignment of acpi_table_madt"][::core::mem::align_of::<acpi_table_madt>() - 1usize];
    ["Offset of field: acpi_table_madt::Header"]
        [::core::mem::offset_of!(acpi_table_madt, Header) - 0usize];
    ["Offset of field: acpi_table_madt::Address"]
        [::core::mem::offset_of!(acpi_table_madt, Address) - 36usize];
    ["Offset of field: acpi_table_madt::Flags"]
        [::core::mem::offset_of!(acpi_table_madt, Flags) - 40usize];
};
#[doc = " MADT - Multiple APIC Description Table\n        Version 3\n"]
pub type ACPI_TABLE_MADT = acpi_table_madt;
pub const AcpiMadtType_ACPI_MADT_TYPE_LOCAL_APIC: AcpiMadtType = 0;
pub const AcpiMadtType_ACPI_MADT_TYPE_IO_APIC: AcpiMadtType = 1;
pub const AcpiMadtType_ACPI_MADT_TYPE_INTERRUPT_OVERRIDE: AcpiMadtType = 2;
pub const AcpiMadtType_ACPI_MADT_TYPE_NMI_SOURCE: AcpiMadtType = 3;
pub const AcpiMadtType_ACPI_MADT_TYPE_LOCAL_APIC_NMI: AcpiMadtType = 4;
pub const AcpiMadtType_ACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE: AcpiMadtType = 5;
pub const AcpiMadtType_ACPI_MADT_TYPE_IO_SAPIC: AcpiMadtType = 6;
pub const AcpiMadtType_ACPI_MADT_TYPE_LOCAL_SAPIC: AcpiMadtType = 7;
pub const AcpiMadtType_ACPI_MADT_TYPE_INTERRUPT_SOURCE: AcpiMadtType = 8;
pub const AcpiMadtType_ACPI_MADT_TYPE_LOCAL_X2APIC: AcpiMadtType = 9;
pub const AcpiMadtType_ACPI_MADT_TYPE_LOCAL_X2APIC_NMI: AcpiMadtType = 10;
pub const AcpiMadtType_ACPI_MADT_TYPE_GENERIC_INTERRUPT: AcpiMadtType = 11;
pub const AcpiMadtType_ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR: AcpiMadtType = 12;
pub const AcpiMadtType_ACPI_MADT_TYPE_GENERIC_MSI_FRAME: AcpiMadtType = 13;
pub const AcpiMadtType_ACPI_MADT_TYPE_GENERIC_REDISTRIBUTOR: AcpiMadtType = 14;
pub const AcpiMadtType_ACPI_MADT_TYPE_GENERIC_TRANSLATOR: AcpiMadtType = 15;
pub const AcpiMadtType_ACPI_MADT_TYPE_MULTIPROC_WAKEUP: AcpiMadtType = 16;
pub const AcpiMadtType_ACPI_MADT_TYPE_CORE_PIC: AcpiMadtType = 17;
pub const AcpiMadtType_ACPI_MADT_TYPE_LIO_PIC: AcpiMadtType = 18;
pub const AcpiMadtType_ACPI_MADT_TYPE_HT_PIC: AcpiMadtType = 19;
pub const AcpiMadtType_ACPI_MADT_TYPE_EIO_PIC: AcpiMadtType = 20;
pub const AcpiMadtType_ACPI_MADT_TYPE_MSI_PIC: AcpiMadtType = 21;
pub const AcpiMadtType_ACPI_MADT_TYPE_BIO_PIC: AcpiMadtType = 22;
pub const AcpiMadtType_ACPI_MADT_TYPE_LPC_PIC: AcpiMadtType = 23;
pub const AcpiMadtType_ACPI_MADT_TYPE_RINTC: AcpiMadtType = 24;
pub const AcpiMadtType_ACPI_MADT_TYPE_IMSIC: AcpiMadtType = 25;
pub const AcpiMadtType_ACPI_MADT_TYPE_APLIC: AcpiMadtType = 26;
pub const AcpiMadtType_ACPI_MADT_TYPE_PLIC: AcpiMadtType = 27;
pub const AcpiMadtType_ACPI_MADT_TYPE_RESERVED: AcpiMadtType = 28;
pub const AcpiMadtType_ACPI_MADT_TYPE_OEM_RESERVED: AcpiMadtType = 128;
pub type AcpiMadtType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_apic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProcessorId: UINT8,
    pub Id: UINT8,
    pub LapicFlags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_local_apic"][::core::mem::size_of::<acpi_madt_local_apic>() - 8usize];
    ["Alignment of acpi_madt_local_apic"][::core::mem::align_of::<acpi_madt_local_apic>() - 1usize];
    ["Offset of field: acpi_madt_local_apic::Header"]
        [::core::mem::offset_of!(acpi_madt_local_apic, Header) - 0usize];
    ["Offset of field: acpi_madt_local_apic::ProcessorId"]
        [::core::mem::offset_of!(acpi_madt_local_apic, ProcessorId) - 2usize];
    ["Offset of field: acpi_madt_local_apic::Id"]
        [::core::mem::offset_of!(acpi_madt_local_apic, Id) - 3usize];
    ["Offset of field: acpi_madt_local_apic::LapicFlags"]
        [::core::mem::offset_of!(acpi_madt_local_apic, LapicFlags) - 4usize];
};
pub type ACPI_MADT_LOCAL_APIC = acpi_madt_local_apic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_io_apic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Id: UINT8,
    pub Reserved: UINT8,
    pub Address: UINT32,
    pub GlobalIrqBase: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_io_apic"][::core::mem::size_of::<acpi_madt_io_apic>() - 12usize];
    ["Alignment of acpi_madt_io_apic"][::core::mem::align_of::<acpi_madt_io_apic>() - 1usize];
    ["Offset of field: acpi_madt_io_apic::Header"]
        [::core::mem::offset_of!(acpi_madt_io_apic, Header) - 0usize];
    ["Offset of field: acpi_madt_io_apic::Id"]
        [::core::mem::offset_of!(acpi_madt_io_apic, Id) - 2usize];
    ["Offset of field: acpi_madt_io_apic::Reserved"]
        [::core::mem::offset_of!(acpi_madt_io_apic, Reserved) - 3usize];
    ["Offset of field: acpi_madt_io_apic::Address"]
        [::core::mem::offset_of!(acpi_madt_io_apic, Address) - 4usize];
    ["Offset of field: acpi_madt_io_apic::GlobalIrqBase"]
        [::core::mem::offset_of!(acpi_madt_io_apic, GlobalIrqBase) - 8usize];
};
pub type ACPI_MADT_IO_APIC = acpi_madt_io_apic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_interrupt_override {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Bus: UINT8,
    pub SourceIrq: UINT8,
    pub GlobalIrq: UINT32,
    pub IntiFlags: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_interrupt_override"]
        [::core::mem::size_of::<acpi_madt_interrupt_override>() - 10usize];
    ["Alignment of acpi_madt_interrupt_override"]
        [::core::mem::align_of::<acpi_madt_interrupt_override>() - 1usize];
    ["Offset of field: acpi_madt_interrupt_override::Header"]
        [::core::mem::offset_of!(acpi_madt_interrupt_override, Header) - 0usize];
    ["Offset of field: acpi_madt_interrupt_override::Bus"]
        [::core::mem::offset_of!(acpi_madt_interrupt_override, Bus) - 2usize];
    ["Offset of field: acpi_madt_interrupt_override::SourceIrq"]
        [::core::mem::offset_of!(acpi_madt_interrupt_override, SourceIrq) - 3usize];
    ["Offset of field: acpi_madt_interrupt_override::GlobalIrq"]
        [::core::mem::offset_of!(acpi_madt_interrupt_override, GlobalIrq) - 4usize];
    ["Offset of field: acpi_madt_interrupt_override::IntiFlags"]
        [::core::mem::offset_of!(acpi_madt_interrupt_override, IntiFlags) - 8usize];
};
pub type ACPI_MADT_INTERRUPT_OVERRIDE = acpi_madt_interrupt_override;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_nmi_source {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub IntiFlags: UINT16,
    pub GlobalIrq: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_nmi_source"][::core::mem::size_of::<acpi_madt_nmi_source>() - 8usize];
    ["Alignment of acpi_madt_nmi_source"][::core::mem::align_of::<acpi_madt_nmi_source>() - 1usize];
    ["Offset of field: acpi_madt_nmi_source::Header"]
        [::core::mem::offset_of!(acpi_madt_nmi_source, Header) - 0usize];
    ["Offset of field: acpi_madt_nmi_source::IntiFlags"]
        [::core::mem::offset_of!(acpi_madt_nmi_source, IntiFlags) - 2usize];
    ["Offset of field: acpi_madt_nmi_source::GlobalIrq"]
        [::core::mem::offset_of!(acpi_madt_nmi_source, GlobalIrq) - 4usize];
};
pub type ACPI_MADT_NMI_SOURCE = acpi_madt_nmi_source;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_apic_nmi {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProcessorId: UINT8,
    pub IntiFlags: UINT16,
    pub Lint: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_local_apic_nmi"]
        [::core::mem::size_of::<acpi_madt_local_apic_nmi>() - 6usize];
    ["Alignment of acpi_madt_local_apic_nmi"]
        [::core::mem::align_of::<acpi_madt_local_apic_nmi>() - 1usize];
    ["Offset of field: acpi_madt_local_apic_nmi::Header"]
        [::core::mem::offset_of!(acpi_madt_local_apic_nmi, Header) - 0usize];
    ["Offset of field: acpi_madt_local_apic_nmi::ProcessorId"]
        [::core::mem::offset_of!(acpi_madt_local_apic_nmi, ProcessorId) - 2usize];
    ["Offset of field: acpi_madt_local_apic_nmi::IntiFlags"]
        [::core::mem::offset_of!(acpi_madt_local_apic_nmi, IntiFlags) - 3usize];
    ["Offset of field: acpi_madt_local_apic_nmi::Lint"]
        [::core::mem::offset_of!(acpi_madt_local_apic_nmi, Lint) - 5usize];
};
pub type ACPI_MADT_LOCAL_APIC_NMI = acpi_madt_local_apic_nmi;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_apic_override {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_local_apic_override"]
        [::core::mem::size_of::<acpi_madt_local_apic_override>() - 12usize];
    ["Alignment of acpi_madt_local_apic_override"]
        [::core::mem::align_of::<acpi_madt_local_apic_override>() - 1usize];
    ["Offset of field: acpi_madt_local_apic_override::Header"]
        [::core::mem::offset_of!(acpi_madt_local_apic_override, Header) - 0usize];
    ["Offset of field: acpi_madt_local_apic_override::Reserved"]
        [::core::mem::offset_of!(acpi_madt_local_apic_override, Reserved) - 2usize];
    ["Offset of field: acpi_madt_local_apic_override::Address"]
        [::core::mem::offset_of!(acpi_madt_local_apic_override, Address) - 4usize];
};
pub type ACPI_MADT_LOCAL_APIC_OVERRIDE = acpi_madt_local_apic_override;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_io_sapic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Id: UINT8,
    pub Reserved: UINT8,
    pub GlobalIrqBase: UINT32,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_io_sapic"][::core::mem::size_of::<acpi_madt_io_sapic>() - 16usize];
    ["Alignment of acpi_madt_io_sapic"][::core::mem::align_of::<acpi_madt_io_sapic>() - 1usize];
    ["Offset of field: acpi_madt_io_sapic::Header"]
        [::core::mem::offset_of!(acpi_madt_io_sapic, Header) - 0usize];
    ["Offset of field: acpi_madt_io_sapic::Id"]
        [::core::mem::offset_of!(acpi_madt_io_sapic, Id) - 2usize];
    ["Offset of field: acpi_madt_io_sapic::Reserved"]
        [::core::mem::offset_of!(acpi_madt_io_sapic, Reserved) - 3usize];
    ["Offset of field: acpi_madt_io_sapic::GlobalIrqBase"]
        [::core::mem::offset_of!(acpi_madt_io_sapic, GlobalIrqBase) - 4usize];
    ["Offset of field: acpi_madt_io_sapic::Address"]
        [::core::mem::offset_of!(acpi_madt_io_sapic, Address) - 8usize];
};
pub type ACPI_MADT_IO_SAPIC = acpi_madt_io_sapic;
#[repr(C, packed)]
pub struct acpi_madt_local_sapic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProcessorId: UINT8,
    pub Id: UINT8,
    pub Eid: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub LapicFlags: UINT32,
    pub Uid: UINT32,
    pub UidString: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_local_sapic"][::core::mem::size_of::<acpi_madt_local_sapic>() - 16usize];
    ["Alignment of acpi_madt_local_sapic"]
        [::core::mem::align_of::<acpi_madt_local_sapic>() - 1usize];
    ["Offset of field: acpi_madt_local_sapic::Header"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, Header) - 0usize];
    ["Offset of field: acpi_madt_local_sapic::ProcessorId"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, ProcessorId) - 2usize];
    ["Offset of field: acpi_madt_local_sapic::Id"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, Id) - 3usize];
    ["Offset of field: acpi_madt_local_sapic::Eid"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, Eid) - 4usize];
    ["Offset of field: acpi_madt_local_sapic::Reserved"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, Reserved) - 5usize];
    ["Offset of field: acpi_madt_local_sapic::LapicFlags"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, LapicFlags) - 8usize];
    ["Offset of field: acpi_madt_local_sapic::Uid"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, Uid) - 12usize];
    ["Offset of field: acpi_madt_local_sapic::UidString"]
        [::core::mem::offset_of!(acpi_madt_local_sapic, UidString) - 16usize];
};
pub type ACPI_MADT_LOCAL_SAPIC = acpi_madt_local_sapic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_interrupt_source {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub IntiFlags: UINT16,
    pub Type: UINT8,
    pub Id: UINT8,
    pub Eid: UINT8,
    pub IoSapicVector: UINT8,
    pub GlobalIrq: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_interrupt_source"]
        [::core::mem::size_of::<acpi_madt_interrupt_source>() - 16usize];
    ["Alignment of acpi_madt_interrupt_source"]
        [::core::mem::align_of::<acpi_madt_interrupt_source>() - 1usize];
    ["Offset of field: acpi_madt_interrupt_source::Header"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, Header) - 0usize];
    ["Offset of field: acpi_madt_interrupt_source::IntiFlags"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, IntiFlags) - 2usize];
    ["Offset of field: acpi_madt_interrupt_source::Type"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, Type) - 4usize];
    ["Offset of field: acpi_madt_interrupt_source::Id"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, Id) - 5usize];
    ["Offset of field: acpi_madt_interrupt_source::Eid"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, Eid) - 6usize];
    ["Offset of field: acpi_madt_interrupt_source::IoSapicVector"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, IoSapicVector) - 7usize];
    ["Offset of field: acpi_madt_interrupt_source::GlobalIrq"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, GlobalIrq) - 8usize];
    ["Offset of field: acpi_madt_interrupt_source::Flags"]
        [::core::mem::offset_of!(acpi_madt_interrupt_source, Flags) - 12usize];
};
pub type ACPI_MADT_INTERRUPT_SOURCE = acpi_madt_interrupt_source;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_x2apic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub LocalApicId: UINT32,
    pub LapicFlags: UINT32,
    pub Uid: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_local_x2apic"][::core::mem::size_of::<acpi_madt_local_x2apic>() - 16usize];
    ["Alignment of acpi_madt_local_x2apic"]
        [::core::mem::align_of::<acpi_madt_local_x2apic>() - 1usize];
    ["Offset of field: acpi_madt_local_x2apic::Header"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic, Header) - 0usize];
    ["Offset of field: acpi_madt_local_x2apic::Reserved"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic, Reserved) - 2usize];
    ["Offset of field: acpi_madt_local_x2apic::LocalApicId"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic, LocalApicId) - 4usize];
    ["Offset of field: acpi_madt_local_x2apic::LapicFlags"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic, LapicFlags) - 8usize];
    ["Offset of field: acpi_madt_local_x2apic::Uid"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic, Uid) - 12usize];
};
pub type ACPI_MADT_LOCAL_X2APIC = acpi_madt_local_x2apic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_x2apic_nmi {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub IntiFlags: UINT16,
    pub Uid: UINT32,
    pub Lint: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_local_x2apic_nmi"]
        [::core::mem::size_of::<acpi_madt_local_x2apic_nmi>() - 12usize];
    ["Alignment of acpi_madt_local_x2apic_nmi"]
        [::core::mem::align_of::<acpi_madt_local_x2apic_nmi>() - 1usize];
    ["Offset of field: acpi_madt_local_x2apic_nmi::Header"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic_nmi, Header) - 0usize];
    ["Offset of field: acpi_madt_local_x2apic_nmi::IntiFlags"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic_nmi, IntiFlags) - 2usize];
    ["Offset of field: acpi_madt_local_x2apic_nmi::Uid"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic_nmi, Uid) - 4usize];
    ["Offset of field: acpi_madt_local_x2apic_nmi::Lint"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic_nmi, Lint) - 8usize];
    ["Offset of field: acpi_madt_local_x2apic_nmi::Reserved"]
        [::core::mem::offset_of!(acpi_madt_local_x2apic_nmi, Reserved) - 9usize];
};
pub type ACPI_MADT_LOCAL_X2APIC_NMI = acpi_madt_local_x2apic_nmi;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_interrupt {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub CpuInterfaceNumber: UINT32,
    pub Uid: UINT32,
    pub Flags: UINT32,
    pub ParkingVersion: UINT32,
    pub PerformanceInterrupt: UINT32,
    pub ParkedAddress: UINT64,
    pub BaseAddress: UINT64,
    pub GicvBaseAddress: UINT64,
    pub GichBaseAddress: UINT64,
    pub VgicInterrupt: UINT32,
    pub GicrBaseAddress: UINT64,
    pub ArmMpidr: UINT64,
    pub EfficiencyClass: UINT8,
    pub Reserved2: [UINT8; 1usize],
    pub SpeInterrupt: UINT16,
    pub TrbeInterrupt: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_generic_interrupt"]
        [::core::mem::size_of::<acpi_madt_generic_interrupt>() - 82usize];
    ["Alignment of acpi_madt_generic_interrupt"]
        [::core::mem::align_of::<acpi_madt_generic_interrupt>() - 1usize];
    ["Offset of field: acpi_madt_generic_interrupt::Header"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, Header) - 0usize];
    ["Offset of field: acpi_madt_generic_interrupt::Reserved"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, Reserved) - 2usize];
    ["Offset of field: acpi_madt_generic_interrupt::CpuInterfaceNumber"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, CpuInterfaceNumber) - 4usize];
    ["Offset of field: acpi_madt_generic_interrupt::Uid"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, Uid) - 8usize];
    ["Offset of field: acpi_madt_generic_interrupt::Flags"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, Flags) - 12usize];
    ["Offset of field: acpi_madt_generic_interrupt::ParkingVersion"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, ParkingVersion) - 16usize];
    ["Offset of field: acpi_madt_generic_interrupt::PerformanceInterrupt"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, PerformanceInterrupt) - 20usize];
    ["Offset of field: acpi_madt_generic_interrupt::ParkedAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, ParkedAddress) - 24usize];
    ["Offset of field: acpi_madt_generic_interrupt::BaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, BaseAddress) - 32usize];
    ["Offset of field: acpi_madt_generic_interrupt::GicvBaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, GicvBaseAddress) - 40usize];
    ["Offset of field: acpi_madt_generic_interrupt::GichBaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, GichBaseAddress) - 48usize];
    ["Offset of field: acpi_madt_generic_interrupt::VgicInterrupt"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, VgicInterrupt) - 56usize];
    ["Offset of field: acpi_madt_generic_interrupt::GicrBaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, GicrBaseAddress) - 60usize];
    ["Offset of field: acpi_madt_generic_interrupt::ArmMpidr"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, ArmMpidr) - 68usize];
    ["Offset of field: acpi_madt_generic_interrupt::EfficiencyClass"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, EfficiencyClass) - 76usize];
    ["Offset of field: acpi_madt_generic_interrupt::Reserved2"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, Reserved2) - 77usize];
    ["Offset of field: acpi_madt_generic_interrupt::SpeInterrupt"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, SpeInterrupt) - 78usize];
    ["Offset of field: acpi_madt_generic_interrupt::TrbeInterrupt"]
        [::core::mem::offset_of!(acpi_madt_generic_interrupt, TrbeInterrupt) - 80usize];
};
pub type ACPI_MADT_GENERIC_INTERRUPT = acpi_madt_generic_interrupt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_distributor {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub GicId: UINT32,
    pub BaseAddress: UINT64,
    pub GlobalIrqBase: UINT32,
    pub Version: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_generic_distributor"]
        [::core::mem::size_of::<acpi_madt_generic_distributor>() - 24usize];
    ["Alignment of acpi_madt_generic_distributor"]
        [::core::mem::align_of::<acpi_madt_generic_distributor>() - 1usize];
    ["Offset of field: acpi_madt_generic_distributor::Header"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, Header) - 0usize];
    ["Offset of field: acpi_madt_generic_distributor::Reserved"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, Reserved) - 2usize];
    ["Offset of field: acpi_madt_generic_distributor::GicId"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, GicId) - 4usize];
    ["Offset of field: acpi_madt_generic_distributor::BaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, BaseAddress) - 8usize];
    ["Offset of field: acpi_madt_generic_distributor::GlobalIrqBase"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, GlobalIrqBase) - 16usize];
    ["Offset of field: acpi_madt_generic_distributor::Version"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, Version) - 20usize];
    ["Offset of field: acpi_madt_generic_distributor::Reserved2"]
        [::core::mem::offset_of!(acpi_madt_generic_distributor, Reserved2) - 21usize];
};
pub type ACPI_MADT_GENERIC_DISTRIBUTOR = acpi_madt_generic_distributor;
pub const AcpiMadtGicVersion_ACPI_MADT_GIC_VERSION_NONE: AcpiMadtGicVersion = 0;
pub const AcpiMadtGicVersion_ACPI_MADT_GIC_VERSION_V1: AcpiMadtGicVersion = 1;
pub const AcpiMadtGicVersion_ACPI_MADT_GIC_VERSION_V2: AcpiMadtGicVersion = 2;
pub const AcpiMadtGicVersion_ACPI_MADT_GIC_VERSION_V3: AcpiMadtGicVersion = 3;
pub const AcpiMadtGicVersion_ACPI_MADT_GIC_VERSION_V4: AcpiMadtGicVersion = 4;
pub const AcpiMadtGicVersion_ACPI_MADT_GIC_VERSION_RESERVED: AcpiMadtGicVersion = 5;
pub type AcpiMadtGicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_msi_frame {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub MsiFrameId: UINT32,
    pub BaseAddress: UINT64,
    pub Flags: UINT32,
    pub SpiCount: UINT16,
    pub SpiBase: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_generic_msi_frame"]
        [::core::mem::size_of::<acpi_madt_generic_msi_frame>() - 24usize];
    ["Alignment of acpi_madt_generic_msi_frame"]
        [::core::mem::align_of::<acpi_madt_generic_msi_frame>() - 1usize];
    ["Offset of field: acpi_madt_generic_msi_frame::Header"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, Header) - 0usize];
    ["Offset of field: acpi_madt_generic_msi_frame::Reserved"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, Reserved) - 2usize];
    ["Offset of field: acpi_madt_generic_msi_frame::MsiFrameId"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, MsiFrameId) - 4usize];
    ["Offset of field: acpi_madt_generic_msi_frame::BaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, BaseAddress) - 8usize];
    ["Offset of field: acpi_madt_generic_msi_frame::Flags"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, Flags) - 16usize];
    ["Offset of field: acpi_madt_generic_msi_frame::SpiCount"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, SpiCount) - 20usize];
    ["Offset of field: acpi_madt_generic_msi_frame::SpiBase"]
        [::core::mem::offset_of!(acpi_madt_generic_msi_frame, SpiBase) - 22usize];
};
pub type ACPI_MADT_GENERIC_MSI_FRAME = acpi_madt_generic_msi_frame;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_redistributor {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_generic_redistributor"]
        [::core::mem::size_of::<acpi_madt_generic_redistributor>() - 16usize];
    ["Alignment of acpi_madt_generic_redistributor"]
        [::core::mem::align_of::<acpi_madt_generic_redistributor>() - 1usize];
    ["Offset of field: acpi_madt_generic_redistributor::Header"]
        [::core::mem::offset_of!(acpi_madt_generic_redistributor, Header) - 0usize];
    ["Offset of field: acpi_madt_generic_redistributor::Flags"]
        [::core::mem::offset_of!(acpi_madt_generic_redistributor, Flags) - 2usize];
    ["Offset of field: acpi_madt_generic_redistributor::Reserved"]
        [::core::mem::offset_of!(acpi_madt_generic_redistributor, Reserved) - 3usize];
    ["Offset of field: acpi_madt_generic_redistributor::BaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_redistributor, BaseAddress) - 4usize];
    ["Offset of field: acpi_madt_generic_redistributor::Length"]
        [::core::mem::offset_of!(acpi_madt_generic_redistributor, Length) - 12usize];
};
pub type ACPI_MADT_GENERIC_REDISTRIBUTOR = acpi_madt_generic_redistributor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_translator {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub TranslationId: UINT32,
    pub BaseAddress: UINT64,
    pub Reserved2: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_generic_translator"]
        [::core::mem::size_of::<acpi_madt_generic_translator>() - 20usize];
    ["Alignment of acpi_madt_generic_translator"]
        [::core::mem::align_of::<acpi_madt_generic_translator>() - 1usize];
    ["Offset of field: acpi_madt_generic_translator::Header"]
        [::core::mem::offset_of!(acpi_madt_generic_translator, Header) - 0usize];
    ["Offset of field: acpi_madt_generic_translator::Flags"]
        [::core::mem::offset_of!(acpi_madt_generic_translator, Flags) - 2usize];
    ["Offset of field: acpi_madt_generic_translator::Reserved"]
        [::core::mem::offset_of!(acpi_madt_generic_translator, Reserved) - 3usize];
    ["Offset of field: acpi_madt_generic_translator::TranslationId"]
        [::core::mem::offset_of!(acpi_madt_generic_translator, TranslationId) - 4usize];
    ["Offset of field: acpi_madt_generic_translator::BaseAddress"]
        [::core::mem::offset_of!(acpi_madt_generic_translator, BaseAddress) - 8usize];
    ["Offset of field: acpi_madt_generic_translator::Reserved2"]
        [::core::mem::offset_of!(acpi_madt_generic_translator, Reserved2) - 16usize];
};
pub type ACPI_MADT_GENERIC_TRANSLATOR = acpi_madt_generic_translator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_multiproc_wakeup {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub MailboxVersion: UINT16,
    pub Reserved: UINT32,
    pub BaseAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_multiproc_wakeup"]
        [::core::mem::size_of::<acpi_madt_multiproc_wakeup>() - 16usize];
    ["Alignment of acpi_madt_multiproc_wakeup"]
        [::core::mem::align_of::<acpi_madt_multiproc_wakeup>() - 1usize];
    ["Offset of field: acpi_madt_multiproc_wakeup::Header"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup, Header) - 0usize];
    ["Offset of field: acpi_madt_multiproc_wakeup::MailboxVersion"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup, MailboxVersion) - 2usize];
    ["Offset of field: acpi_madt_multiproc_wakeup::Reserved"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup, Reserved) - 4usize];
    ["Offset of field: acpi_madt_multiproc_wakeup::BaseAddress"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup, BaseAddress) - 8usize];
};
pub type ACPI_MADT_MULTIPROC_WAKEUP = acpi_madt_multiproc_wakeup;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_multiproc_wakeup_mailbox {
    pub Command: UINT16,
    pub Reserved: UINT16,
    pub ApicId: UINT32,
    pub WakeupVector: UINT64,
    pub ReservedOs: [UINT8; 2032usize],
    pub ReservedFirmware: [UINT8; 2048usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_multiproc_wakeup_mailbox"]
        [::core::mem::size_of::<acpi_madt_multiproc_wakeup_mailbox>() - 4096usize];
    ["Alignment of acpi_madt_multiproc_wakeup_mailbox"]
        [::core::mem::align_of::<acpi_madt_multiproc_wakeup_mailbox>() - 1usize];
    ["Offset of field: acpi_madt_multiproc_wakeup_mailbox::Command"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup_mailbox, Command) - 0usize];
    ["Offset of field: acpi_madt_multiproc_wakeup_mailbox::Reserved"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup_mailbox, Reserved) - 2usize];
    ["Offset of field: acpi_madt_multiproc_wakeup_mailbox::ApicId"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup_mailbox, ApicId) - 4usize];
    ["Offset of field: acpi_madt_multiproc_wakeup_mailbox::WakeupVector"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup_mailbox, WakeupVector) - 8usize];
    ["Offset of field: acpi_madt_multiproc_wakeup_mailbox::ReservedOs"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup_mailbox, ReservedOs) - 16usize];
    ["Offset of field: acpi_madt_multiproc_wakeup_mailbox::ReservedFirmware"]
        [::core::mem::offset_of!(acpi_madt_multiproc_wakeup_mailbox, ReservedFirmware) - 2048usize];
};
pub type ACPI_MADT_MULTIPROC_WAKEUP_MAILBOX = acpi_madt_multiproc_wakeup_mailbox;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_core_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub ProcessorId: UINT32,
    pub CoreId: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_core_pic"][::core::mem::size_of::<acpi_madt_core_pic>() - 15usize];
    ["Alignment of acpi_madt_core_pic"][::core::mem::align_of::<acpi_madt_core_pic>() - 1usize];
    ["Offset of field: acpi_madt_core_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_core_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_core_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_core_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_core_pic::ProcessorId"]
        [::core::mem::offset_of!(acpi_madt_core_pic, ProcessorId) - 3usize];
    ["Offset of field: acpi_madt_core_pic::CoreId"]
        [::core::mem::offset_of!(acpi_madt_core_pic, CoreId) - 7usize];
    ["Offset of field: acpi_madt_core_pic::Flags"]
        [::core::mem::offset_of!(acpi_madt_core_pic, Flags) - 11usize];
};
pub type ACPI_MADT_CORE_PIC = acpi_madt_core_pic;
pub const AcpiMadtCorePicVersion_ACPI_MADT_CORE_PIC_VERSION_NONE: AcpiMadtCorePicVersion = 0;
pub const AcpiMadtCorePicVersion_ACPI_MADT_CORE_PIC_VERSION_V1: AcpiMadtCorePicVersion = 1;
pub const AcpiMadtCorePicVersion_ACPI_MADT_CORE_PIC_VERSION_RESERVED: AcpiMadtCorePicVersion = 2;
pub type AcpiMadtCorePicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_lio_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Address: UINT64,
    pub Size: UINT16,
    pub Cascade: [UINT8; 2usize],
    pub CascadeMap: [UINT32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_lio_pic"][::core::mem::size_of::<acpi_madt_lio_pic>() - 23usize];
    ["Alignment of acpi_madt_lio_pic"][::core::mem::align_of::<acpi_madt_lio_pic>() - 1usize];
    ["Offset of field: acpi_madt_lio_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_lio_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_lio_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_lio_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_lio_pic::Address"]
        [::core::mem::offset_of!(acpi_madt_lio_pic, Address) - 3usize];
    ["Offset of field: acpi_madt_lio_pic::Size"]
        [::core::mem::offset_of!(acpi_madt_lio_pic, Size) - 11usize];
    ["Offset of field: acpi_madt_lio_pic::Cascade"]
        [::core::mem::offset_of!(acpi_madt_lio_pic, Cascade) - 13usize];
    ["Offset of field: acpi_madt_lio_pic::CascadeMap"]
        [::core::mem::offset_of!(acpi_madt_lio_pic, CascadeMap) - 15usize];
};
pub type ACPI_MADT_LIO_PIC = acpi_madt_lio_pic;
pub const AcpiMadtLioPicVersion_ACPI_MADT_LIO_PIC_VERSION_NONE: AcpiMadtLioPicVersion = 0;
pub const AcpiMadtLioPicVersion_ACPI_MADT_LIO_PIC_VERSION_V1: AcpiMadtLioPicVersion = 1;
pub const AcpiMadtLioPicVersion_ACPI_MADT_LIO_PIC_VERSION_RESERVED: AcpiMadtLioPicVersion = 2;
pub type AcpiMadtLioPicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_ht_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Address: UINT64,
    pub Size: UINT16,
    pub Cascade: [UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_ht_pic"][::core::mem::size_of::<acpi_madt_ht_pic>() - 21usize];
    ["Alignment of acpi_madt_ht_pic"][::core::mem::align_of::<acpi_madt_ht_pic>() - 1usize];
    ["Offset of field: acpi_madt_ht_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_ht_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_ht_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_ht_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_ht_pic::Address"]
        [::core::mem::offset_of!(acpi_madt_ht_pic, Address) - 3usize];
    ["Offset of field: acpi_madt_ht_pic::Size"]
        [::core::mem::offset_of!(acpi_madt_ht_pic, Size) - 11usize];
    ["Offset of field: acpi_madt_ht_pic::Cascade"]
        [::core::mem::offset_of!(acpi_madt_ht_pic, Cascade) - 13usize];
};
pub type ACPI_MADT_HT_PIC = acpi_madt_ht_pic;
pub const AcpiMadtHtPicVersion_ACPI_MADT_HT_PIC_VERSION_NONE: AcpiMadtHtPicVersion = 0;
pub const AcpiMadtHtPicVersion_ACPI_MADT_HT_PIC_VERSION_V1: AcpiMadtHtPicVersion = 1;
pub const AcpiMadtHtPicVersion_ACPI_MADT_HT_PIC_VERSION_RESERVED: AcpiMadtHtPicVersion = 2;
pub type AcpiMadtHtPicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_eio_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Cascade: UINT8,
    pub Node: UINT8,
    pub NodeMap: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_eio_pic"][::core::mem::size_of::<acpi_madt_eio_pic>() - 13usize];
    ["Alignment of acpi_madt_eio_pic"][::core::mem::align_of::<acpi_madt_eio_pic>() - 1usize];
    ["Offset of field: acpi_madt_eio_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_eio_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_eio_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_eio_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_eio_pic::Cascade"]
        [::core::mem::offset_of!(acpi_madt_eio_pic, Cascade) - 3usize];
    ["Offset of field: acpi_madt_eio_pic::Node"]
        [::core::mem::offset_of!(acpi_madt_eio_pic, Node) - 4usize];
    ["Offset of field: acpi_madt_eio_pic::NodeMap"]
        [::core::mem::offset_of!(acpi_madt_eio_pic, NodeMap) - 5usize];
};
pub type ACPI_MADT_EIO_PIC = acpi_madt_eio_pic;
pub const AcpiMadtEioPicVersion_ACPI_MADT_EIO_PIC_VERSION_NONE: AcpiMadtEioPicVersion = 0;
pub const AcpiMadtEioPicVersion_ACPI_MADT_EIO_PIC_VERSION_V1: AcpiMadtEioPicVersion = 1;
pub const AcpiMadtEioPicVersion_ACPI_MADT_EIO_PIC_VERSION_RESERVED: AcpiMadtEioPicVersion = 2;
pub type AcpiMadtEioPicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_msi_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub MsgAddress: UINT64,
    pub Start: UINT32,
    pub Count: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_msi_pic"][::core::mem::size_of::<acpi_madt_msi_pic>() - 19usize];
    ["Alignment of acpi_madt_msi_pic"][::core::mem::align_of::<acpi_madt_msi_pic>() - 1usize];
    ["Offset of field: acpi_madt_msi_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_msi_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_msi_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_msi_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_msi_pic::MsgAddress"]
        [::core::mem::offset_of!(acpi_madt_msi_pic, MsgAddress) - 3usize];
    ["Offset of field: acpi_madt_msi_pic::Start"]
        [::core::mem::offset_of!(acpi_madt_msi_pic, Start) - 11usize];
    ["Offset of field: acpi_madt_msi_pic::Count"]
        [::core::mem::offset_of!(acpi_madt_msi_pic, Count) - 15usize];
};
pub type ACPI_MADT_MSI_PIC = acpi_madt_msi_pic;
pub const AcpiMadtMsiPicVersion_ACPI_MADT_MSI_PIC_VERSION_NONE: AcpiMadtMsiPicVersion = 0;
pub const AcpiMadtMsiPicVersion_ACPI_MADT_MSI_PIC_VERSION_V1: AcpiMadtMsiPicVersion = 1;
pub const AcpiMadtMsiPicVersion_ACPI_MADT_MSI_PIC_VERSION_RESERVED: AcpiMadtMsiPicVersion = 2;
pub type AcpiMadtMsiPicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_bio_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Address: UINT64,
    pub Size: UINT16,
    pub Id: UINT16,
    pub GsiBase: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_bio_pic"][::core::mem::size_of::<acpi_madt_bio_pic>() - 17usize];
    ["Alignment of acpi_madt_bio_pic"][::core::mem::align_of::<acpi_madt_bio_pic>() - 1usize];
    ["Offset of field: acpi_madt_bio_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_bio_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_bio_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_bio_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_bio_pic::Address"]
        [::core::mem::offset_of!(acpi_madt_bio_pic, Address) - 3usize];
    ["Offset of field: acpi_madt_bio_pic::Size"]
        [::core::mem::offset_of!(acpi_madt_bio_pic, Size) - 11usize];
    ["Offset of field: acpi_madt_bio_pic::Id"]
        [::core::mem::offset_of!(acpi_madt_bio_pic, Id) - 13usize];
    ["Offset of field: acpi_madt_bio_pic::GsiBase"]
        [::core::mem::offset_of!(acpi_madt_bio_pic, GsiBase) - 15usize];
};
pub type ACPI_MADT_BIO_PIC = acpi_madt_bio_pic;
pub const AcpiMadtBioPicVersion_ACPI_MADT_BIO_PIC_VERSION_NONE: AcpiMadtBioPicVersion = 0;
pub const AcpiMadtBioPicVersion_ACPI_MADT_BIO_PIC_VERSION_V1: AcpiMadtBioPicVersion = 1;
pub const AcpiMadtBioPicVersion_ACPI_MADT_BIO_PIC_VERSION_RESERVED: AcpiMadtBioPicVersion = 2;
pub type AcpiMadtBioPicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_lpc_pic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Address: UINT64,
    pub Size: UINT16,
    pub Cascade: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_lpc_pic"][::core::mem::size_of::<acpi_madt_lpc_pic>() - 14usize];
    ["Alignment of acpi_madt_lpc_pic"][::core::mem::align_of::<acpi_madt_lpc_pic>() - 1usize];
    ["Offset of field: acpi_madt_lpc_pic::Header"]
        [::core::mem::offset_of!(acpi_madt_lpc_pic, Header) - 0usize];
    ["Offset of field: acpi_madt_lpc_pic::Version"]
        [::core::mem::offset_of!(acpi_madt_lpc_pic, Version) - 2usize];
    ["Offset of field: acpi_madt_lpc_pic::Address"]
        [::core::mem::offset_of!(acpi_madt_lpc_pic, Address) - 3usize];
    ["Offset of field: acpi_madt_lpc_pic::Size"]
        [::core::mem::offset_of!(acpi_madt_lpc_pic, Size) - 11usize];
    ["Offset of field: acpi_madt_lpc_pic::Cascade"]
        [::core::mem::offset_of!(acpi_madt_lpc_pic, Cascade) - 13usize];
};
pub type ACPI_MADT_LPC_PIC = acpi_madt_lpc_pic;
pub const AcpiMadtLpcPicVersion_ACPI_MADT_LPC_PIC_VERSION_NONE: AcpiMadtLpcPicVersion = 0;
pub const AcpiMadtLpcPicVersion_ACPI_MADT_LPC_PIC_VERSION_V1: AcpiMadtLpcPicVersion = 1;
pub const AcpiMadtLpcPicVersion_ACPI_MADT_LPC_PIC_VERSION_RESERVED: AcpiMadtLpcPicVersion = 2;
pub type AcpiMadtLpcPicVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_rintc {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Reserved: UINT8,
    pub Flags: UINT32,
    pub HartId: UINT64,
    pub Uid: UINT32,
    pub ExtIntcId: UINT32,
    pub ImsicAddr: UINT64,
    pub ImsicSize: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_rintc"][::core::mem::size_of::<acpi_madt_rintc>() - 36usize];
    ["Alignment of acpi_madt_rintc"][::core::mem::align_of::<acpi_madt_rintc>() - 1usize];
    ["Offset of field: acpi_madt_rintc::Header"]
        [::core::mem::offset_of!(acpi_madt_rintc, Header) - 0usize];
    ["Offset of field: acpi_madt_rintc::Version"]
        [::core::mem::offset_of!(acpi_madt_rintc, Version) - 2usize];
    ["Offset of field: acpi_madt_rintc::Reserved"]
        [::core::mem::offset_of!(acpi_madt_rintc, Reserved) - 3usize];
    ["Offset of field: acpi_madt_rintc::Flags"]
        [::core::mem::offset_of!(acpi_madt_rintc, Flags) - 4usize];
    ["Offset of field: acpi_madt_rintc::HartId"]
        [::core::mem::offset_of!(acpi_madt_rintc, HartId) - 8usize];
    ["Offset of field: acpi_madt_rintc::Uid"]
        [::core::mem::offset_of!(acpi_madt_rintc, Uid) - 16usize];
    ["Offset of field: acpi_madt_rintc::ExtIntcId"]
        [::core::mem::offset_of!(acpi_madt_rintc, ExtIntcId) - 20usize];
    ["Offset of field: acpi_madt_rintc::ImsicAddr"]
        [::core::mem::offset_of!(acpi_madt_rintc, ImsicAddr) - 24usize];
    ["Offset of field: acpi_madt_rintc::ImsicSize"]
        [::core::mem::offset_of!(acpi_madt_rintc, ImsicSize) - 32usize];
};
pub type ACPI_MADT_RINTC = acpi_madt_rintc;
pub const AcpiMadtRintcVersion_ACPI_MADT_RINTC_VERSION_NONE: AcpiMadtRintcVersion = 0;
pub const AcpiMadtRintcVersion_ACPI_MADT_RINTC_VERSION_V1: AcpiMadtRintcVersion = 1;
pub const AcpiMadtRintcVersion_ACPI_MADT_RINTC_VERSION_RESERVED: AcpiMadtRintcVersion = 2;
pub type AcpiMadtRintcVersion = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_imsic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Reserved: UINT8,
    pub Flags: UINT32,
    pub NumIds: UINT16,
    pub NumGuestIds: UINT16,
    pub GuestIndexBits: UINT8,
    pub HartIndexBits: UINT8,
    pub GroupIndexBits: UINT8,
    pub GroupIndexShift: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_imsic"][::core::mem::size_of::<acpi_madt_imsic>() - 16usize];
    ["Alignment of acpi_madt_imsic"][::core::mem::align_of::<acpi_madt_imsic>() - 1usize];
    ["Offset of field: acpi_madt_imsic::Header"]
        [::core::mem::offset_of!(acpi_madt_imsic, Header) - 0usize];
    ["Offset of field: acpi_madt_imsic::Version"]
        [::core::mem::offset_of!(acpi_madt_imsic, Version) - 2usize];
    ["Offset of field: acpi_madt_imsic::Reserved"]
        [::core::mem::offset_of!(acpi_madt_imsic, Reserved) - 3usize];
    ["Offset of field: acpi_madt_imsic::Flags"]
        [::core::mem::offset_of!(acpi_madt_imsic, Flags) - 4usize];
    ["Offset of field: acpi_madt_imsic::NumIds"]
        [::core::mem::offset_of!(acpi_madt_imsic, NumIds) - 8usize];
    ["Offset of field: acpi_madt_imsic::NumGuestIds"]
        [::core::mem::offset_of!(acpi_madt_imsic, NumGuestIds) - 10usize];
    ["Offset of field: acpi_madt_imsic::GuestIndexBits"]
        [::core::mem::offset_of!(acpi_madt_imsic, GuestIndexBits) - 12usize];
    ["Offset of field: acpi_madt_imsic::HartIndexBits"]
        [::core::mem::offset_of!(acpi_madt_imsic, HartIndexBits) - 13usize];
    ["Offset of field: acpi_madt_imsic::GroupIndexBits"]
        [::core::mem::offset_of!(acpi_madt_imsic, GroupIndexBits) - 14usize];
    ["Offset of field: acpi_madt_imsic::GroupIndexShift"]
        [::core::mem::offset_of!(acpi_madt_imsic, GroupIndexShift) - 15usize];
};
pub type ACPI_MADT_IMSIC = acpi_madt_imsic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_aplic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Id: UINT8,
    pub Flags: UINT32,
    pub HwId: [UINT8; 8usize],
    pub NumIdcs: UINT16,
    pub NumSources: UINT16,
    pub GsiBase: UINT32,
    pub BaseAddr: UINT64,
    pub Size: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_aplic"][::core::mem::size_of::<acpi_madt_aplic>() - 36usize];
    ["Alignment of acpi_madt_aplic"][::core::mem::align_of::<acpi_madt_aplic>() - 1usize];
    ["Offset of field: acpi_madt_aplic::Header"]
        [::core::mem::offset_of!(acpi_madt_aplic, Header) - 0usize];
    ["Offset of field: acpi_madt_aplic::Version"]
        [::core::mem::offset_of!(acpi_madt_aplic, Version) - 2usize];
    ["Offset of field: acpi_madt_aplic::Id"][::core::mem::offset_of!(acpi_madt_aplic, Id) - 3usize];
    ["Offset of field: acpi_madt_aplic::Flags"]
        [::core::mem::offset_of!(acpi_madt_aplic, Flags) - 4usize];
    ["Offset of field: acpi_madt_aplic::HwId"]
        [::core::mem::offset_of!(acpi_madt_aplic, HwId) - 8usize];
    ["Offset of field: acpi_madt_aplic::NumIdcs"]
        [::core::mem::offset_of!(acpi_madt_aplic, NumIdcs) - 16usize];
    ["Offset of field: acpi_madt_aplic::NumSources"]
        [::core::mem::offset_of!(acpi_madt_aplic, NumSources) - 18usize];
    ["Offset of field: acpi_madt_aplic::GsiBase"]
        [::core::mem::offset_of!(acpi_madt_aplic, GsiBase) - 20usize];
    ["Offset of field: acpi_madt_aplic::BaseAddr"]
        [::core::mem::offset_of!(acpi_madt_aplic, BaseAddr) - 24usize];
    ["Offset of field: acpi_madt_aplic::Size"]
        [::core::mem::offset_of!(acpi_madt_aplic, Size) - 32usize];
};
pub type ACPI_MADT_APLIC = acpi_madt_aplic;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_plic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT8,
    pub Id: UINT8,
    pub HwId: [UINT8; 8usize],
    pub NumIrqs: UINT16,
    pub MaxPrio: UINT16,
    pub Flags: UINT32,
    pub Size: UINT32,
    pub BaseAddr: UINT64,
    pub GsiBase: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_plic"][::core::mem::size_of::<acpi_madt_plic>() - 36usize];
    ["Alignment of acpi_madt_plic"][::core::mem::align_of::<acpi_madt_plic>() - 1usize];
    ["Offset of field: acpi_madt_plic::Header"]
        [::core::mem::offset_of!(acpi_madt_plic, Header) - 0usize];
    ["Offset of field: acpi_madt_plic::Version"]
        [::core::mem::offset_of!(acpi_madt_plic, Version) - 2usize];
    ["Offset of field: acpi_madt_plic::Id"][::core::mem::offset_of!(acpi_madt_plic, Id) - 3usize];
    ["Offset of field: acpi_madt_plic::HwId"]
        [::core::mem::offset_of!(acpi_madt_plic, HwId) - 4usize];
    ["Offset of field: acpi_madt_plic::NumIrqs"]
        [::core::mem::offset_of!(acpi_madt_plic, NumIrqs) - 12usize];
    ["Offset of field: acpi_madt_plic::MaxPrio"]
        [::core::mem::offset_of!(acpi_madt_plic, MaxPrio) - 14usize];
    ["Offset of field: acpi_madt_plic::Flags"]
        [::core::mem::offset_of!(acpi_madt_plic, Flags) - 16usize];
    ["Offset of field: acpi_madt_plic::Size"]
        [::core::mem::offset_of!(acpi_madt_plic, Size) - 20usize];
    ["Offset of field: acpi_madt_plic::BaseAddr"]
        [::core::mem::offset_of!(acpi_madt_plic, BaseAddr) - 24usize];
    ["Offset of field: acpi_madt_plic::GsiBase"]
        [::core::mem::offset_of!(acpi_madt_plic, GsiBase) - 32usize];
};
pub type ACPI_MADT_PLIC = acpi_madt_plic;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_madt_oem_data {
    pub __bindgen_anon_1: acpi_madt_oem_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug)]
pub struct acpi_madt_oem_data__bindgen_ty_1 {
    pub __Empty_OemData: acpi_madt_oem_data__bindgen_ty_1__bindgen_ty_1,
    pub OemData: __IncompleteArrayField<UINT8>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_oem_data__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_oem_data__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_madt_oem_data__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_madt_oem_data__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_madt_oem_data__bindgen_ty_1__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_oem_data__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_madt_oem_data__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_madt_oem_data__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_madt_oem_data__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_madt_oem_data__bindgen_ty_1::__Empty_OemData"]
        [::core::mem::offset_of!(acpi_madt_oem_data__bindgen_ty_1, __Empty_OemData) - 0usize];
    ["Offset of field: acpi_madt_oem_data__bindgen_ty_1::OemData"]
        [::core::mem::offset_of!(acpi_madt_oem_data__bindgen_ty_1, OemData) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_madt_oem_data"][::core::mem::size_of::<acpi_madt_oem_data>() - 0usize];
    ["Alignment of acpi_madt_oem_data"][::core::mem::align_of::<acpi_madt_oem_data>() - 1usize];
};
pub type ACPI_MADT_OEM_DATA = acpi_madt_oem_data;
#[doc = " MCFG - PCI Memory Mapped Configuration table and subtable\n        Version 1\n\n Conforms to \"PCI Firmware Specification\", Revision 3.0, June 20, 2005\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mcfg {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: [UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_mcfg"][::core::mem::size_of::<acpi_table_mcfg>() - 44usize];
    ["Alignment of acpi_table_mcfg"][::core::mem::align_of::<acpi_table_mcfg>() - 1usize];
    ["Offset of field: acpi_table_mcfg::Header"]
        [::core::mem::offset_of!(acpi_table_mcfg, Header) - 0usize];
    ["Offset of field: acpi_table_mcfg::Reserved"]
        [::core::mem::offset_of!(acpi_table_mcfg, Reserved) - 36usize];
};
#[doc = " MCFG - PCI Memory Mapped Configuration table and subtable\n        Version 1\n\n Conforms to \"PCI Firmware Specification\", Revision 3.0, June 20, 2005\n"]
pub type ACPI_TABLE_MCFG = acpi_table_mcfg;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mcfg_allocation {
    pub Address: UINT64,
    pub PciSegment: UINT16,
    pub StartBusNumber: UINT8,
    pub EndBusNumber: UINT8,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mcfg_allocation"][::core::mem::size_of::<acpi_mcfg_allocation>() - 16usize];
    ["Alignment of acpi_mcfg_allocation"][::core::mem::align_of::<acpi_mcfg_allocation>() - 1usize];
    ["Offset of field: acpi_mcfg_allocation::Address"]
        [::core::mem::offset_of!(acpi_mcfg_allocation, Address) - 0usize];
    ["Offset of field: acpi_mcfg_allocation::PciSegment"]
        [::core::mem::offset_of!(acpi_mcfg_allocation, PciSegment) - 8usize];
    ["Offset of field: acpi_mcfg_allocation::StartBusNumber"]
        [::core::mem::offset_of!(acpi_mcfg_allocation, StartBusNumber) - 10usize];
    ["Offset of field: acpi_mcfg_allocation::EndBusNumber"]
        [::core::mem::offset_of!(acpi_mcfg_allocation, EndBusNumber) - 11usize];
    ["Offset of field: acpi_mcfg_allocation::Reserved"]
        [::core::mem::offset_of!(acpi_mcfg_allocation, Reserved) - 12usize];
};
pub type ACPI_MCFG_ALLOCATION = acpi_mcfg_allocation;
#[doc = " MCHI - Management Controller Host Interface Table\n        Version 1\n\n Conforms to \"Management Component Transport Protocol (MCTP) Host\n Interface Specification\", Revision 1.0.0a, October 13, 2009\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mchi {
    pub Header: ACPI_TABLE_HEADER,
    pub InterfaceType: UINT8,
    pub Protocol: UINT8,
    pub ProtocolData: UINT64,
    pub InterruptType: UINT8,
    pub Gpe: UINT8,
    pub PciDeviceFlag: UINT8,
    pub GlobalInterrupt: UINT32,
    pub ControlRegister: ACPI_GENERIC_ADDRESS,
    pub PciSegment: UINT8,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_mchi"][::core::mem::size_of::<acpi_table_mchi>() - 69usize];
    ["Alignment of acpi_table_mchi"][::core::mem::align_of::<acpi_table_mchi>() - 1usize];
    ["Offset of field: acpi_table_mchi::Header"]
        [::core::mem::offset_of!(acpi_table_mchi, Header) - 0usize];
    ["Offset of field: acpi_table_mchi::InterfaceType"]
        [::core::mem::offset_of!(acpi_table_mchi, InterfaceType) - 36usize];
    ["Offset of field: acpi_table_mchi::Protocol"]
        [::core::mem::offset_of!(acpi_table_mchi, Protocol) - 37usize];
    ["Offset of field: acpi_table_mchi::ProtocolData"]
        [::core::mem::offset_of!(acpi_table_mchi, ProtocolData) - 38usize];
    ["Offset of field: acpi_table_mchi::InterruptType"]
        [::core::mem::offset_of!(acpi_table_mchi, InterruptType) - 46usize];
    ["Offset of field: acpi_table_mchi::Gpe"]
        [::core::mem::offset_of!(acpi_table_mchi, Gpe) - 47usize];
    ["Offset of field: acpi_table_mchi::PciDeviceFlag"]
        [::core::mem::offset_of!(acpi_table_mchi, PciDeviceFlag) - 48usize];
    ["Offset of field: acpi_table_mchi::GlobalInterrupt"]
        [::core::mem::offset_of!(acpi_table_mchi, GlobalInterrupt) - 49usize];
    ["Offset of field: acpi_table_mchi::ControlRegister"]
        [::core::mem::offset_of!(acpi_table_mchi, ControlRegister) - 53usize];
    ["Offset of field: acpi_table_mchi::PciSegment"]
        [::core::mem::offset_of!(acpi_table_mchi, PciSegment) - 65usize];
    ["Offset of field: acpi_table_mchi::PciBus"]
        [::core::mem::offset_of!(acpi_table_mchi, PciBus) - 66usize];
    ["Offset of field: acpi_table_mchi::PciDevice"]
        [::core::mem::offset_of!(acpi_table_mchi, PciDevice) - 67usize];
    ["Offset of field: acpi_table_mchi::PciFunction"]
        [::core::mem::offset_of!(acpi_table_mchi, PciFunction) - 68usize];
};
#[doc = " MCHI - Management Controller Host Interface Table\n        Version 1\n\n Conforms to \"Management Component Transport Protocol (MCTP) Host\n Interface Specification\", Revision 1.0.0a, October 13, 2009\n"]
pub type ACPI_TABLE_MCHI = acpi_table_mchi;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_PROCESSOR_CACHE: AcpiMpamLocatorType = 0;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_MEMORY: AcpiMpamLocatorType = 1;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_SMMU: AcpiMpamLocatorType = 2;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_MEMORY_CACHE: AcpiMpamLocatorType = 3;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_ACPI_DEVICE: AcpiMpamLocatorType = 4;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_INTERCONNECT: AcpiMpamLocatorType = 5;
pub const AcpiMpamLocatorType_ACPI_MPAM_LOCATION_TYPE_UNKNOWN: AcpiMpamLocatorType = 255;
#[doc = " MPAM - Memory System Resource Partitioning and Monitoring\n\n Conforms to \"ACPI for Memory System Resource Partitioning and Monitoring 2.0\"\n Document number: ARM DEN 0065, December, 2022.\n"]
pub type AcpiMpamLocatorType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_func_deps {
    pub Producer: UINT32,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_func_deps"][::core::mem::size_of::<acpi_mpam_func_deps>() - 8usize];
    ["Alignment of acpi_mpam_func_deps"][::core::mem::align_of::<acpi_mpam_func_deps>() - 1usize];
    ["Offset of field: acpi_mpam_func_deps::Producer"]
        [::core::mem::offset_of!(acpi_mpam_func_deps, Producer) - 0usize];
    ["Offset of field: acpi_mpam_func_deps::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_func_deps, Reserved) - 4usize];
};
pub type ACPI_MPAM_FUNC_DEPS = acpi_mpam_func_deps;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_cache_locator {
    pub CacheReference: UINT64,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_cache_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_cache_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_cache_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_cache_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_cache_locator::CacheReference"]
        [::core::mem::offset_of!(acpi_mpam_resource_cache_locator, CacheReference) - 0usize];
    ["Offset of field: acpi_mpam_resource_cache_locator::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_resource_cache_locator, Reserved) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_CACHE_LOCATOR = acpi_mpam_resource_cache_locator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_memory_locator {
    pub ProximityDomain: UINT64,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_memory_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_memory_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_memory_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_memory_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_memory_locator::ProximityDomain"]
        [::core::mem::offset_of!(acpi_mpam_resource_memory_locator, ProximityDomain) - 0usize];
    ["Offset of field: acpi_mpam_resource_memory_locator::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_resource_memory_locator, Reserved) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_MEMORY_LOCATOR = acpi_mpam_resource_memory_locator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_smmu_locator {
    pub SmmuInterface: UINT64,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_smmu_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_smmu_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_smmu_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_smmu_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_smmu_locator::SmmuInterface"]
        [::core::mem::offset_of!(acpi_mpam_resource_smmu_locator, SmmuInterface) - 0usize];
    ["Offset of field: acpi_mpam_resource_smmu_locator::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_resource_smmu_locator, Reserved) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_SMMU_INTERFACE = acpi_mpam_resource_smmu_locator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_memcache_locator {
    pub Reserved: [UINT8; 7usize],
    pub Level: UINT8,
    pub Reference: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_memcache_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_memcache_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_memcache_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_memcache_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_memcache_locator::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_resource_memcache_locator, Reserved) - 0usize];
    ["Offset of field: acpi_mpam_resource_memcache_locator::Level"]
        [::core::mem::offset_of!(acpi_mpam_resource_memcache_locator, Level) - 7usize];
    ["Offset of field: acpi_mpam_resource_memcache_locator::Reference"]
        [::core::mem::offset_of!(acpi_mpam_resource_memcache_locator, Reference) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_MEMCACHE_INTERFACE = acpi_mpam_resource_memcache_locator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_acpi_locator {
    pub AcpiHwId: UINT64,
    pub AcpiUniqueId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_acpi_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_acpi_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_acpi_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_acpi_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_acpi_locator::AcpiHwId"]
        [::core::mem::offset_of!(acpi_mpam_resource_acpi_locator, AcpiHwId) - 0usize];
    ["Offset of field: acpi_mpam_resource_acpi_locator::AcpiUniqueId"]
        [::core::mem::offset_of!(acpi_mpam_resource_acpi_locator, AcpiUniqueId) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_ACPI_INTERFACE = acpi_mpam_resource_acpi_locator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_interconnect_locator {
    pub InterConnectDescTblOff: UINT64,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_interconnect_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_interconnect_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_interconnect_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_interconnect_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_interconnect_locator::InterConnectDescTblOff"][::core::mem::offset_of!(
        acpi_mpam_resource_interconnect_locator,
        InterConnectDescTblOff
    )
        - 0usize];
    ["Offset of field: acpi_mpam_resource_interconnect_locator::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_resource_interconnect_locator, Reserved) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_INTERCONNECT_INTERFACE = acpi_mpam_resource_interconnect_locator;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_resource_generic_locator {
    pub Descriptor1: UINT64,
    pub Descriptor2: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_generic_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_generic_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_generic_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_generic_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_generic_locator::Descriptor1"]
        [::core::mem::offset_of!(acpi_mpam_resource_generic_locator, Descriptor1) - 0usize];
    ["Offset of field: acpi_mpam_resource_generic_locator::Descriptor2"]
        [::core::mem::offset_of!(acpi_mpam_resource_generic_locator, Descriptor2) - 8usize];
};
pub type ACPI_MPAM_RESOURCE_GENERIC_LOCATOR = acpi_mpam_resource_generic_locator;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_mpam_resource_locator {
    pub CacheLocator: ACPI_MPAM_RESOURCE_CACHE_LOCATOR,
    pub MemoryLocator: ACPI_MPAM_RESOURCE_MEMORY_LOCATOR,
    pub SmmuLocator: ACPI_MPAM_RESOURCE_SMMU_INTERFACE,
    pub MemCacheLocator: ACPI_MPAM_RESOURCE_MEMCACHE_INTERFACE,
    pub AcpiLocator: ACPI_MPAM_RESOURCE_ACPI_INTERFACE,
    pub InterconnectIfcLocator: ACPI_MPAM_RESOURCE_INTERCONNECT_INTERFACE,
    pub GenericLocator: ACPI_MPAM_RESOURCE_GENERIC_LOCATOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_locator"]
        [::core::mem::size_of::<acpi_mpam_resource_locator>() - 12usize];
    ["Alignment of acpi_mpam_resource_locator"]
        [::core::mem::align_of::<acpi_mpam_resource_locator>() - 1usize];
    ["Offset of field: acpi_mpam_resource_locator::CacheLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, CacheLocator) - 0usize];
    ["Offset of field: acpi_mpam_resource_locator::MemoryLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, MemoryLocator) - 0usize];
    ["Offset of field: acpi_mpam_resource_locator::SmmuLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, SmmuLocator) - 0usize];
    ["Offset of field: acpi_mpam_resource_locator::MemCacheLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, MemCacheLocator) - 0usize];
    ["Offset of field: acpi_mpam_resource_locator::AcpiLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, AcpiLocator) - 0usize];
    ["Offset of field: acpi_mpam_resource_locator::InterconnectIfcLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, InterconnectIfcLocator) - 0usize];
    ["Offset of field: acpi_mpam_resource_locator::GenericLocator"]
        [::core::mem::offset_of!(acpi_mpam_resource_locator, GenericLocator) - 0usize];
};
pub type ACPI_MPAM_RESOURCE_LOCATOR = acpi_mpam_resource_locator;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_mpam_resource_node {
    pub Identifier: UINT32,
    pub RISIndex: UINT8,
    pub Reserved1: UINT16,
    pub LocatorType: UINT8,
    pub Locator: ACPI_MPAM_RESOURCE_LOCATOR,
    pub NumFunctionalDeps: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_resource_node"]
        [::core::mem::size_of::<acpi_mpam_resource_node>() - 24usize];
    ["Alignment of acpi_mpam_resource_node"]
        [::core::mem::align_of::<acpi_mpam_resource_node>() - 1usize];
    ["Offset of field: acpi_mpam_resource_node::Identifier"]
        [::core::mem::offset_of!(acpi_mpam_resource_node, Identifier) - 0usize];
    ["Offset of field: acpi_mpam_resource_node::RISIndex"]
        [::core::mem::offset_of!(acpi_mpam_resource_node, RISIndex) - 4usize];
    ["Offset of field: acpi_mpam_resource_node::Reserved1"]
        [::core::mem::offset_of!(acpi_mpam_resource_node, Reserved1) - 5usize];
    ["Offset of field: acpi_mpam_resource_node::LocatorType"]
        [::core::mem::offset_of!(acpi_mpam_resource_node, LocatorType) - 7usize];
    ["Offset of field: acpi_mpam_resource_node::Locator"]
        [::core::mem::offset_of!(acpi_mpam_resource_node, Locator) - 8usize];
    ["Offset of field: acpi_mpam_resource_node::NumFunctionalDeps"]
        [::core::mem::offset_of!(acpi_mpam_resource_node, NumFunctionalDeps) - 20usize];
};
pub type ACPI_MPAM_RESOURCE_NODE = acpi_mpam_resource_node;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpam_msc_node {
    pub Length: UINT16,
    pub InterfaceType: UINT8,
    pub Reserved: UINT8,
    pub Identifier: UINT32,
    pub BaseAddress: UINT64,
    pub MMIOSize: UINT32,
    pub OverflowInterrupt: UINT32,
    pub OverflowInterruptFlags: UINT32,
    pub Reserved1: UINT32,
    pub OverflowInterruptAffinity: UINT32,
    pub ErrorInterrupt: UINT32,
    pub ErrorInterruptFlags: UINT32,
    pub Reserved2: UINT32,
    pub ErrorInterruptAffinity: UINT32,
    pub MaxNrdyUsec: UINT32,
    pub HardwareIdLinkedDevice: UINT64,
    pub InstanceIdLinkedDevice: UINT32,
    pub NumResourceNodes: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpam_msc_node"][::core::mem::size_of::<acpi_mpam_msc_node>() - 72usize];
    ["Alignment of acpi_mpam_msc_node"][::core::mem::align_of::<acpi_mpam_msc_node>() - 1usize];
    ["Offset of field: acpi_mpam_msc_node::Length"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, Length) - 0usize];
    ["Offset of field: acpi_mpam_msc_node::InterfaceType"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, InterfaceType) - 2usize];
    ["Offset of field: acpi_mpam_msc_node::Reserved"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, Reserved) - 3usize];
    ["Offset of field: acpi_mpam_msc_node::Identifier"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, Identifier) - 4usize];
    ["Offset of field: acpi_mpam_msc_node::BaseAddress"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, BaseAddress) - 8usize];
    ["Offset of field: acpi_mpam_msc_node::MMIOSize"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, MMIOSize) - 16usize];
    ["Offset of field: acpi_mpam_msc_node::OverflowInterrupt"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, OverflowInterrupt) - 20usize];
    ["Offset of field: acpi_mpam_msc_node::OverflowInterruptFlags"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, OverflowInterruptFlags) - 24usize];
    ["Offset of field: acpi_mpam_msc_node::Reserved1"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, Reserved1) - 28usize];
    ["Offset of field: acpi_mpam_msc_node::OverflowInterruptAffinity"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, OverflowInterruptAffinity) - 32usize];
    ["Offset of field: acpi_mpam_msc_node::ErrorInterrupt"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, ErrorInterrupt) - 36usize];
    ["Offset of field: acpi_mpam_msc_node::ErrorInterruptFlags"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, ErrorInterruptFlags) - 40usize];
    ["Offset of field: acpi_mpam_msc_node::Reserved2"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, Reserved2) - 44usize];
    ["Offset of field: acpi_mpam_msc_node::ErrorInterruptAffinity"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, ErrorInterruptAffinity) - 48usize];
    ["Offset of field: acpi_mpam_msc_node::MaxNrdyUsec"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, MaxNrdyUsec) - 52usize];
    ["Offset of field: acpi_mpam_msc_node::HardwareIdLinkedDevice"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, HardwareIdLinkedDevice) - 56usize];
    ["Offset of field: acpi_mpam_msc_node::InstanceIdLinkedDevice"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, InstanceIdLinkedDevice) - 64usize];
    ["Offset of field: acpi_mpam_msc_node::NumResourceNodes"]
        [::core::mem::offset_of!(acpi_mpam_msc_node, NumResourceNodes) - 68usize];
};
pub type ACPI_MPAM_MSC_NODE = acpi_mpam_msc_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mpam {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_mpam"][::core::mem::size_of::<acpi_table_mpam>() - 36usize];
    ["Alignment of acpi_table_mpam"][::core::mem::align_of::<acpi_table_mpam>() - 1usize];
    ["Offset of field: acpi_table_mpam::Header"]
        [::core::mem::offset_of!(acpi_table_mpam, Header) - 0usize];
};
pub type ACPI_TABLE_MPAM = acpi_table_mpam;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mpst {
    pub Header: ACPI_TABLE_HEADER,
    pub ChannelId: UINT8,
    pub Reserved1: [UINT8; 3usize],
    pub PowerNodeCount: UINT16,
    pub Reserved2: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_mpst"][::core::mem::size_of::<acpi_table_mpst>() - 44usize];
    ["Alignment of acpi_table_mpst"][::core::mem::align_of::<acpi_table_mpst>() - 1usize];
    ["Offset of field: acpi_table_mpst::Header"]
        [::core::mem::offset_of!(acpi_table_mpst, Header) - 0usize];
    ["Offset of field: acpi_table_mpst::ChannelId"]
        [::core::mem::offset_of!(acpi_table_mpst, ChannelId) - 36usize];
    ["Offset of field: acpi_table_mpst::Reserved1"]
        [::core::mem::offset_of!(acpi_table_mpst, Reserved1) - 37usize];
    ["Offset of field: acpi_table_mpst::PowerNodeCount"]
        [::core::mem::offset_of!(acpi_table_mpst, PowerNodeCount) - 40usize];
    ["Offset of field: acpi_table_mpst::Reserved2"]
        [::core::mem::offset_of!(acpi_table_mpst, Reserved2) - 42usize];
};
pub type ACPI_TABLE_MPST = acpi_table_mpst;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_channel {
    pub ChannelId: UINT8,
    pub Reserved1: [UINT8; 3usize],
    pub PowerNodeCount: UINT16,
    pub Reserved2: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_channel"][::core::mem::size_of::<acpi_mpst_channel>() - 8usize];
    ["Alignment of acpi_mpst_channel"][::core::mem::align_of::<acpi_mpst_channel>() - 1usize];
    ["Offset of field: acpi_mpst_channel::ChannelId"]
        [::core::mem::offset_of!(acpi_mpst_channel, ChannelId) - 0usize];
    ["Offset of field: acpi_mpst_channel::Reserved1"]
        [::core::mem::offset_of!(acpi_mpst_channel, Reserved1) - 1usize];
    ["Offset of field: acpi_mpst_channel::PowerNodeCount"]
        [::core::mem::offset_of!(acpi_mpst_channel, PowerNodeCount) - 4usize];
    ["Offset of field: acpi_mpst_channel::Reserved2"]
        [::core::mem::offset_of!(acpi_mpst_channel, Reserved2) - 6usize];
};
pub type ACPI_MPST_CHANNEL = acpi_mpst_channel;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_power_node {
    pub Flags: UINT8,
    pub Reserved1: UINT8,
    pub NodeId: UINT16,
    pub Length: UINT32,
    pub RangeAddress: UINT64,
    pub RangeLength: UINT64,
    pub NumPowerStates: UINT32,
    pub NumPhysicalComponents: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_power_node"][::core::mem::size_of::<acpi_mpst_power_node>() - 32usize];
    ["Alignment of acpi_mpst_power_node"][::core::mem::align_of::<acpi_mpst_power_node>() - 1usize];
    ["Offset of field: acpi_mpst_power_node::Flags"]
        [::core::mem::offset_of!(acpi_mpst_power_node, Flags) - 0usize];
    ["Offset of field: acpi_mpst_power_node::Reserved1"]
        [::core::mem::offset_of!(acpi_mpst_power_node, Reserved1) - 1usize];
    ["Offset of field: acpi_mpst_power_node::NodeId"]
        [::core::mem::offset_of!(acpi_mpst_power_node, NodeId) - 2usize];
    ["Offset of field: acpi_mpst_power_node::Length"]
        [::core::mem::offset_of!(acpi_mpst_power_node, Length) - 4usize];
    ["Offset of field: acpi_mpst_power_node::RangeAddress"]
        [::core::mem::offset_of!(acpi_mpst_power_node, RangeAddress) - 8usize];
    ["Offset of field: acpi_mpst_power_node::RangeLength"]
        [::core::mem::offset_of!(acpi_mpst_power_node, RangeLength) - 16usize];
    ["Offset of field: acpi_mpst_power_node::NumPowerStates"]
        [::core::mem::offset_of!(acpi_mpst_power_node, NumPowerStates) - 24usize];
    ["Offset of field: acpi_mpst_power_node::NumPhysicalComponents"]
        [::core::mem::offset_of!(acpi_mpst_power_node, NumPhysicalComponents) - 28usize];
};
pub type ACPI_MPST_POWER_NODE = acpi_mpst_power_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_power_state {
    pub PowerState: UINT8,
    pub InfoIndex: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_power_state"][::core::mem::size_of::<acpi_mpst_power_state>() - 2usize];
    ["Alignment of acpi_mpst_power_state"]
        [::core::mem::align_of::<acpi_mpst_power_state>() - 1usize];
    ["Offset of field: acpi_mpst_power_state::PowerState"]
        [::core::mem::offset_of!(acpi_mpst_power_state, PowerState) - 0usize];
    ["Offset of field: acpi_mpst_power_state::InfoIndex"]
        [::core::mem::offset_of!(acpi_mpst_power_state, InfoIndex) - 1usize];
};
pub type ACPI_MPST_POWER_STATE = acpi_mpst_power_state;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_component {
    pub ComponentId: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_component"][::core::mem::size_of::<acpi_mpst_component>() - 2usize];
    ["Alignment of acpi_mpst_component"][::core::mem::align_of::<acpi_mpst_component>() - 1usize];
    ["Offset of field: acpi_mpst_component::ComponentId"]
        [::core::mem::offset_of!(acpi_mpst_component, ComponentId) - 0usize];
};
pub type ACPI_MPST_COMPONENT = acpi_mpst_component;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_data_hdr {
    pub CharacteristicsCount: UINT16,
    pub Reserved: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_data_hdr"][::core::mem::size_of::<acpi_mpst_data_hdr>() - 4usize];
    ["Alignment of acpi_mpst_data_hdr"][::core::mem::align_of::<acpi_mpst_data_hdr>() - 1usize];
    ["Offset of field: acpi_mpst_data_hdr::CharacteristicsCount"]
        [::core::mem::offset_of!(acpi_mpst_data_hdr, CharacteristicsCount) - 0usize];
    ["Offset of field: acpi_mpst_data_hdr::Reserved"]
        [::core::mem::offset_of!(acpi_mpst_data_hdr, Reserved) - 2usize];
};
pub type ACPI_MPST_DATA_HDR = acpi_mpst_data_hdr;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_power_data {
    pub StructureId: UINT8,
    pub Flags: UINT8,
    pub Reserved1: UINT16,
    pub AveragePower: UINT32,
    pub PowerSaving: UINT32,
    pub ExitLatency: UINT64,
    pub Reserved2: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_power_data"][::core::mem::size_of::<acpi_mpst_power_data>() - 28usize];
    ["Alignment of acpi_mpst_power_data"][::core::mem::align_of::<acpi_mpst_power_data>() - 1usize];
    ["Offset of field: acpi_mpst_power_data::StructureId"]
        [::core::mem::offset_of!(acpi_mpst_power_data, StructureId) - 0usize];
    ["Offset of field: acpi_mpst_power_data::Flags"]
        [::core::mem::offset_of!(acpi_mpst_power_data, Flags) - 1usize];
    ["Offset of field: acpi_mpst_power_data::Reserved1"]
        [::core::mem::offset_of!(acpi_mpst_power_data, Reserved1) - 2usize];
    ["Offset of field: acpi_mpst_power_data::AveragePower"]
        [::core::mem::offset_of!(acpi_mpst_power_data, AveragePower) - 4usize];
    ["Offset of field: acpi_mpst_power_data::PowerSaving"]
        [::core::mem::offset_of!(acpi_mpst_power_data, PowerSaving) - 8usize];
    ["Offset of field: acpi_mpst_power_data::ExitLatency"]
        [::core::mem::offset_of!(acpi_mpst_power_data, ExitLatency) - 12usize];
    ["Offset of field: acpi_mpst_power_data::Reserved2"]
        [::core::mem::offset_of!(acpi_mpst_power_data, Reserved2) - 20usize];
};
pub type ACPI_MPST_POWER_DATA = acpi_mpst_power_data;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_shared {
    pub Signature: UINT32,
    pub PccCommand: UINT16,
    pub PccStatus: UINT16,
    pub CommandRegister: UINT32,
    pub StatusRegister: UINT32,
    pub PowerStateId: UINT32,
    pub PowerNodeId: UINT32,
    pub EnergyConsumed: UINT64,
    pub AveragePower: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mpst_shared"][::core::mem::size_of::<acpi_mpst_shared>() - 40usize];
    ["Alignment of acpi_mpst_shared"][::core::mem::align_of::<acpi_mpst_shared>() - 1usize];
    ["Offset of field: acpi_mpst_shared::Signature"]
        [::core::mem::offset_of!(acpi_mpst_shared, Signature) - 0usize];
    ["Offset of field: acpi_mpst_shared::PccCommand"]
        [::core::mem::offset_of!(acpi_mpst_shared, PccCommand) - 4usize];
    ["Offset of field: acpi_mpst_shared::PccStatus"]
        [::core::mem::offset_of!(acpi_mpst_shared, PccStatus) - 6usize];
    ["Offset of field: acpi_mpst_shared::CommandRegister"]
        [::core::mem::offset_of!(acpi_mpst_shared, CommandRegister) - 8usize];
    ["Offset of field: acpi_mpst_shared::StatusRegister"]
        [::core::mem::offset_of!(acpi_mpst_shared, StatusRegister) - 12usize];
    ["Offset of field: acpi_mpst_shared::PowerStateId"]
        [::core::mem::offset_of!(acpi_mpst_shared, PowerStateId) - 16usize];
    ["Offset of field: acpi_mpst_shared::PowerNodeId"]
        [::core::mem::offset_of!(acpi_mpst_shared, PowerNodeId) - 20usize];
    ["Offset of field: acpi_mpst_shared::EnergyConsumed"]
        [::core::mem::offset_of!(acpi_mpst_shared, EnergyConsumed) - 24usize];
    ["Offset of field: acpi_mpst_shared::AveragePower"]
        [::core::mem::offset_of!(acpi_mpst_shared, AveragePower) - 32usize];
};
pub type ACPI_MPST_SHARED = acpi_mpst_shared;
#[doc = " MSCT - Maximum System Characteristics Table (ACPI 4.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_msct {
    pub Header: ACPI_TABLE_HEADER,
    pub ProximityOffset: UINT32,
    pub MaxProximityDomains: UINT32,
    pub MaxClockDomains: UINT32,
    pub MaxAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_msct"][::core::mem::size_of::<acpi_table_msct>() - 56usize];
    ["Alignment of acpi_table_msct"][::core::mem::align_of::<acpi_table_msct>() - 1usize];
    ["Offset of field: acpi_table_msct::Header"]
        [::core::mem::offset_of!(acpi_table_msct, Header) - 0usize];
    ["Offset of field: acpi_table_msct::ProximityOffset"]
        [::core::mem::offset_of!(acpi_table_msct, ProximityOffset) - 36usize];
    ["Offset of field: acpi_table_msct::MaxProximityDomains"]
        [::core::mem::offset_of!(acpi_table_msct, MaxProximityDomains) - 40usize];
    ["Offset of field: acpi_table_msct::MaxClockDomains"]
        [::core::mem::offset_of!(acpi_table_msct, MaxClockDomains) - 44usize];
    ["Offset of field: acpi_table_msct::MaxAddress"]
        [::core::mem::offset_of!(acpi_table_msct, MaxAddress) - 48usize];
};
#[doc = " MSCT - Maximum System Characteristics Table (ACPI 4.0)\n        Version 1\n"]
pub type ACPI_TABLE_MSCT = acpi_table_msct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_msct_proximity {
    pub Revision: UINT8,
    pub Length: UINT8,
    pub RangeStart: UINT32,
    pub RangeEnd: UINT32,
    pub ProcessorCapacity: UINT32,
    pub MemoryCapacity: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_msct_proximity"][::core::mem::size_of::<acpi_msct_proximity>() - 22usize];
    ["Alignment of acpi_msct_proximity"][::core::mem::align_of::<acpi_msct_proximity>() - 1usize];
    ["Offset of field: acpi_msct_proximity::Revision"]
        [::core::mem::offset_of!(acpi_msct_proximity, Revision) - 0usize];
    ["Offset of field: acpi_msct_proximity::Length"]
        [::core::mem::offset_of!(acpi_msct_proximity, Length) - 1usize];
    ["Offset of field: acpi_msct_proximity::RangeStart"]
        [::core::mem::offset_of!(acpi_msct_proximity, RangeStart) - 2usize];
    ["Offset of field: acpi_msct_proximity::RangeEnd"]
        [::core::mem::offset_of!(acpi_msct_proximity, RangeEnd) - 6usize];
    ["Offset of field: acpi_msct_proximity::ProcessorCapacity"]
        [::core::mem::offset_of!(acpi_msct_proximity, ProcessorCapacity) - 10usize];
    ["Offset of field: acpi_msct_proximity::MemoryCapacity"]
        [::core::mem::offset_of!(acpi_msct_proximity, MemoryCapacity) - 14usize];
};
pub type ACPI_MSCT_PROXIMITY = acpi_msct_proximity;
#[doc = " MRRM - Memory Range and Region Mapping (MRRM) table\n Conforms to \"Intel Resource Director Technology Architecture Specification\"\n Version 1.1, January 2025\n"]
#[repr(C)]
#[derive(Debug)]
pub struct acpi_table_mrrm {
    pub Header: ACPI_TABLE_HEADER,
    pub MaxMemRegion: UINT8,
    pub Flags: UINT8,
    pub Reserved: [UINT8; 26usize],
    pub Memory_Range_Entry: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_mrrm"][::core::mem::size_of::<acpi_table_mrrm>() - 64usize];
    ["Alignment of acpi_table_mrrm"][::core::mem::align_of::<acpi_table_mrrm>() - 1usize];
    ["Offset of field: acpi_table_mrrm::Header"]
        [::core::mem::offset_of!(acpi_table_mrrm, Header) - 0usize];
    ["Offset of field: acpi_table_mrrm::MaxMemRegion"]
        [::core::mem::offset_of!(acpi_table_mrrm, MaxMemRegion) - 36usize];
    ["Offset of field: acpi_table_mrrm::Flags"]
        [::core::mem::offset_of!(acpi_table_mrrm, Flags) - 37usize];
    ["Offset of field: acpi_table_mrrm::Reserved"]
        [::core::mem::offset_of!(acpi_table_mrrm, Reserved) - 38usize];
    ["Offset of field: acpi_table_mrrm::Memory_Range_Entry"]
        [::core::mem::offset_of!(acpi_table_mrrm, Memory_Range_Entry) - 64usize];
};
#[doc = " MRRM - Memory Range and Region Mapping (MRRM) table\n Conforms to \"Intel Resource Director Technology Architecture Specification\"\n Version 1.1, January 2025\n"]
pub type ACPI_TABLE_MRRM = acpi_table_mrrm;
#[doc = " Memory Range entry - Memory Range entry in MRRM table\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mrrm_mem_range_entry {
    pub Header: ACPI_SUBTBL_HDR_16,
    pub Reserved0: UINT32,
    pub AddrBase: UINT64,
    pub AddrLen: UINT64,
    pub RegionIdFlags: UINT16,
    pub LocalRegionId: UINT8,
    pub RemoteRegionId: UINT8,
    pub Reserved1: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_mrrm_mem_range_entry"]
        [::core::mem::size_of::<acpi_mrrm_mem_range_entry>() - 32usize];
    ["Alignment of acpi_mrrm_mem_range_entry"]
        [::core::mem::align_of::<acpi_mrrm_mem_range_entry>() - 1usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::Header"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, Header) - 0usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::Reserved0"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, Reserved0) - 4usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::AddrBase"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, AddrBase) - 8usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::AddrLen"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, AddrLen) - 16usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::RegionIdFlags"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, RegionIdFlags) - 24usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::LocalRegionId"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, LocalRegionId) - 26usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::RemoteRegionId"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, RemoteRegionId) - 27usize];
    ["Offset of field: acpi_mrrm_mem_range_entry::Reserved1"]
        [::core::mem::offset_of!(acpi_mrrm_mem_range_entry, Reserved1) - 28usize];
};
#[doc = " Memory Range entry - Memory Range entry in MRRM table\n"]
pub type ACPI_MRRM_MEM_RANGE_ENTRY = acpi_mrrm_mem_range_entry;
#[doc = " MSDM - Microsoft Data Management table\n\n Conforms to \"Microsoft Software Licensing Tables (SLIC and MSDM)\",\n November 29, 2011. Copyright 2011 Microsoft\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_msdm {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_msdm"][::core::mem::size_of::<acpi_table_msdm>() - 36usize];
    ["Alignment of acpi_table_msdm"][::core::mem::align_of::<acpi_table_msdm>() - 1usize];
    ["Offset of field: acpi_table_msdm::Header"]
        [::core::mem::offset_of!(acpi_table_msdm, Header) - 0usize];
};
#[doc = " MSDM - Microsoft Data Management table\n\n Conforms to \"Microsoft Software Licensing Tables (SLIC and MSDM)\",\n November 29, 2011. Copyright 2011 Microsoft\n"]
pub type ACPI_TABLE_MSDM = acpi_table_msdm;
#[doc = " NFIT - NVDIMM Interface Table (ACPI 6.0+)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_nfit {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_nfit"][::core::mem::size_of::<acpi_table_nfit>() - 40usize];
    ["Alignment of acpi_table_nfit"][::core::mem::align_of::<acpi_table_nfit>() - 1usize];
    ["Offset of field: acpi_table_nfit::Header"]
        [::core::mem::offset_of!(acpi_table_nfit, Header) - 0usize];
    ["Offset of field: acpi_table_nfit::Reserved"]
        [::core::mem::offset_of!(acpi_table_nfit, Reserved) - 36usize];
};
#[doc = " NFIT - NVDIMM Interface Table (ACPI 6.0+)\n        Version 1\n"]
pub type ACPI_TABLE_NFIT = acpi_table_nfit;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_header {
    pub Type: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_header"][::core::mem::size_of::<acpi_nfit_header>() - 4usize];
    ["Alignment of acpi_nfit_header"][::core::mem::align_of::<acpi_nfit_header>() - 1usize];
    ["Offset of field: acpi_nfit_header::Type"]
        [::core::mem::offset_of!(acpi_nfit_header, Type) - 0usize];
    ["Offset of field: acpi_nfit_header::Length"]
        [::core::mem::offset_of!(acpi_nfit_header, Length) - 2usize];
};
pub type ACPI_NFIT_HEADER = acpi_nfit_header;
pub const AcpiNfitType_ACPI_NFIT_TYPE_SYSTEM_ADDRESS: AcpiNfitType = 0;
pub const AcpiNfitType_ACPI_NFIT_TYPE_MEMORY_MAP: AcpiNfitType = 1;
pub const AcpiNfitType_ACPI_NFIT_TYPE_INTERLEAVE: AcpiNfitType = 2;
pub const AcpiNfitType_ACPI_NFIT_TYPE_SMBIOS: AcpiNfitType = 3;
pub const AcpiNfitType_ACPI_NFIT_TYPE_CONTROL_REGION: AcpiNfitType = 4;
pub const AcpiNfitType_ACPI_NFIT_TYPE_DATA_REGION: AcpiNfitType = 5;
pub const AcpiNfitType_ACPI_NFIT_TYPE_FLUSH_ADDRESS: AcpiNfitType = 6;
pub const AcpiNfitType_ACPI_NFIT_TYPE_CAPABILITIES: AcpiNfitType = 7;
pub const AcpiNfitType_ACPI_NFIT_TYPE_RESERVED: AcpiNfitType = 8;
pub type AcpiNfitType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_system_address {
    pub Header: ACPI_NFIT_HEADER,
    pub RangeIndex: UINT16,
    pub Flags: UINT16,
    pub Reserved: UINT32,
    pub ProximityDomain: UINT32,
    pub RangeGuid: [UINT8; 16usize],
    pub Address: UINT64,
    pub Length: UINT64,
    pub MemoryMapping: UINT64,
    pub LocationCookie: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_system_address"]
        [::core::mem::size_of::<acpi_nfit_system_address>() - 64usize];
    ["Alignment of acpi_nfit_system_address"]
        [::core::mem::align_of::<acpi_nfit_system_address>() - 1usize];
    ["Offset of field: acpi_nfit_system_address::Header"]
        [::core::mem::offset_of!(acpi_nfit_system_address, Header) - 0usize];
    ["Offset of field: acpi_nfit_system_address::RangeIndex"]
        [::core::mem::offset_of!(acpi_nfit_system_address, RangeIndex) - 4usize];
    ["Offset of field: acpi_nfit_system_address::Flags"]
        [::core::mem::offset_of!(acpi_nfit_system_address, Flags) - 6usize];
    ["Offset of field: acpi_nfit_system_address::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_system_address, Reserved) - 8usize];
    ["Offset of field: acpi_nfit_system_address::ProximityDomain"]
        [::core::mem::offset_of!(acpi_nfit_system_address, ProximityDomain) - 12usize];
    ["Offset of field: acpi_nfit_system_address::RangeGuid"]
        [::core::mem::offset_of!(acpi_nfit_system_address, RangeGuid) - 16usize];
    ["Offset of field: acpi_nfit_system_address::Address"]
        [::core::mem::offset_of!(acpi_nfit_system_address, Address) - 32usize];
    ["Offset of field: acpi_nfit_system_address::Length"]
        [::core::mem::offset_of!(acpi_nfit_system_address, Length) - 40usize];
    ["Offset of field: acpi_nfit_system_address::MemoryMapping"]
        [::core::mem::offset_of!(acpi_nfit_system_address, MemoryMapping) - 48usize];
    ["Offset of field: acpi_nfit_system_address::LocationCookie"]
        [::core::mem::offset_of!(acpi_nfit_system_address, LocationCookie) - 56usize];
};
pub type ACPI_NFIT_SYSTEM_ADDRESS = acpi_nfit_system_address;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_memory_map {
    pub Header: ACPI_NFIT_HEADER,
    pub DeviceHandle: UINT32,
    pub PhysicalId: UINT16,
    pub RegionId: UINT16,
    pub RangeIndex: UINT16,
    pub RegionIndex: UINT16,
    pub RegionSize: UINT64,
    pub RegionOffset: UINT64,
    pub Address: UINT64,
    pub InterleaveIndex: UINT16,
    pub InterleaveWays: UINT16,
    pub Flags: UINT16,
    pub Reserved: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_memory_map"][::core::mem::size_of::<acpi_nfit_memory_map>() - 48usize];
    ["Alignment of acpi_nfit_memory_map"][::core::mem::align_of::<acpi_nfit_memory_map>() - 1usize];
    ["Offset of field: acpi_nfit_memory_map::Header"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, Header) - 0usize];
    ["Offset of field: acpi_nfit_memory_map::DeviceHandle"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, DeviceHandle) - 4usize];
    ["Offset of field: acpi_nfit_memory_map::PhysicalId"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, PhysicalId) - 8usize];
    ["Offset of field: acpi_nfit_memory_map::RegionId"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, RegionId) - 10usize];
    ["Offset of field: acpi_nfit_memory_map::RangeIndex"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, RangeIndex) - 12usize];
    ["Offset of field: acpi_nfit_memory_map::RegionIndex"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, RegionIndex) - 14usize];
    ["Offset of field: acpi_nfit_memory_map::RegionSize"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, RegionSize) - 16usize];
    ["Offset of field: acpi_nfit_memory_map::RegionOffset"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, RegionOffset) - 24usize];
    ["Offset of field: acpi_nfit_memory_map::Address"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, Address) - 32usize];
    ["Offset of field: acpi_nfit_memory_map::InterleaveIndex"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, InterleaveIndex) - 40usize];
    ["Offset of field: acpi_nfit_memory_map::InterleaveWays"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, InterleaveWays) - 42usize];
    ["Offset of field: acpi_nfit_memory_map::Flags"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, Flags) - 44usize];
    ["Offset of field: acpi_nfit_memory_map::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_memory_map, Reserved) - 46usize];
};
pub type ACPI_NFIT_MEMORY_MAP = acpi_nfit_memory_map;
#[repr(C, packed)]
pub struct acpi_nfit_interleave {
    pub Header: ACPI_NFIT_HEADER,
    pub InterleaveIndex: UINT16,
    pub Reserved: UINT16,
    pub LineCount: UINT32,
    pub LineSize: UINT32,
    pub LineOffset: __IncompleteArrayField<UINT32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_interleave"][::core::mem::size_of::<acpi_nfit_interleave>() - 16usize];
    ["Alignment of acpi_nfit_interleave"][::core::mem::align_of::<acpi_nfit_interleave>() - 1usize];
    ["Offset of field: acpi_nfit_interleave::Header"]
        [::core::mem::offset_of!(acpi_nfit_interleave, Header) - 0usize];
    ["Offset of field: acpi_nfit_interleave::InterleaveIndex"]
        [::core::mem::offset_of!(acpi_nfit_interleave, InterleaveIndex) - 4usize];
    ["Offset of field: acpi_nfit_interleave::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_interleave, Reserved) - 6usize];
    ["Offset of field: acpi_nfit_interleave::LineCount"]
        [::core::mem::offset_of!(acpi_nfit_interleave, LineCount) - 8usize];
    ["Offset of field: acpi_nfit_interleave::LineSize"]
        [::core::mem::offset_of!(acpi_nfit_interleave, LineSize) - 12usize];
    ["Offset of field: acpi_nfit_interleave::LineOffset"]
        [::core::mem::offset_of!(acpi_nfit_interleave, LineOffset) - 16usize];
};
pub type ACPI_NFIT_INTERLEAVE = acpi_nfit_interleave;
#[repr(C, packed)]
pub struct acpi_nfit_smbios {
    pub Header: ACPI_NFIT_HEADER,
    pub Reserved: UINT32,
    pub Data: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_smbios"][::core::mem::size_of::<acpi_nfit_smbios>() - 8usize];
    ["Alignment of acpi_nfit_smbios"][::core::mem::align_of::<acpi_nfit_smbios>() - 1usize];
    ["Offset of field: acpi_nfit_smbios::Header"]
        [::core::mem::offset_of!(acpi_nfit_smbios, Header) - 0usize];
    ["Offset of field: acpi_nfit_smbios::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_smbios, Reserved) - 4usize];
    ["Offset of field: acpi_nfit_smbios::Data"]
        [::core::mem::offset_of!(acpi_nfit_smbios, Data) - 8usize];
};
pub type ACPI_NFIT_SMBIOS = acpi_nfit_smbios;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_control_region {
    pub Header: ACPI_NFIT_HEADER,
    pub RegionIndex: UINT16,
    pub VendorId: UINT16,
    pub DeviceId: UINT16,
    pub RevisionId: UINT16,
    pub SubsystemVendorId: UINT16,
    pub SubsystemDeviceId: UINT16,
    pub SubsystemRevisionId: UINT16,
    pub ValidFields: UINT8,
    pub ManufacturingLocation: UINT8,
    pub ManufacturingDate: UINT16,
    pub Reserved: [UINT8; 2usize],
    pub SerialNumber: UINT32,
    pub Code: UINT16,
    pub Windows: UINT16,
    pub WindowSize: UINT64,
    pub CommandOffset: UINT64,
    pub CommandSize: UINT64,
    pub StatusOffset: UINT64,
    pub StatusSize: UINT64,
    pub Flags: UINT16,
    pub Reserved1: [UINT8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_control_region"]
        [::core::mem::size_of::<acpi_nfit_control_region>() - 80usize];
    ["Alignment of acpi_nfit_control_region"]
        [::core::mem::align_of::<acpi_nfit_control_region>() - 1usize];
    ["Offset of field: acpi_nfit_control_region::Header"]
        [::core::mem::offset_of!(acpi_nfit_control_region, Header) - 0usize];
    ["Offset of field: acpi_nfit_control_region::RegionIndex"]
        [::core::mem::offset_of!(acpi_nfit_control_region, RegionIndex) - 4usize];
    ["Offset of field: acpi_nfit_control_region::VendorId"]
        [::core::mem::offset_of!(acpi_nfit_control_region, VendorId) - 6usize];
    ["Offset of field: acpi_nfit_control_region::DeviceId"]
        [::core::mem::offset_of!(acpi_nfit_control_region, DeviceId) - 8usize];
    ["Offset of field: acpi_nfit_control_region::RevisionId"]
        [::core::mem::offset_of!(acpi_nfit_control_region, RevisionId) - 10usize];
    ["Offset of field: acpi_nfit_control_region::SubsystemVendorId"]
        [::core::mem::offset_of!(acpi_nfit_control_region, SubsystemVendorId) - 12usize];
    ["Offset of field: acpi_nfit_control_region::SubsystemDeviceId"]
        [::core::mem::offset_of!(acpi_nfit_control_region, SubsystemDeviceId) - 14usize];
    ["Offset of field: acpi_nfit_control_region::SubsystemRevisionId"]
        [::core::mem::offset_of!(acpi_nfit_control_region, SubsystemRevisionId) - 16usize];
    ["Offset of field: acpi_nfit_control_region::ValidFields"]
        [::core::mem::offset_of!(acpi_nfit_control_region, ValidFields) - 18usize];
    ["Offset of field: acpi_nfit_control_region::ManufacturingLocation"]
        [::core::mem::offset_of!(acpi_nfit_control_region, ManufacturingLocation) - 19usize];
    ["Offset of field: acpi_nfit_control_region::ManufacturingDate"]
        [::core::mem::offset_of!(acpi_nfit_control_region, ManufacturingDate) - 20usize];
    ["Offset of field: acpi_nfit_control_region::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_control_region, Reserved) - 22usize];
    ["Offset of field: acpi_nfit_control_region::SerialNumber"]
        [::core::mem::offset_of!(acpi_nfit_control_region, SerialNumber) - 24usize];
    ["Offset of field: acpi_nfit_control_region::Code"]
        [::core::mem::offset_of!(acpi_nfit_control_region, Code) - 28usize];
    ["Offset of field: acpi_nfit_control_region::Windows"]
        [::core::mem::offset_of!(acpi_nfit_control_region, Windows) - 30usize];
    ["Offset of field: acpi_nfit_control_region::WindowSize"]
        [::core::mem::offset_of!(acpi_nfit_control_region, WindowSize) - 32usize];
    ["Offset of field: acpi_nfit_control_region::CommandOffset"]
        [::core::mem::offset_of!(acpi_nfit_control_region, CommandOffset) - 40usize];
    ["Offset of field: acpi_nfit_control_region::CommandSize"]
        [::core::mem::offset_of!(acpi_nfit_control_region, CommandSize) - 48usize];
    ["Offset of field: acpi_nfit_control_region::StatusOffset"]
        [::core::mem::offset_of!(acpi_nfit_control_region, StatusOffset) - 56usize];
    ["Offset of field: acpi_nfit_control_region::StatusSize"]
        [::core::mem::offset_of!(acpi_nfit_control_region, StatusSize) - 64usize];
    ["Offset of field: acpi_nfit_control_region::Flags"]
        [::core::mem::offset_of!(acpi_nfit_control_region, Flags) - 72usize];
    ["Offset of field: acpi_nfit_control_region::Reserved1"]
        [::core::mem::offset_of!(acpi_nfit_control_region, Reserved1) - 74usize];
};
pub type ACPI_NFIT_CONTROL_REGION = acpi_nfit_control_region;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_data_region {
    pub Header: ACPI_NFIT_HEADER,
    pub RegionIndex: UINT16,
    pub Windows: UINT16,
    pub Offset: UINT64,
    pub Size: UINT64,
    pub Capacity: UINT64,
    pub StartAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_data_region"][::core::mem::size_of::<acpi_nfit_data_region>() - 40usize];
    ["Alignment of acpi_nfit_data_region"]
        [::core::mem::align_of::<acpi_nfit_data_region>() - 1usize];
    ["Offset of field: acpi_nfit_data_region::Header"]
        [::core::mem::offset_of!(acpi_nfit_data_region, Header) - 0usize];
    ["Offset of field: acpi_nfit_data_region::RegionIndex"]
        [::core::mem::offset_of!(acpi_nfit_data_region, RegionIndex) - 4usize];
    ["Offset of field: acpi_nfit_data_region::Windows"]
        [::core::mem::offset_of!(acpi_nfit_data_region, Windows) - 6usize];
    ["Offset of field: acpi_nfit_data_region::Offset"]
        [::core::mem::offset_of!(acpi_nfit_data_region, Offset) - 8usize];
    ["Offset of field: acpi_nfit_data_region::Size"]
        [::core::mem::offset_of!(acpi_nfit_data_region, Size) - 16usize];
    ["Offset of field: acpi_nfit_data_region::Capacity"]
        [::core::mem::offset_of!(acpi_nfit_data_region, Capacity) - 24usize];
    ["Offset of field: acpi_nfit_data_region::StartAddress"]
        [::core::mem::offset_of!(acpi_nfit_data_region, StartAddress) - 32usize];
};
pub type ACPI_NFIT_DATA_REGION = acpi_nfit_data_region;
#[repr(C, packed)]
pub struct acpi_nfit_flush_address {
    pub Header: ACPI_NFIT_HEADER,
    pub DeviceHandle: UINT32,
    pub HintCount: UINT16,
    pub Reserved: [UINT8; 6usize],
    pub HintAddress: __IncompleteArrayField<UINT64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_flush_address"]
        [::core::mem::size_of::<acpi_nfit_flush_address>() - 16usize];
    ["Alignment of acpi_nfit_flush_address"]
        [::core::mem::align_of::<acpi_nfit_flush_address>() - 1usize];
    ["Offset of field: acpi_nfit_flush_address::Header"]
        [::core::mem::offset_of!(acpi_nfit_flush_address, Header) - 0usize];
    ["Offset of field: acpi_nfit_flush_address::DeviceHandle"]
        [::core::mem::offset_of!(acpi_nfit_flush_address, DeviceHandle) - 4usize];
    ["Offset of field: acpi_nfit_flush_address::HintCount"]
        [::core::mem::offset_of!(acpi_nfit_flush_address, HintCount) - 8usize];
    ["Offset of field: acpi_nfit_flush_address::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_flush_address, Reserved) - 10usize];
    ["Offset of field: acpi_nfit_flush_address::HintAddress"]
        [::core::mem::offset_of!(acpi_nfit_flush_address, HintAddress) - 16usize];
};
pub type ACPI_NFIT_FLUSH_ADDRESS = acpi_nfit_flush_address;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_capabilities {
    pub Header: ACPI_NFIT_HEADER,
    pub HighestCapability: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub Capabilities: UINT32,
    pub Reserved2: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nfit_capabilities"][::core::mem::size_of::<acpi_nfit_capabilities>() - 16usize];
    ["Alignment of acpi_nfit_capabilities"]
        [::core::mem::align_of::<acpi_nfit_capabilities>() - 1usize];
    ["Offset of field: acpi_nfit_capabilities::Header"]
        [::core::mem::offset_of!(acpi_nfit_capabilities, Header) - 0usize];
    ["Offset of field: acpi_nfit_capabilities::HighestCapability"]
        [::core::mem::offset_of!(acpi_nfit_capabilities, HighestCapability) - 4usize];
    ["Offset of field: acpi_nfit_capabilities::Reserved"]
        [::core::mem::offset_of!(acpi_nfit_capabilities, Reserved) - 5usize];
    ["Offset of field: acpi_nfit_capabilities::Capabilities"]
        [::core::mem::offset_of!(acpi_nfit_capabilities, Capabilities) - 8usize];
    ["Offset of field: acpi_nfit_capabilities::Reserved2"]
        [::core::mem::offset_of!(acpi_nfit_capabilities, Reserved2) - 12usize];
};
pub type ACPI_NFIT_CAPABILITIES = acpi_nfit_capabilities;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nfit_device_handle {
    pub Handle: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nfit_device_handle"][::core::mem::size_of::<nfit_device_handle>() - 4usize];
    ["Alignment of nfit_device_handle"][::core::mem::align_of::<nfit_device_handle>() - 1usize];
    ["Offset of field: nfit_device_handle::Handle"]
        [::core::mem::offset_of!(nfit_device_handle, Handle) - 0usize];
};
pub type NFIT_DEVICE_HANDLE = nfit_device_handle;
#[doc = " NHLT - Non HDAudio Link Table\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_nhlt {
    pub Header: ACPI_TABLE_HEADER,
    pub EndpointsCount: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_nhlt"][::core::mem::size_of::<acpi_table_nhlt>() - 37usize];
    ["Alignment of acpi_table_nhlt"][::core::mem::align_of::<acpi_table_nhlt>() - 1usize];
    ["Offset of field: acpi_table_nhlt::Header"]
        [::core::mem::offset_of!(acpi_table_nhlt, Header) - 0usize];
    ["Offset of field: acpi_table_nhlt::EndpointsCount"]
        [::core::mem::offset_of!(acpi_table_nhlt, EndpointsCount) - 36usize];
};
#[doc = " NHLT - Non HDAudio Link Table\n        Version 1\n"]
pub type ACPI_TABLE_NHLT = acpi_table_nhlt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_endpoint {
    pub Length: UINT32,
    pub LinkType: UINT8,
    pub InstanceId: UINT8,
    pub VendorId: UINT16,
    pub DeviceId: UINT16,
    pub RevisionId: UINT16,
    pub SubsystemId: UINT32,
    pub DeviceType: UINT8,
    pub Direction: UINT8,
    pub VirtualBusId: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_endpoint"][::core::mem::size_of::<acpi_nhlt_endpoint>() - 19usize];
    ["Alignment of acpi_nhlt_endpoint"][::core::mem::align_of::<acpi_nhlt_endpoint>() - 1usize];
    ["Offset of field: acpi_nhlt_endpoint::Length"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, Length) - 0usize];
    ["Offset of field: acpi_nhlt_endpoint::LinkType"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, LinkType) - 4usize];
    ["Offset of field: acpi_nhlt_endpoint::InstanceId"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, InstanceId) - 5usize];
    ["Offset of field: acpi_nhlt_endpoint::VendorId"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, VendorId) - 6usize];
    ["Offset of field: acpi_nhlt_endpoint::DeviceId"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, DeviceId) - 8usize];
    ["Offset of field: acpi_nhlt_endpoint::RevisionId"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, RevisionId) - 10usize];
    ["Offset of field: acpi_nhlt_endpoint::SubsystemId"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, SubsystemId) - 12usize];
    ["Offset of field: acpi_nhlt_endpoint::DeviceType"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, DeviceType) - 16usize];
    ["Offset of field: acpi_nhlt_endpoint::Direction"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, Direction) - 17usize];
    ["Offset of field: acpi_nhlt_endpoint::VirtualBusId"]
        [::core::mem::offset_of!(acpi_nhlt_endpoint, VirtualBusId) - 18usize];
};
pub type ACPI_NHLT_ENDPOINT = acpi_nhlt_endpoint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_config {
    pub CapabilitiesSize: UINT32,
    pub Capabilities: [UINT8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_config"][::core::mem::size_of::<acpi_nhlt_config>() - 5usize];
    ["Alignment of acpi_nhlt_config"][::core::mem::align_of::<acpi_nhlt_config>() - 1usize];
    ["Offset of field: acpi_nhlt_config::CapabilitiesSize"]
        [::core::mem::offset_of!(acpi_nhlt_config, CapabilitiesSize) - 0usize];
    ["Offset of field: acpi_nhlt_config::Capabilities"]
        [::core::mem::offset_of!(acpi_nhlt_config, Capabilities) - 4usize];
};
pub type ACPI_NHLT_CONFIG = acpi_nhlt_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_gendevice_config {
    pub VirtualSlot: UINT8,
    pub ConfigType: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_gendevice_config"]
        [::core::mem::size_of::<acpi_nhlt_gendevice_config>() - 2usize];
    ["Alignment of acpi_nhlt_gendevice_config"]
        [::core::mem::align_of::<acpi_nhlt_gendevice_config>() - 1usize];
    ["Offset of field: acpi_nhlt_gendevice_config::VirtualSlot"]
        [::core::mem::offset_of!(acpi_nhlt_gendevice_config, VirtualSlot) - 0usize];
    ["Offset of field: acpi_nhlt_gendevice_config::ConfigType"]
        [::core::mem::offset_of!(acpi_nhlt_gendevice_config, ConfigType) - 1usize];
};
pub type ACPI_NHLT_GENDEVICE_CONFIG = acpi_nhlt_gendevice_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_micdevice_config {
    pub VirtualSlot: UINT8,
    pub ConfigType: UINT8,
    pub ArrayType: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_micdevice_config"]
        [::core::mem::size_of::<acpi_nhlt_micdevice_config>() - 3usize];
    ["Alignment of acpi_nhlt_micdevice_config"]
        [::core::mem::align_of::<acpi_nhlt_micdevice_config>() - 1usize];
    ["Offset of field: acpi_nhlt_micdevice_config::VirtualSlot"]
        [::core::mem::offset_of!(acpi_nhlt_micdevice_config, VirtualSlot) - 0usize];
    ["Offset of field: acpi_nhlt_micdevice_config::ConfigType"]
        [::core::mem::offset_of!(acpi_nhlt_micdevice_config, ConfigType) - 1usize];
    ["Offset of field: acpi_nhlt_micdevice_config::ArrayType"]
        [::core::mem::offset_of!(acpi_nhlt_micdevice_config, ArrayType) - 2usize];
};
pub type ACPI_NHLT_MICDEVICE_CONFIG = acpi_nhlt_micdevice_config;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_vendor_mic_config {
    pub Type: UINT8,
    pub Panel: UINT8,
    pub SpeakerPositionDistance: UINT16,
    pub HorizontalOffset: UINT16,
    pub VerticalOffset: UINT16,
    pub FrequencyLowBand: UINT8,
    pub FrequencyHighBand: UINT8,
    pub DirectionAngle: UINT16,
    pub ElevationAngle: UINT16,
    pub WorkVerticalAngleBegin: UINT16,
    pub WorkVerticalAngleEnd: UINT16,
    pub WorkHorizontalAngleBegin: UINT16,
    pub WorkHorizontalAngleEnd: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_vendor_mic_config"]
        [::core::mem::size_of::<acpi_nhlt_vendor_mic_config>() - 22usize];
    ["Alignment of acpi_nhlt_vendor_mic_config"]
        [::core::mem::align_of::<acpi_nhlt_vendor_mic_config>() - 1usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::Type"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, Type) - 0usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::Panel"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, Panel) - 1usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::SpeakerPositionDistance"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, SpeakerPositionDistance) - 2usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::HorizontalOffset"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, HorizontalOffset) - 4usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::VerticalOffset"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, VerticalOffset) - 6usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::FrequencyLowBand"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, FrequencyLowBand) - 8usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::FrequencyHighBand"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, FrequencyHighBand) - 9usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::DirectionAngle"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, DirectionAngle) - 10usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::ElevationAngle"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, ElevationAngle) - 12usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::WorkVerticalAngleBegin"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, WorkVerticalAngleBegin) - 14usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::WorkVerticalAngleEnd"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, WorkVerticalAngleEnd) - 16usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::WorkHorizontalAngleBegin"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, WorkHorizontalAngleBegin) - 18usize];
    ["Offset of field: acpi_nhlt_vendor_mic_config::WorkHorizontalAngleEnd"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_mic_config, WorkHorizontalAngleEnd) - 20usize];
};
pub type ACPI_NHLT_VENDOR_MIC_CONFIG = acpi_nhlt_vendor_mic_config;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_nhlt_vendor_micdevice_config {
    pub VirtualSlot: UINT8,
    pub ConfigType: UINT8,
    pub ArrayType: UINT8,
    pub MicsCount: UINT8,
    pub Mics: __IncompleteArrayField<ACPI_NHLT_VENDOR_MIC_CONFIG>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_vendor_micdevice_config"]
        [::core::mem::size_of::<acpi_nhlt_vendor_micdevice_config>() - 4usize];
    ["Alignment of acpi_nhlt_vendor_micdevice_config"]
        [::core::mem::align_of::<acpi_nhlt_vendor_micdevice_config>() - 1usize];
    ["Offset of field: acpi_nhlt_vendor_micdevice_config::VirtualSlot"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_micdevice_config, VirtualSlot) - 0usize];
    ["Offset of field: acpi_nhlt_vendor_micdevice_config::ConfigType"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_micdevice_config, ConfigType) - 1usize];
    ["Offset of field: acpi_nhlt_vendor_micdevice_config::ArrayType"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_micdevice_config, ArrayType) - 2usize];
    ["Offset of field: acpi_nhlt_vendor_micdevice_config::MicsCount"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_micdevice_config, MicsCount) - 3usize];
    ["Offset of field: acpi_nhlt_vendor_micdevice_config::Mics"]
        [::core::mem::offset_of!(acpi_nhlt_vendor_micdevice_config, Mics) - 4usize];
};
pub type ACPI_NHLT_VENDOR_MICDEVICE_CONFIG = acpi_nhlt_vendor_micdevice_config;
#[repr(C)]
pub struct acpi_nhlt_device_config {
    pub VirtualSlot: __BindgenUnionField<UINT8>,
    pub Gen: __BindgenUnionField<ACPI_NHLT_GENDEVICE_CONFIG>,
    pub Mic: __BindgenUnionField<ACPI_NHLT_MICDEVICE_CONFIG>,
    pub VendorMic: __BindgenUnionField<ACPI_NHLT_VENDOR_MICDEVICE_CONFIG>,
    pub bindgen_union_field: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_device_config"][::core::mem::size_of::<acpi_nhlt_device_config>() - 4usize];
    ["Alignment of acpi_nhlt_device_config"]
        [::core::mem::align_of::<acpi_nhlt_device_config>() - 1usize];
    ["Offset of field: acpi_nhlt_device_config::VirtualSlot"]
        [::core::mem::offset_of!(acpi_nhlt_device_config, VirtualSlot) - 0usize];
    ["Offset of field: acpi_nhlt_device_config::Gen"]
        [::core::mem::offset_of!(acpi_nhlt_device_config, Gen) - 0usize];
    ["Offset of field: acpi_nhlt_device_config::Mic"]
        [::core::mem::offset_of!(acpi_nhlt_device_config, Mic) - 0usize];
    ["Offset of field: acpi_nhlt_device_config::VendorMic"]
        [::core::mem::offset_of!(acpi_nhlt_device_config, VendorMic) - 0usize];
};
pub type ACPI_NHLT_DEVICE_CONFIG = acpi_nhlt_device_config;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_wave_formatext {
    pub FormatTag: UINT16,
    pub ChannelCount: UINT16,
    pub SamplesPerSec: UINT32,
    pub AvgBytesPerSec: UINT32,
    pub BlockAlign: UINT16,
    pub BitsPerSample: UINT16,
    pub ExtraFormatSize: UINT16,
    pub ValidBitsPerSample: UINT16,
    pub ChannelMask: UINT32,
    pub Subformat: [UINT8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_wave_formatext"]
        [::core::mem::size_of::<acpi_nhlt_wave_formatext>() - 40usize];
    ["Alignment of acpi_nhlt_wave_formatext"]
        [::core::mem::align_of::<acpi_nhlt_wave_formatext>() - 1usize];
    ["Offset of field: acpi_nhlt_wave_formatext::FormatTag"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, FormatTag) - 0usize];
    ["Offset of field: acpi_nhlt_wave_formatext::ChannelCount"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, ChannelCount) - 2usize];
    ["Offset of field: acpi_nhlt_wave_formatext::SamplesPerSec"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, SamplesPerSec) - 4usize];
    ["Offset of field: acpi_nhlt_wave_formatext::AvgBytesPerSec"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, AvgBytesPerSec) - 8usize];
    ["Offset of field: acpi_nhlt_wave_formatext::BlockAlign"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, BlockAlign) - 12usize];
    ["Offset of field: acpi_nhlt_wave_formatext::BitsPerSample"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, BitsPerSample) - 14usize];
    ["Offset of field: acpi_nhlt_wave_formatext::ExtraFormatSize"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, ExtraFormatSize) - 16usize];
    ["Offset of field: acpi_nhlt_wave_formatext::ValidBitsPerSample"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, ValidBitsPerSample) - 18usize];
    ["Offset of field: acpi_nhlt_wave_formatext::ChannelMask"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, ChannelMask) - 20usize];
    ["Offset of field: acpi_nhlt_wave_formatext::Subformat"]
        [::core::mem::offset_of!(acpi_nhlt_wave_formatext, Subformat) - 24usize];
};
pub type ACPI_NHLT_WAVE_FORMATEXT = acpi_nhlt_wave_formatext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_format_config {
    pub Format: ACPI_NHLT_WAVE_FORMATEXT,
    pub Config: ACPI_NHLT_CONFIG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_format_config"]
        [::core::mem::size_of::<acpi_nhlt_format_config>() - 45usize];
    ["Alignment of acpi_nhlt_format_config"]
        [::core::mem::align_of::<acpi_nhlt_format_config>() - 1usize];
    ["Offset of field: acpi_nhlt_format_config::Format"]
        [::core::mem::offset_of!(acpi_nhlt_format_config, Format) - 0usize];
    ["Offset of field: acpi_nhlt_format_config::Config"]
        [::core::mem::offset_of!(acpi_nhlt_format_config, Config) - 40usize];
};
pub type ACPI_NHLT_FORMAT_CONFIG = acpi_nhlt_format_config;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_nhlt_formats_config {
    pub FormatsCount: UINT8,
    pub Formats: __IncompleteArrayField<ACPI_NHLT_FORMAT_CONFIG>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_formats_config"]
        [::core::mem::size_of::<acpi_nhlt_formats_config>() - 1usize];
    ["Alignment of acpi_nhlt_formats_config"]
        [::core::mem::align_of::<acpi_nhlt_formats_config>() - 1usize];
    ["Offset of field: acpi_nhlt_formats_config::FormatsCount"]
        [::core::mem::offset_of!(acpi_nhlt_formats_config, FormatsCount) - 0usize];
    ["Offset of field: acpi_nhlt_formats_config::Formats"]
        [::core::mem::offset_of!(acpi_nhlt_formats_config, Formats) - 1usize];
};
pub type ACPI_NHLT_FORMATS_CONFIG = acpi_nhlt_formats_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nhlt_device_info {
    pub Id: [UINT8; 16usize],
    pub InstanceId: UINT8,
    pub PortId: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_device_info"][::core::mem::size_of::<acpi_nhlt_device_info>() - 18usize];
    ["Alignment of acpi_nhlt_device_info"]
        [::core::mem::align_of::<acpi_nhlt_device_info>() - 1usize];
    ["Offset of field: acpi_nhlt_device_info::Id"]
        [::core::mem::offset_of!(acpi_nhlt_device_info, Id) - 0usize];
    ["Offset of field: acpi_nhlt_device_info::InstanceId"]
        [::core::mem::offset_of!(acpi_nhlt_device_info, InstanceId) - 16usize];
    ["Offset of field: acpi_nhlt_device_info::PortId"]
        [::core::mem::offset_of!(acpi_nhlt_device_info, PortId) - 17usize];
};
pub type ACPI_NHLT_DEVICE_INFO = acpi_nhlt_device_info;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_nhlt_devices_info {
    pub DevicesCount: UINT8,
    pub Devices: __IncompleteArrayField<ACPI_NHLT_DEVICE_INFO>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_nhlt_devices_info"][::core::mem::size_of::<acpi_nhlt_devices_info>() - 1usize];
    ["Alignment of acpi_nhlt_devices_info"]
        [::core::mem::align_of::<acpi_nhlt_devices_info>() - 1usize];
    ["Offset of field: acpi_nhlt_devices_info::DevicesCount"]
        [::core::mem::offset_of!(acpi_nhlt_devices_info, DevicesCount) - 0usize];
    ["Offset of field: acpi_nhlt_devices_info::Devices"]
        [::core::mem::offset_of!(acpi_nhlt_devices_info, Devices) - 1usize];
};
pub type ACPI_NHLT_DEVICES_INFO = acpi_nhlt_devices_info;
#[doc = " PCCT - Platform Communications Channel Table (ACPI 5.0)\n        Version 2 (ACPI 6.2)\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pcct {
    pub Header: ACPI_TABLE_HEADER,
    pub Flags: UINT32,
    pub Reserved: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_pcct"][::core::mem::size_of::<acpi_table_pcct>() - 48usize];
    ["Alignment of acpi_table_pcct"][::core::mem::align_of::<acpi_table_pcct>() - 1usize];
    ["Offset of field: acpi_table_pcct::Header"]
        [::core::mem::offset_of!(acpi_table_pcct, Header) - 0usize];
    ["Offset of field: acpi_table_pcct::Flags"]
        [::core::mem::offset_of!(acpi_table_pcct, Flags) - 36usize];
    ["Offset of field: acpi_table_pcct::Reserved"]
        [::core::mem::offset_of!(acpi_table_pcct, Reserved) - 40usize];
};
#[doc = " PCCT - Platform Communications Channel Table (ACPI 5.0)\n        Version 2 (ACPI 6.2)\n"]
pub type ACPI_TABLE_PCCT = acpi_table_pcct;
pub const AcpiPcctType_ACPI_PCCT_TYPE_GENERIC_SUBSPACE: AcpiPcctType = 0;
pub const AcpiPcctType_ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE: AcpiPcctType = 1;
pub const AcpiPcctType_ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2: AcpiPcctType = 2;
pub const AcpiPcctType_ACPI_PCCT_TYPE_EXT_PCC_MASTER_SUBSPACE: AcpiPcctType = 3;
pub const AcpiPcctType_ACPI_PCCT_TYPE_EXT_PCC_SLAVE_SUBSPACE: AcpiPcctType = 4;
pub const AcpiPcctType_ACPI_PCCT_TYPE_HW_REG_COMM_SUBSPACE: AcpiPcctType = 5;
pub const AcpiPcctType_ACPI_PCCT_TYPE_RESERVED: AcpiPcctType = 6;
pub type AcpiPcctType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_subspace {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: [UINT8; 6usize],
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_subspace"][::core::mem::size_of::<acpi_pcct_subspace>() - 62usize];
    ["Alignment of acpi_pcct_subspace"][::core::mem::align_of::<acpi_pcct_subspace>() - 1usize];
    ["Offset of field: acpi_pcct_subspace::Header"]
        [::core::mem::offset_of!(acpi_pcct_subspace, Header) - 0usize];
    ["Offset of field: acpi_pcct_subspace::Reserved"]
        [::core::mem::offset_of!(acpi_pcct_subspace, Reserved) - 2usize];
    ["Offset of field: acpi_pcct_subspace::BaseAddress"]
        [::core::mem::offset_of!(acpi_pcct_subspace, BaseAddress) - 8usize];
    ["Offset of field: acpi_pcct_subspace::Length"]
        [::core::mem::offset_of!(acpi_pcct_subspace, Length) - 16usize];
    ["Offset of field: acpi_pcct_subspace::DoorbellRegister"]
        [::core::mem::offset_of!(acpi_pcct_subspace, DoorbellRegister) - 24usize];
    ["Offset of field: acpi_pcct_subspace::PreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_subspace, PreserveMask) - 36usize];
    ["Offset of field: acpi_pcct_subspace::WriteMask"]
        [::core::mem::offset_of!(acpi_pcct_subspace, WriteMask) - 44usize];
    ["Offset of field: acpi_pcct_subspace::Latency"]
        [::core::mem::offset_of!(acpi_pcct_subspace, Latency) - 52usize];
    ["Offset of field: acpi_pcct_subspace::MaxAccessRate"]
        [::core::mem::offset_of!(acpi_pcct_subspace, MaxAccessRate) - 56usize];
    ["Offset of field: acpi_pcct_subspace::MinTurnaroundTime"]
        [::core::mem::offset_of!(acpi_pcct_subspace, MinTurnaroundTime) - 60usize];
};
pub type ACPI_PCCT_SUBSPACE = acpi_pcct_subspace;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_hw_reduced {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_hw_reduced"][::core::mem::size_of::<acpi_pcct_hw_reduced>() - 62usize];
    ["Alignment of acpi_pcct_hw_reduced"][::core::mem::align_of::<acpi_pcct_hw_reduced>() - 1usize];
    ["Offset of field: acpi_pcct_hw_reduced::Header"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, Header) - 0usize];
    ["Offset of field: acpi_pcct_hw_reduced::PlatformInterrupt"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, PlatformInterrupt) - 2usize];
    ["Offset of field: acpi_pcct_hw_reduced::Flags"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, Flags) - 6usize];
    ["Offset of field: acpi_pcct_hw_reduced::Reserved"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, Reserved) - 7usize];
    ["Offset of field: acpi_pcct_hw_reduced::BaseAddress"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, BaseAddress) - 8usize];
    ["Offset of field: acpi_pcct_hw_reduced::Length"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, Length) - 16usize];
    ["Offset of field: acpi_pcct_hw_reduced::DoorbellRegister"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, DoorbellRegister) - 24usize];
    ["Offset of field: acpi_pcct_hw_reduced::PreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, PreserveMask) - 36usize];
    ["Offset of field: acpi_pcct_hw_reduced::WriteMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, WriteMask) - 44usize];
    ["Offset of field: acpi_pcct_hw_reduced::Latency"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, Latency) - 52usize];
    ["Offset of field: acpi_pcct_hw_reduced::MaxAccessRate"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, MaxAccessRate) - 56usize];
    ["Offset of field: acpi_pcct_hw_reduced::MinTurnaroundTime"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced, MinTurnaroundTime) - 60usize];
};
pub type ACPI_PCCT_HW_REDUCED = acpi_pcct_hw_reduced;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_hw_reduced_type2 {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT16,
    pub PlatformAckRegister: ACPI_GENERIC_ADDRESS,
    pub AckPreserveMask: UINT64,
    pub AckWriteMask: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_hw_reduced_type2"]
        [::core::mem::size_of::<acpi_pcct_hw_reduced_type2>() - 90usize];
    ["Alignment of acpi_pcct_hw_reduced_type2"]
        [::core::mem::align_of::<acpi_pcct_hw_reduced_type2>() - 1usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::Header"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, Header) - 0usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::PlatformInterrupt"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, PlatformInterrupt) - 2usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::Flags"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, Flags) - 6usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::Reserved"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, Reserved) - 7usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::BaseAddress"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, BaseAddress) - 8usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::Length"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, Length) - 16usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::DoorbellRegister"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, DoorbellRegister) - 24usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::PreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, PreserveMask) - 36usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::WriteMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, WriteMask) - 44usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::Latency"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, Latency) - 52usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::MaxAccessRate"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, MaxAccessRate) - 56usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::MinTurnaroundTime"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, MinTurnaroundTime) - 60usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::PlatformAckRegister"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, PlatformAckRegister) - 62usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::AckPreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, AckPreserveMask) - 74usize];
    ["Offset of field: acpi_pcct_hw_reduced_type2::AckWriteMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reduced_type2, AckWriteMask) - 82usize];
};
pub type ACPI_PCCT_HW_REDUCED_TYPE2 = acpi_pcct_hw_reduced_type2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_ext_pcc_master {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved1: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT32,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT32,
    pub PlatformAckRegister: ACPI_GENERIC_ADDRESS,
    pub AckPreserveMask: UINT64,
    pub AckSetMask: UINT64,
    pub Reserved2: UINT64,
    pub CmdCompleteRegister: ACPI_GENERIC_ADDRESS,
    pub CmdCompleteMask: UINT64,
    pub CmdUpdateRegister: ACPI_GENERIC_ADDRESS,
    pub CmdUpdatePreserveMask: UINT64,
    pub CmdUpdateSetMask: UINT64,
    pub ErrorStatusRegister: ACPI_GENERIC_ADDRESS,
    pub ErrorStatusMask: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_ext_pcc_master"]
        [::core::mem::size_of::<acpi_pcct_ext_pcc_master>() - 164usize];
    ["Alignment of acpi_pcct_ext_pcc_master"]
        [::core::mem::align_of::<acpi_pcct_ext_pcc_master>() - 1usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::Header"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, Header) - 0usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::PlatformInterrupt"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, PlatformInterrupt) - 2usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::Flags"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, Flags) - 6usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::Reserved1"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, Reserved1) - 7usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::BaseAddress"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, BaseAddress) - 8usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::Length"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, Length) - 16usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::DoorbellRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, DoorbellRegister) - 20usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::PreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, PreserveMask) - 32usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::WriteMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, WriteMask) - 40usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::Latency"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, Latency) - 48usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::MaxAccessRate"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, MaxAccessRate) - 52usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::MinTurnaroundTime"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, MinTurnaroundTime) - 56usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::PlatformAckRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, PlatformAckRegister) - 60usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::AckPreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, AckPreserveMask) - 72usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::AckSetMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, AckSetMask) - 80usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::Reserved2"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, Reserved2) - 88usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::CmdCompleteRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, CmdCompleteRegister) - 96usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::CmdCompleteMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, CmdCompleteMask) - 108usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::CmdUpdateRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, CmdUpdateRegister) - 116usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::CmdUpdatePreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, CmdUpdatePreserveMask) - 128usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::CmdUpdateSetMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, CmdUpdateSetMask) - 136usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::ErrorStatusRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, ErrorStatusRegister) - 144usize];
    ["Offset of field: acpi_pcct_ext_pcc_master::ErrorStatusMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_master, ErrorStatusMask) - 156usize];
};
pub type ACPI_PCCT_EXT_PCC_MASTER = acpi_pcct_ext_pcc_master;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_ext_pcc_slave {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved1: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT32,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT32,
    pub PlatformAckRegister: ACPI_GENERIC_ADDRESS,
    pub AckPreserveMask: UINT64,
    pub AckSetMask: UINT64,
    pub Reserved2: UINT64,
    pub CmdCompleteRegister: ACPI_GENERIC_ADDRESS,
    pub CmdCompleteMask: UINT64,
    pub CmdUpdateRegister: ACPI_GENERIC_ADDRESS,
    pub CmdUpdatePreserveMask: UINT64,
    pub CmdUpdateSetMask: UINT64,
    pub ErrorStatusRegister: ACPI_GENERIC_ADDRESS,
    pub ErrorStatusMask: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_ext_pcc_slave"]
        [::core::mem::size_of::<acpi_pcct_ext_pcc_slave>() - 164usize];
    ["Alignment of acpi_pcct_ext_pcc_slave"]
        [::core::mem::align_of::<acpi_pcct_ext_pcc_slave>() - 1usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::Header"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, Header) - 0usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::PlatformInterrupt"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, PlatformInterrupt) - 2usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::Flags"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, Flags) - 6usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::Reserved1"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, Reserved1) - 7usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::BaseAddress"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, BaseAddress) - 8usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::Length"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, Length) - 16usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::DoorbellRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, DoorbellRegister) - 20usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::PreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, PreserveMask) - 32usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::WriteMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, WriteMask) - 40usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::Latency"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, Latency) - 48usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::MaxAccessRate"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, MaxAccessRate) - 52usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::MinTurnaroundTime"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, MinTurnaroundTime) - 56usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::PlatformAckRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, PlatformAckRegister) - 60usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::AckPreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, AckPreserveMask) - 72usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::AckSetMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, AckSetMask) - 80usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::Reserved2"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, Reserved2) - 88usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::CmdCompleteRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, CmdCompleteRegister) - 96usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::CmdCompleteMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, CmdCompleteMask) - 108usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::CmdUpdateRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, CmdUpdateRegister) - 116usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::CmdUpdatePreserveMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, CmdUpdatePreserveMask) - 128usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::CmdUpdateSetMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, CmdUpdateSetMask) - 136usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::ErrorStatusRegister"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, ErrorStatusRegister) - 144usize];
    ["Offset of field: acpi_pcct_ext_pcc_slave::ErrorStatusMask"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_slave, ErrorStatusMask) - 156usize];
};
pub type ACPI_PCCT_EXT_PCC_SLAVE = acpi_pcct_ext_pcc_slave;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_hw_reg {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Version: UINT16,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub DoorbellPreserve: UINT64,
    pub DoorbellWrite: UINT64,
    pub CmdCompleteRegister: ACPI_GENERIC_ADDRESS,
    pub CmdCompleteMask: UINT64,
    pub ErrorStatusRegister: ACPI_GENERIC_ADDRESS,
    pub ErrorStatusMask: UINT64,
    pub NominalLatency: UINT32,
    pub MinTurnaroundTime: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_hw_reg"][::core::mem::size_of::<acpi_pcct_hw_reg>() - 96usize];
    ["Alignment of acpi_pcct_hw_reg"][::core::mem::align_of::<acpi_pcct_hw_reg>() - 1usize];
    ["Offset of field: acpi_pcct_hw_reg::Header"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, Header) - 0usize];
    ["Offset of field: acpi_pcct_hw_reg::Version"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, Version) - 2usize];
    ["Offset of field: acpi_pcct_hw_reg::BaseAddress"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, BaseAddress) - 4usize];
    ["Offset of field: acpi_pcct_hw_reg::Length"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, Length) - 12usize];
    ["Offset of field: acpi_pcct_hw_reg::DoorbellRegister"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, DoorbellRegister) - 20usize];
    ["Offset of field: acpi_pcct_hw_reg::DoorbellPreserve"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, DoorbellPreserve) - 32usize];
    ["Offset of field: acpi_pcct_hw_reg::DoorbellWrite"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, DoorbellWrite) - 40usize];
    ["Offset of field: acpi_pcct_hw_reg::CmdCompleteRegister"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, CmdCompleteRegister) - 48usize];
    ["Offset of field: acpi_pcct_hw_reg::CmdCompleteMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, CmdCompleteMask) - 60usize];
    ["Offset of field: acpi_pcct_hw_reg::ErrorStatusRegister"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, ErrorStatusRegister) - 68usize];
    ["Offset of field: acpi_pcct_hw_reg::ErrorStatusMask"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, ErrorStatusMask) - 80usize];
    ["Offset of field: acpi_pcct_hw_reg::NominalLatency"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, NominalLatency) - 88usize];
    ["Offset of field: acpi_pcct_hw_reg::MinTurnaroundTime"]
        [::core::mem::offset_of!(acpi_pcct_hw_reg, MinTurnaroundTime) - 92usize];
};
pub type ACPI_PCCT_HW_REG = acpi_pcct_hw_reg;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_shared_memory {
    pub Signature: UINT32,
    pub Command: UINT16,
    pub Status: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_shared_memory"][::core::mem::size_of::<acpi_pcct_shared_memory>() - 8usize];
    ["Alignment of acpi_pcct_shared_memory"]
        [::core::mem::align_of::<acpi_pcct_shared_memory>() - 1usize];
    ["Offset of field: acpi_pcct_shared_memory::Signature"]
        [::core::mem::offset_of!(acpi_pcct_shared_memory, Signature) - 0usize];
    ["Offset of field: acpi_pcct_shared_memory::Command"]
        [::core::mem::offset_of!(acpi_pcct_shared_memory, Command) - 4usize];
    ["Offset of field: acpi_pcct_shared_memory::Status"]
        [::core::mem::offset_of!(acpi_pcct_shared_memory, Status) - 6usize];
};
pub type ACPI_PCCT_SHARED_MEMORY = acpi_pcct_shared_memory;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_ext_pcc_shared_memory {
    pub Signature: UINT32,
    pub Flags: UINT32,
    pub Length: UINT32,
    pub Command: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pcct_ext_pcc_shared_memory"]
        [::core::mem::size_of::<acpi_pcct_ext_pcc_shared_memory>() - 16usize];
    ["Alignment of acpi_pcct_ext_pcc_shared_memory"]
        [::core::mem::align_of::<acpi_pcct_ext_pcc_shared_memory>() - 1usize];
    ["Offset of field: acpi_pcct_ext_pcc_shared_memory::Signature"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_shared_memory, Signature) - 0usize];
    ["Offset of field: acpi_pcct_ext_pcc_shared_memory::Flags"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_shared_memory, Flags) - 4usize];
    ["Offset of field: acpi_pcct_ext_pcc_shared_memory::Length"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_shared_memory, Length) - 8usize];
    ["Offset of field: acpi_pcct_ext_pcc_shared_memory::Command"]
        [::core::mem::offset_of!(acpi_pcct_ext_pcc_shared_memory, Command) - 12usize];
};
pub type ACPI_PCCT_EXT_PCC_SHARED_MEMORY = acpi_pcct_ext_pcc_shared_memory;
#[doc = " PDTT - Platform Debug Trigger Table (ACPI 6.2)\n        Version 0\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pdtt {
    pub Header: ACPI_TABLE_HEADER,
    pub TriggerCount: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub ArrayOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_pdtt"][::core::mem::size_of::<acpi_table_pdtt>() - 44usize];
    ["Alignment of acpi_table_pdtt"][::core::mem::align_of::<acpi_table_pdtt>() - 1usize];
    ["Offset of field: acpi_table_pdtt::Header"]
        [::core::mem::offset_of!(acpi_table_pdtt, Header) - 0usize];
    ["Offset of field: acpi_table_pdtt::TriggerCount"]
        [::core::mem::offset_of!(acpi_table_pdtt, TriggerCount) - 36usize];
    ["Offset of field: acpi_table_pdtt::Reserved"]
        [::core::mem::offset_of!(acpi_table_pdtt, Reserved) - 37usize];
    ["Offset of field: acpi_table_pdtt::ArrayOffset"]
        [::core::mem::offset_of!(acpi_table_pdtt, ArrayOffset) - 40usize];
};
#[doc = " PDTT - Platform Debug Trigger Table (ACPI 6.2)\n        Version 0\n"]
pub type ACPI_TABLE_PDTT = acpi_table_pdtt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pdtt_channel {
    pub SubchannelId: UINT8,
    pub Flags: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pdtt_channel"][::core::mem::size_of::<acpi_pdtt_channel>() - 2usize];
    ["Alignment of acpi_pdtt_channel"][::core::mem::align_of::<acpi_pdtt_channel>() - 1usize];
    ["Offset of field: acpi_pdtt_channel::SubchannelId"]
        [::core::mem::offset_of!(acpi_pdtt_channel, SubchannelId) - 0usize];
    ["Offset of field: acpi_pdtt_channel::Flags"]
        [::core::mem::offset_of!(acpi_pdtt_channel, Flags) - 1usize];
};
pub type ACPI_PDTT_CHANNEL = acpi_pdtt_channel;
#[doc = " PHAT - Platform Health Assessment Table (ACPI 6.4)\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_phat {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_phat"][::core::mem::size_of::<acpi_table_phat>() - 36usize];
    ["Alignment of acpi_table_phat"][::core::mem::align_of::<acpi_table_phat>() - 1usize];
    ["Offset of field: acpi_table_phat::Header"]
        [::core::mem::offset_of!(acpi_table_phat, Header) - 0usize];
};
#[doc = " PHAT - Platform Health Assessment Table (ACPI 6.4)\n        Version 1\n"]
pub type ACPI_TABLE_PHAT = acpi_table_phat;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_phat_header {
    pub Type: UINT16,
    pub Length: UINT16,
    pub Revision: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_phat_header"][::core::mem::size_of::<acpi_phat_header>() - 5usize];
    ["Alignment of acpi_phat_header"][::core::mem::align_of::<acpi_phat_header>() - 1usize];
    ["Offset of field: acpi_phat_header::Type"]
        [::core::mem::offset_of!(acpi_phat_header, Type) - 0usize];
    ["Offset of field: acpi_phat_header::Length"]
        [::core::mem::offset_of!(acpi_phat_header, Length) - 2usize];
    ["Offset of field: acpi_phat_header::Revision"]
        [::core::mem::offset_of!(acpi_phat_header, Revision) - 4usize];
};
pub type ACPI_PHAT_HEADER = acpi_phat_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_phat_version_data {
    pub Header: ACPI_PHAT_HEADER,
    pub Reserved: [UINT8; 3usize],
    pub ElementCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_phat_version_data"][::core::mem::size_of::<acpi_phat_version_data>() - 12usize];
    ["Alignment of acpi_phat_version_data"]
        [::core::mem::align_of::<acpi_phat_version_data>() - 1usize];
    ["Offset of field: acpi_phat_version_data::Header"]
        [::core::mem::offset_of!(acpi_phat_version_data, Header) - 0usize];
    ["Offset of field: acpi_phat_version_data::Reserved"]
        [::core::mem::offset_of!(acpi_phat_version_data, Reserved) - 5usize];
    ["Offset of field: acpi_phat_version_data::ElementCount"]
        [::core::mem::offset_of!(acpi_phat_version_data, ElementCount) - 8usize];
};
pub type ACPI_PHAT_VERSION_DATA = acpi_phat_version_data;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_phat_version_element {
    pub Guid: [UINT8; 16usize],
    pub VersionValue: UINT64,
    pub ProducerId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_phat_version_element"]
        [::core::mem::size_of::<acpi_phat_version_element>() - 28usize];
    ["Alignment of acpi_phat_version_element"]
        [::core::mem::align_of::<acpi_phat_version_element>() - 1usize];
    ["Offset of field: acpi_phat_version_element::Guid"]
        [::core::mem::offset_of!(acpi_phat_version_element, Guid) - 0usize];
    ["Offset of field: acpi_phat_version_element::VersionValue"]
        [::core::mem::offset_of!(acpi_phat_version_element, VersionValue) - 16usize];
    ["Offset of field: acpi_phat_version_element::ProducerId"]
        [::core::mem::offset_of!(acpi_phat_version_element, ProducerId) - 24usize];
};
pub type ACPI_PHAT_VERSION_ELEMENT = acpi_phat_version_element;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_phat_health_data {
    pub Header: ACPI_PHAT_HEADER,
    pub Reserved: [UINT8; 2usize],
    pub Health: UINT8,
    pub DeviceGuid: [UINT8; 16usize],
    pub DeviceSpecificOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_phat_health_data"][::core::mem::size_of::<acpi_phat_health_data>() - 28usize];
    ["Alignment of acpi_phat_health_data"]
        [::core::mem::align_of::<acpi_phat_health_data>() - 1usize];
    ["Offset of field: acpi_phat_health_data::Header"]
        [::core::mem::offset_of!(acpi_phat_health_data, Header) - 0usize];
    ["Offset of field: acpi_phat_health_data::Reserved"]
        [::core::mem::offset_of!(acpi_phat_health_data, Reserved) - 5usize];
    ["Offset of field: acpi_phat_health_data::Health"]
        [::core::mem::offset_of!(acpi_phat_health_data, Health) - 7usize];
    ["Offset of field: acpi_phat_health_data::DeviceGuid"]
        [::core::mem::offset_of!(acpi_phat_health_data, DeviceGuid) - 8usize];
    ["Offset of field: acpi_phat_health_data::DeviceSpecificOffset"]
        [::core::mem::offset_of!(acpi_phat_health_data, DeviceSpecificOffset) - 24usize];
};
pub type ACPI_PHAT_HEALTH_DATA = acpi_phat_health_data;
#[doc = " PMTT - Platform Memory Topology Table (ACPI 5.0)\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pmtt {
    pub Header: ACPI_TABLE_HEADER,
    pub MemoryDeviceCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_pmtt"][::core::mem::size_of::<acpi_table_pmtt>() - 40usize];
    ["Alignment of acpi_table_pmtt"][::core::mem::align_of::<acpi_table_pmtt>() - 1usize];
    ["Offset of field: acpi_table_pmtt::Header"]
        [::core::mem::offset_of!(acpi_table_pmtt, Header) - 0usize];
    ["Offset of field: acpi_table_pmtt::MemoryDeviceCount"]
        [::core::mem::offset_of!(acpi_table_pmtt, MemoryDeviceCount) - 36usize];
};
#[doc = " PMTT - Platform Memory Topology Table (ACPI 5.0)\n        Version 1\n"]
pub type ACPI_TABLE_PMTT = acpi_table_pmtt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_header {
    pub Type: UINT8,
    pub Reserved1: UINT8,
    pub Length: UINT16,
    pub Flags: UINT16,
    pub Reserved2: UINT16,
    pub MemoryDeviceCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pmtt_header"][::core::mem::size_of::<acpi_pmtt_header>() - 12usize];
    ["Alignment of acpi_pmtt_header"][::core::mem::align_of::<acpi_pmtt_header>() - 1usize];
    ["Offset of field: acpi_pmtt_header::Type"]
        [::core::mem::offset_of!(acpi_pmtt_header, Type) - 0usize];
    ["Offset of field: acpi_pmtt_header::Reserved1"]
        [::core::mem::offset_of!(acpi_pmtt_header, Reserved1) - 1usize];
    ["Offset of field: acpi_pmtt_header::Length"]
        [::core::mem::offset_of!(acpi_pmtt_header, Length) - 2usize];
    ["Offset of field: acpi_pmtt_header::Flags"]
        [::core::mem::offset_of!(acpi_pmtt_header, Flags) - 4usize];
    ["Offset of field: acpi_pmtt_header::Reserved2"]
        [::core::mem::offset_of!(acpi_pmtt_header, Reserved2) - 6usize];
    ["Offset of field: acpi_pmtt_header::MemoryDeviceCount"]
        [::core::mem::offset_of!(acpi_pmtt_header, MemoryDeviceCount) - 8usize];
};
pub type ACPI_PMTT_HEADER = acpi_pmtt_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_socket {
    pub Header: ACPI_PMTT_HEADER,
    pub SocketId: UINT16,
    pub Reserved: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pmtt_socket"][::core::mem::size_of::<acpi_pmtt_socket>() - 16usize];
    ["Alignment of acpi_pmtt_socket"][::core::mem::align_of::<acpi_pmtt_socket>() - 1usize];
    ["Offset of field: acpi_pmtt_socket::Header"]
        [::core::mem::offset_of!(acpi_pmtt_socket, Header) - 0usize];
    ["Offset of field: acpi_pmtt_socket::SocketId"]
        [::core::mem::offset_of!(acpi_pmtt_socket, SocketId) - 12usize];
    ["Offset of field: acpi_pmtt_socket::Reserved"]
        [::core::mem::offset_of!(acpi_pmtt_socket, Reserved) - 14usize];
};
pub type ACPI_PMTT_SOCKET = acpi_pmtt_socket;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_controller {
    pub Header: ACPI_PMTT_HEADER,
    pub ControllerId: UINT16,
    pub Reserved: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pmtt_controller"][::core::mem::size_of::<acpi_pmtt_controller>() - 16usize];
    ["Alignment of acpi_pmtt_controller"][::core::mem::align_of::<acpi_pmtt_controller>() - 1usize];
    ["Offset of field: acpi_pmtt_controller::Header"]
        [::core::mem::offset_of!(acpi_pmtt_controller, Header) - 0usize];
    ["Offset of field: acpi_pmtt_controller::ControllerId"]
        [::core::mem::offset_of!(acpi_pmtt_controller, ControllerId) - 12usize];
    ["Offset of field: acpi_pmtt_controller::Reserved"]
        [::core::mem::offset_of!(acpi_pmtt_controller, Reserved) - 14usize];
};
pub type ACPI_PMTT_CONTROLLER = acpi_pmtt_controller;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_physical_component {
    pub Header: ACPI_PMTT_HEADER,
    pub BiosHandle: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pmtt_physical_component"]
        [::core::mem::size_of::<acpi_pmtt_physical_component>() - 16usize];
    ["Alignment of acpi_pmtt_physical_component"]
        [::core::mem::align_of::<acpi_pmtt_physical_component>() - 1usize];
    ["Offset of field: acpi_pmtt_physical_component::Header"]
        [::core::mem::offset_of!(acpi_pmtt_physical_component, Header) - 0usize];
    ["Offset of field: acpi_pmtt_physical_component::BiosHandle"]
        [::core::mem::offset_of!(acpi_pmtt_physical_component, BiosHandle) - 12usize];
};
pub type ACPI_PMTT_PHYSICAL_COMPONENT = acpi_pmtt_physical_component;
#[repr(C)]
#[derive(Debug)]
pub struct acpi_pmtt_vendor_specific {
    pub Header: ACPI_PMTT_HEADER,
    pub TypeUuid: [UINT8; 16usize],
    pub Specific: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pmtt_vendor_specific"]
        [::core::mem::size_of::<acpi_pmtt_vendor_specific>() - 28usize];
    ["Alignment of acpi_pmtt_vendor_specific"]
        [::core::mem::align_of::<acpi_pmtt_vendor_specific>() - 1usize];
    ["Offset of field: acpi_pmtt_vendor_specific::Header"]
        [::core::mem::offset_of!(acpi_pmtt_vendor_specific, Header) - 0usize];
    ["Offset of field: acpi_pmtt_vendor_specific::TypeUuid"]
        [::core::mem::offset_of!(acpi_pmtt_vendor_specific, TypeUuid) - 12usize];
    ["Offset of field: acpi_pmtt_vendor_specific::Specific"]
        [::core::mem::offset_of!(acpi_pmtt_vendor_specific, Specific) - 28usize];
};
pub type ACPI_PMTT_VENDOR_SPECIFIC = acpi_pmtt_vendor_specific;
#[doc = " PPTT - Processor Properties Topology Table (ACPI 6.2)\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pptt {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_pptt"][::core::mem::size_of::<acpi_table_pptt>() - 36usize];
    ["Alignment of acpi_table_pptt"][::core::mem::align_of::<acpi_table_pptt>() - 1usize];
    ["Offset of field: acpi_table_pptt::Header"]
        [::core::mem::offset_of!(acpi_table_pptt, Header) - 0usize];
};
#[doc = " PPTT - Processor Properties Topology Table (ACPI 6.2)\n        Version 1\n"]
pub type ACPI_TABLE_PPTT = acpi_table_pptt;
pub const AcpiPpttType_ACPI_PPTT_TYPE_PROCESSOR: AcpiPpttType = 0;
pub const AcpiPpttType_ACPI_PPTT_TYPE_CACHE: AcpiPpttType = 1;
pub const AcpiPpttType_ACPI_PPTT_TYPE_ID: AcpiPpttType = 2;
pub const AcpiPpttType_ACPI_PPTT_TYPE_RESERVED: AcpiPpttType = 3;
pub type AcpiPpttType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_processor {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub Flags: UINT32,
    pub Parent: UINT32,
    pub AcpiProcessorId: UINT32,
    pub NumberOfPrivResources: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pptt_processor"][::core::mem::size_of::<acpi_pptt_processor>() - 20usize];
    ["Alignment of acpi_pptt_processor"][::core::mem::align_of::<acpi_pptt_processor>() - 1usize];
    ["Offset of field: acpi_pptt_processor::Header"]
        [::core::mem::offset_of!(acpi_pptt_processor, Header) - 0usize];
    ["Offset of field: acpi_pptt_processor::Reserved"]
        [::core::mem::offset_of!(acpi_pptt_processor, Reserved) - 2usize];
    ["Offset of field: acpi_pptt_processor::Flags"]
        [::core::mem::offset_of!(acpi_pptt_processor, Flags) - 4usize];
    ["Offset of field: acpi_pptt_processor::Parent"]
        [::core::mem::offset_of!(acpi_pptt_processor, Parent) - 8usize];
    ["Offset of field: acpi_pptt_processor::AcpiProcessorId"]
        [::core::mem::offset_of!(acpi_pptt_processor, AcpiProcessorId) - 12usize];
    ["Offset of field: acpi_pptt_processor::NumberOfPrivResources"]
        [::core::mem::offset_of!(acpi_pptt_processor, NumberOfPrivResources) - 16usize];
};
pub type ACPI_PPTT_PROCESSOR = acpi_pptt_processor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_cache {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub Flags: UINT32,
    pub NextLevelOfCache: UINT32,
    pub Size: UINT32,
    pub NumberOfSets: UINT32,
    pub Associativity: UINT8,
    pub Attributes: UINT8,
    pub LineSize: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pptt_cache"][::core::mem::size_of::<acpi_pptt_cache>() - 24usize];
    ["Alignment of acpi_pptt_cache"][::core::mem::align_of::<acpi_pptt_cache>() - 1usize];
    ["Offset of field: acpi_pptt_cache::Header"]
        [::core::mem::offset_of!(acpi_pptt_cache, Header) - 0usize];
    ["Offset of field: acpi_pptt_cache::Reserved"]
        [::core::mem::offset_of!(acpi_pptt_cache, Reserved) - 2usize];
    ["Offset of field: acpi_pptt_cache::Flags"]
        [::core::mem::offset_of!(acpi_pptt_cache, Flags) - 4usize];
    ["Offset of field: acpi_pptt_cache::NextLevelOfCache"]
        [::core::mem::offset_of!(acpi_pptt_cache, NextLevelOfCache) - 8usize];
    ["Offset of field: acpi_pptt_cache::Size"]
        [::core::mem::offset_of!(acpi_pptt_cache, Size) - 12usize];
    ["Offset of field: acpi_pptt_cache::NumberOfSets"]
        [::core::mem::offset_of!(acpi_pptt_cache, NumberOfSets) - 16usize];
    ["Offset of field: acpi_pptt_cache::Associativity"]
        [::core::mem::offset_of!(acpi_pptt_cache, Associativity) - 20usize];
    ["Offset of field: acpi_pptt_cache::Attributes"]
        [::core::mem::offset_of!(acpi_pptt_cache, Attributes) - 21usize];
    ["Offset of field: acpi_pptt_cache::LineSize"]
        [::core::mem::offset_of!(acpi_pptt_cache, LineSize) - 22usize];
};
pub type ACPI_PPTT_CACHE = acpi_pptt_cache;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_cache_v1 {
    pub CacheId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pptt_cache_v1"][::core::mem::size_of::<acpi_pptt_cache_v1>() - 4usize];
    ["Alignment of acpi_pptt_cache_v1"][::core::mem::align_of::<acpi_pptt_cache_v1>() - 1usize];
    ["Offset of field: acpi_pptt_cache_v1::CacheId"]
        [::core::mem::offset_of!(acpi_pptt_cache_v1, CacheId) - 0usize];
};
pub type ACPI_PPTT_CACHE_V1 = acpi_pptt_cache_v1;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_id {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub VendorId: UINT32,
    pub Level1Id: UINT64,
    pub Level2Id: UINT64,
    pub MajorRev: UINT16,
    pub MinorRev: UINT16,
    pub SpinRev: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pptt_id"][::core::mem::size_of::<acpi_pptt_id>() - 30usize];
    ["Alignment of acpi_pptt_id"][::core::mem::align_of::<acpi_pptt_id>() - 1usize];
    ["Offset of field: acpi_pptt_id::Header"]
        [::core::mem::offset_of!(acpi_pptt_id, Header) - 0usize];
    ["Offset of field: acpi_pptt_id::Reserved"]
        [::core::mem::offset_of!(acpi_pptt_id, Reserved) - 2usize];
    ["Offset of field: acpi_pptt_id::VendorId"]
        [::core::mem::offset_of!(acpi_pptt_id, VendorId) - 4usize];
    ["Offset of field: acpi_pptt_id::Level1Id"]
        [::core::mem::offset_of!(acpi_pptt_id, Level1Id) - 8usize];
    ["Offset of field: acpi_pptt_id::Level2Id"]
        [::core::mem::offset_of!(acpi_pptt_id, Level2Id) - 16usize];
    ["Offset of field: acpi_pptt_id::MajorRev"]
        [::core::mem::offset_of!(acpi_pptt_id, MajorRev) - 24usize];
    ["Offset of field: acpi_pptt_id::MinorRev"]
        [::core::mem::offset_of!(acpi_pptt_id, MinorRev) - 26usize];
    ["Offset of field: acpi_pptt_id::SpinRev"]
        [::core::mem::offset_of!(acpi_pptt_id, SpinRev) - 28usize];
};
pub type ACPI_PPTT_ID = acpi_pptt_id;
#[doc = " PRMT - Platform Runtime Mechanism Table\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_prmt {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_prmt"][::core::mem::size_of::<acpi_table_prmt>() - 36usize];
    ["Alignment of acpi_table_prmt"][::core::mem::align_of::<acpi_table_prmt>() - 1usize];
    ["Offset of field: acpi_table_prmt::Header"]
        [::core::mem::offset_of!(acpi_table_prmt, Header) - 0usize];
};
#[doc = " PRMT - Platform Runtime Mechanism Table\n        Version 1\n"]
pub type ACPI_TABLE_PRMT = acpi_table_prmt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_prmt_header {
    pub PlatformGuid: [UINT8; 16usize],
    pub ModuleInfoOffset: UINT32,
    pub ModuleInfoCount: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_prmt_header"][::core::mem::size_of::<acpi_table_prmt_header>() - 24usize];
    ["Alignment of acpi_table_prmt_header"]
        [::core::mem::align_of::<acpi_table_prmt_header>() - 1usize];
    ["Offset of field: acpi_table_prmt_header::PlatformGuid"]
        [::core::mem::offset_of!(acpi_table_prmt_header, PlatformGuid) - 0usize];
    ["Offset of field: acpi_table_prmt_header::ModuleInfoOffset"]
        [::core::mem::offset_of!(acpi_table_prmt_header, ModuleInfoOffset) - 16usize];
    ["Offset of field: acpi_table_prmt_header::ModuleInfoCount"]
        [::core::mem::offset_of!(acpi_table_prmt_header, ModuleInfoCount) - 20usize];
};
pub type ACPI_TABLE_PRMT_HEADER = acpi_table_prmt_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_prmt_module_header {
    pub Revision: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_prmt_module_header"][::core::mem::size_of::<acpi_prmt_module_header>() - 4usize];
    ["Alignment of acpi_prmt_module_header"]
        [::core::mem::align_of::<acpi_prmt_module_header>() - 1usize];
    ["Offset of field: acpi_prmt_module_header::Revision"]
        [::core::mem::offset_of!(acpi_prmt_module_header, Revision) - 0usize];
    ["Offset of field: acpi_prmt_module_header::Length"]
        [::core::mem::offset_of!(acpi_prmt_module_header, Length) - 2usize];
};
pub type ACPI_PRMT_MODULE_HEADER = acpi_prmt_module_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_prmt_module_info {
    pub Revision: UINT16,
    pub Length: UINT16,
    pub ModuleGuid: [UINT8; 16usize],
    pub MajorRev: UINT16,
    pub MinorRev: UINT16,
    pub HandlerInfoCount: UINT16,
    pub HandlerInfoOffset: UINT32,
    pub MmioListPointer: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_prmt_module_info"][::core::mem::size_of::<acpi_prmt_module_info>() - 38usize];
    ["Alignment of acpi_prmt_module_info"]
        [::core::mem::align_of::<acpi_prmt_module_info>() - 1usize];
    ["Offset of field: acpi_prmt_module_info::Revision"]
        [::core::mem::offset_of!(acpi_prmt_module_info, Revision) - 0usize];
    ["Offset of field: acpi_prmt_module_info::Length"]
        [::core::mem::offset_of!(acpi_prmt_module_info, Length) - 2usize];
    ["Offset of field: acpi_prmt_module_info::ModuleGuid"]
        [::core::mem::offset_of!(acpi_prmt_module_info, ModuleGuid) - 4usize];
    ["Offset of field: acpi_prmt_module_info::MajorRev"]
        [::core::mem::offset_of!(acpi_prmt_module_info, MajorRev) - 20usize];
    ["Offset of field: acpi_prmt_module_info::MinorRev"]
        [::core::mem::offset_of!(acpi_prmt_module_info, MinorRev) - 22usize];
    ["Offset of field: acpi_prmt_module_info::HandlerInfoCount"]
        [::core::mem::offset_of!(acpi_prmt_module_info, HandlerInfoCount) - 24usize];
    ["Offset of field: acpi_prmt_module_info::HandlerInfoOffset"]
        [::core::mem::offset_of!(acpi_prmt_module_info, HandlerInfoOffset) - 26usize];
    ["Offset of field: acpi_prmt_module_info::MmioListPointer"]
        [::core::mem::offset_of!(acpi_prmt_module_info, MmioListPointer) - 30usize];
};
pub type ACPI_PRMT_MODULE_INFO = acpi_prmt_module_info;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_prmt_handler_info {
    pub Revision: UINT16,
    pub Length: UINT16,
    pub HandlerGuid: [UINT8; 16usize],
    pub HandlerAddress: UINT64,
    pub StaticDataBufferAddress: UINT64,
    pub AcpiParamBufferAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_prmt_handler_info"][::core::mem::size_of::<acpi_prmt_handler_info>() - 44usize];
    ["Alignment of acpi_prmt_handler_info"]
        [::core::mem::align_of::<acpi_prmt_handler_info>() - 1usize];
    ["Offset of field: acpi_prmt_handler_info::Revision"]
        [::core::mem::offset_of!(acpi_prmt_handler_info, Revision) - 0usize];
    ["Offset of field: acpi_prmt_handler_info::Length"]
        [::core::mem::offset_of!(acpi_prmt_handler_info, Length) - 2usize];
    ["Offset of field: acpi_prmt_handler_info::HandlerGuid"]
        [::core::mem::offset_of!(acpi_prmt_handler_info, HandlerGuid) - 4usize];
    ["Offset of field: acpi_prmt_handler_info::HandlerAddress"]
        [::core::mem::offset_of!(acpi_prmt_handler_info, HandlerAddress) - 20usize];
    ["Offset of field: acpi_prmt_handler_info::StaticDataBufferAddress"]
        [::core::mem::offset_of!(acpi_prmt_handler_info, StaticDataBufferAddress) - 28usize];
    ["Offset of field: acpi_prmt_handler_info::AcpiParamBufferAddress"]
        [::core::mem::offset_of!(acpi_prmt_handler_info, AcpiParamBufferAddress) - 36usize];
};
pub type ACPI_PRMT_HANDLER_INFO = acpi_prmt_handler_info;
#[doc = " RASF - RAS Feature Table (ACPI 5.0)\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rasf {
    pub Header: ACPI_TABLE_HEADER,
    pub ChannelId: [UINT8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_rasf"][::core::mem::size_of::<acpi_table_rasf>() - 48usize];
    ["Alignment of acpi_table_rasf"][::core::mem::align_of::<acpi_table_rasf>() - 1usize];
    ["Offset of field: acpi_table_rasf::Header"]
        [::core::mem::offset_of!(acpi_table_rasf, Header) - 0usize];
    ["Offset of field: acpi_table_rasf::ChannelId"]
        [::core::mem::offset_of!(acpi_table_rasf, ChannelId) - 36usize];
};
#[doc = " RASF - RAS Feature Table (ACPI 5.0)\n        Version 1\n"]
pub type ACPI_TABLE_RASF = acpi_table_rasf;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rasf_shared_memory {
    pub Signature: UINT32,
    pub Command: UINT16,
    pub Status: UINT16,
    pub Version: UINT16,
    pub Capabilities: [UINT8; 16usize],
    pub SetCapabilities: [UINT8; 16usize],
    pub NumParameterBlocks: UINT16,
    pub SetCapabilitiesStatus: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rasf_shared_memory"]
        [::core::mem::size_of::<acpi_rasf_shared_memory>() - 48usize];
    ["Alignment of acpi_rasf_shared_memory"]
        [::core::mem::align_of::<acpi_rasf_shared_memory>() - 1usize];
    ["Offset of field: acpi_rasf_shared_memory::Signature"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, Signature) - 0usize];
    ["Offset of field: acpi_rasf_shared_memory::Command"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, Command) - 4usize];
    ["Offset of field: acpi_rasf_shared_memory::Status"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, Status) - 6usize];
    ["Offset of field: acpi_rasf_shared_memory::Version"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, Version) - 8usize];
    ["Offset of field: acpi_rasf_shared_memory::Capabilities"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, Capabilities) - 10usize];
    ["Offset of field: acpi_rasf_shared_memory::SetCapabilities"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, SetCapabilities) - 26usize];
    ["Offset of field: acpi_rasf_shared_memory::NumParameterBlocks"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, NumParameterBlocks) - 42usize];
    ["Offset of field: acpi_rasf_shared_memory::SetCapabilitiesStatus"]
        [::core::mem::offset_of!(acpi_rasf_shared_memory, SetCapabilitiesStatus) - 44usize];
};
pub type ACPI_RASF_SHARED_MEMORY = acpi_rasf_shared_memory;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rasf_parameter_block {
    pub Type: UINT16,
    pub Version: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rasf_parameter_block"]
        [::core::mem::size_of::<acpi_rasf_parameter_block>() - 6usize];
    ["Alignment of acpi_rasf_parameter_block"]
        [::core::mem::align_of::<acpi_rasf_parameter_block>() - 1usize];
    ["Offset of field: acpi_rasf_parameter_block::Type"]
        [::core::mem::offset_of!(acpi_rasf_parameter_block, Type) - 0usize];
    ["Offset of field: acpi_rasf_parameter_block::Version"]
        [::core::mem::offset_of!(acpi_rasf_parameter_block, Version) - 2usize];
    ["Offset of field: acpi_rasf_parameter_block::Length"]
        [::core::mem::offset_of!(acpi_rasf_parameter_block, Length) - 4usize];
};
pub type ACPI_RASF_PARAMETER_BLOCK = acpi_rasf_parameter_block;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rasf_patrol_scrub_parameter {
    pub Header: ACPI_RASF_PARAMETER_BLOCK,
    pub PatrolScrubCommand: UINT16,
    pub RequestedAddressRange: [UINT64; 2usize],
    pub ActualAddressRange: [UINT64; 2usize],
    pub Flags: UINT16,
    pub RequestedSpeed: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rasf_patrol_scrub_parameter"]
        [::core::mem::size_of::<acpi_rasf_patrol_scrub_parameter>() - 43usize];
    ["Alignment of acpi_rasf_patrol_scrub_parameter"]
        [::core::mem::align_of::<acpi_rasf_patrol_scrub_parameter>() - 1usize];
    ["Offset of field: acpi_rasf_patrol_scrub_parameter::Header"]
        [::core::mem::offset_of!(acpi_rasf_patrol_scrub_parameter, Header) - 0usize];
    ["Offset of field: acpi_rasf_patrol_scrub_parameter::PatrolScrubCommand"]
        [::core::mem::offset_of!(acpi_rasf_patrol_scrub_parameter, PatrolScrubCommand) - 6usize];
    ["Offset of field: acpi_rasf_patrol_scrub_parameter::RequestedAddressRange"]
        [::core::mem::offset_of!(acpi_rasf_patrol_scrub_parameter, RequestedAddressRange) - 8usize];
    ["Offset of field: acpi_rasf_patrol_scrub_parameter::ActualAddressRange"]
        [::core::mem::offset_of!(acpi_rasf_patrol_scrub_parameter, ActualAddressRange) - 24usize];
    ["Offset of field: acpi_rasf_patrol_scrub_parameter::Flags"]
        [::core::mem::offset_of!(acpi_rasf_patrol_scrub_parameter, Flags) - 40usize];
    ["Offset of field: acpi_rasf_patrol_scrub_parameter::RequestedSpeed"]
        [::core::mem::offset_of!(acpi_rasf_patrol_scrub_parameter, RequestedSpeed) - 42usize];
};
pub type ACPI_RASF_PATROL_SCRUB_PARAMETER = acpi_rasf_patrol_scrub_parameter;
pub const AcpiRasfCommands_ACPI_RASF_EXECUTE_RASF_COMMAND: AcpiRasfCommands = 1;
pub type AcpiRasfCommands = ::core::ffi::c_uint;
pub const AcpiRasfCapabiliities_ACPI_HW_PATROL_SCRUB_SUPPORTED: AcpiRasfCapabiliities = 0;
pub const AcpiRasfCapabiliities_ACPI_SW_PATROL_SCRUB_EXPOSED: AcpiRasfCapabiliities = 1;
pub type AcpiRasfCapabiliities = ::core::ffi::c_uint;
pub const AcpiRasfPatrolScrubCommands_ACPI_RASF_GET_PATROL_PARAMETERS: AcpiRasfPatrolScrubCommands =
    1;
pub const AcpiRasfPatrolScrubCommands_ACPI_RASF_START_PATROL_SCRUBBER: AcpiRasfPatrolScrubCommands =
    2;
pub const AcpiRasfPatrolScrubCommands_ACPI_RASF_STOP_PATROL_SCRUBBER: AcpiRasfPatrolScrubCommands =
    3;
pub type AcpiRasfPatrolScrubCommands = ::core::ffi::c_uint;
pub const AcpiRasfStatus_ACPI_RASF_SUCCESS: AcpiRasfStatus = 0;
pub const AcpiRasfStatus_ACPI_RASF_NOT_VALID: AcpiRasfStatus = 1;
pub const AcpiRasfStatus_ACPI_RASF_NOT_SUPPORTED: AcpiRasfStatus = 2;
pub const AcpiRasfStatus_ACPI_RASF_BUSY: AcpiRasfStatus = 3;
pub const AcpiRasfStatus_ACPI_RASF_FAILED: AcpiRasfStatus = 4;
pub const AcpiRasfStatus_ACPI_RASF_ABORTED: AcpiRasfStatus = 5;
pub const AcpiRasfStatus_ACPI_RASF_INVALID_DATA: AcpiRasfStatus = 6;
pub type AcpiRasfStatus = ::core::ffi::c_uint;
#[doc = " RAS2 - RAS2 Feature Table (ACPI 6.5)\n        Version 1\n\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ras2 {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT16,
    pub NumPccDescs: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_ras2"][::core::mem::size_of::<acpi_table_ras2>() - 40usize];
    ["Alignment of acpi_table_ras2"][::core::mem::align_of::<acpi_table_ras2>() - 1usize];
    ["Offset of field: acpi_table_ras2::Header"]
        [::core::mem::offset_of!(acpi_table_ras2, Header) - 0usize];
    ["Offset of field: acpi_table_ras2::Reserved"]
        [::core::mem::offset_of!(acpi_table_ras2, Reserved) - 36usize];
    ["Offset of field: acpi_table_ras2::NumPccDescs"]
        [::core::mem::offset_of!(acpi_table_ras2, NumPccDescs) - 38usize];
};
#[doc = " RAS2 - RAS2 Feature Table (ACPI 6.5)\n        Version 1\n\n"]
pub type ACPI_TABLE_RAS2 = acpi_table_ras2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ras2_pcc_desc {
    pub ChannelId: UINT8,
    pub Reserved: UINT16,
    pub FeatureType: UINT8,
    pub Instance: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ras2_pcc_desc"][::core::mem::size_of::<acpi_ras2_pcc_desc>() - 8usize];
    ["Alignment of acpi_ras2_pcc_desc"][::core::mem::align_of::<acpi_ras2_pcc_desc>() - 1usize];
    ["Offset of field: acpi_ras2_pcc_desc::ChannelId"]
        [::core::mem::offset_of!(acpi_ras2_pcc_desc, ChannelId) - 0usize];
    ["Offset of field: acpi_ras2_pcc_desc::Reserved"]
        [::core::mem::offset_of!(acpi_ras2_pcc_desc, Reserved) - 1usize];
    ["Offset of field: acpi_ras2_pcc_desc::FeatureType"]
        [::core::mem::offset_of!(acpi_ras2_pcc_desc, FeatureType) - 3usize];
    ["Offset of field: acpi_ras2_pcc_desc::Instance"]
        [::core::mem::offset_of!(acpi_ras2_pcc_desc, Instance) - 4usize];
};
pub type ACPI_RAS2_PCC_DESC = acpi_ras2_pcc_desc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ras2_shmem {
    pub Signature: UINT32,
    pub Command: UINT16,
    pub Status: UINT16,
    pub Version: UINT16,
    pub Features: [UINT8; 16usize],
    pub SetCaps: [UINT8; 16usize],
    pub NumParamBlks: UINT16,
    pub SetCapsStatus: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ras2_shmem"][::core::mem::size_of::<acpi_ras2_shmem>() - 48usize];
    ["Alignment of acpi_ras2_shmem"][::core::mem::align_of::<acpi_ras2_shmem>() - 1usize];
    ["Offset of field: acpi_ras2_shmem::Signature"]
        [::core::mem::offset_of!(acpi_ras2_shmem, Signature) - 0usize];
    ["Offset of field: acpi_ras2_shmem::Command"]
        [::core::mem::offset_of!(acpi_ras2_shmem, Command) - 4usize];
    ["Offset of field: acpi_ras2_shmem::Status"]
        [::core::mem::offset_of!(acpi_ras2_shmem, Status) - 6usize];
    ["Offset of field: acpi_ras2_shmem::Version"]
        [::core::mem::offset_of!(acpi_ras2_shmem, Version) - 8usize];
    ["Offset of field: acpi_ras2_shmem::Features"]
        [::core::mem::offset_of!(acpi_ras2_shmem, Features) - 10usize];
    ["Offset of field: acpi_ras2_shmem::SetCaps"]
        [::core::mem::offset_of!(acpi_ras2_shmem, SetCaps) - 26usize];
    ["Offset of field: acpi_ras2_shmem::NumParamBlks"]
        [::core::mem::offset_of!(acpi_ras2_shmem, NumParamBlks) - 42usize];
    ["Offset of field: acpi_ras2_shmem::SetCapsStatus"]
        [::core::mem::offset_of!(acpi_ras2_shmem, SetCapsStatus) - 44usize];
};
pub type ACPI_RAS2_SHMEM = acpi_ras2_shmem;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ras2_parameter_block {
    pub Type: UINT16,
    pub Version: UINT16,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ras2_parameter_block"]
        [::core::mem::size_of::<acpi_ras2_parameter_block>() - 6usize];
    ["Alignment of acpi_ras2_parameter_block"]
        [::core::mem::align_of::<acpi_ras2_parameter_block>() - 1usize];
    ["Offset of field: acpi_ras2_parameter_block::Type"]
        [::core::mem::offset_of!(acpi_ras2_parameter_block, Type) - 0usize];
    ["Offset of field: acpi_ras2_parameter_block::Version"]
        [::core::mem::offset_of!(acpi_ras2_parameter_block, Version) - 2usize];
    ["Offset of field: acpi_ras2_parameter_block::Length"]
        [::core::mem::offset_of!(acpi_ras2_parameter_block, Length) - 4usize];
};
pub type ACPI_RAS2_PARAMETER_BLOCK = acpi_ras2_parameter_block;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ras2_patrol_scrub_param {
    pub Header: ACPI_RAS2_PARAMETER_BLOCK,
    pub Command: UINT16,
    pub ReqAddrRange: [UINT64; 2usize],
    pub ActlAddrRange: [UINT64; 2usize],
    pub Flags: UINT32,
    pub ScrubParamsOut: UINT32,
    pub ScrubParamsIn: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ras2_patrol_scrub_param"]
        [::core::mem::size_of::<acpi_ras2_patrol_scrub_param>() - 52usize];
    ["Alignment of acpi_ras2_patrol_scrub_param"]
        [::core::mem::align_of::<acpi_ras2_patrol_scrub_param>() - 1usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::Header"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, Header) - 0usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::Command"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, Command) - 6usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::ReqAddrRange"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, ReqAddrRange) - 8usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::ActlAddrRange"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, ActlAddrRange) - 24usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::Flags"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, Flags) - 40usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::ScrubParamsOut"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, ScrubParamsOut) - 44usize];
    ["Offset of field: acpi_ras2_patrol_scrub_param::ScrubParamsIn"]
        [::core::mem::offset_of!(acpi_ras2_patrol_scrub_param, ScrubParamsIn) - 48usize];
};
pub type ACPI_RAS2_PATROL_SCRUB_PARAM = acpi_ras2_patrol_scrub_param;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ras2_la2pa_translation_parameter {
    pub Header: ACPI_RAS2_PARAMETER_BLOCK,
    pub AddrTranslationCommand: UINT16,
    pub SubInstId: UINT64,
    pub LogicalAddress: UINT64,
    pub PhysicalAddress: UINT64,
    pub Status: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_ras2_la2pa_translation_parameter"]
        [::core::mem::size_of::<acpi_ras2_la2pa_translation_parameter>() - 36usize];
    ["Alignment of acpi_ras2_la2pa_translation_parameter"]
        [::core::mem::align_of::<acpi_ras2_la2pa_translation_parameter>() - 1usize];
    ["Offset of field: acpi_ras2_la2pa_translation_parameter::Header"]
        [::core::mem::offset_of!(acpi_ras2_la2pa_translation_parameter, Header) - 0usize];
    ["Offset of field: acpi_ras2_la2pa_translation_parameter::AddrTranslationCommand"][::core::mem::offset_of!(
        acpi_ras2_la2pa_translation_parameter,
        AddrTranslationCommand
    ) - 6usize];
    ["Offset of field: acpi_ras2_la2pa_translation_parameter::SubInstId"]
        [::core::mem::offset_of!(acpi_ras2_la2pa_translation_parameter, SubInstId) - 8usize];
    ["Offset of field: acpi_ras2_la2pa_translation_parameter::LogicalAddress"]
        [::core::mem::offset_of!(acpi_ras2_la2pa_translation_parameter, LogicalAddress) - 16usize];
    ["Offset of field: acpi_ras2_la2pa_translation_parameter::PhysicalAddress"]
        [::core::mem::offset_of!(acpi_ras2_la2pa_translation_parameter, PhysicalAddress) - 24usize];
    ["Offset of field: acpi_ras2_la2pa_translation_parameter::Status"]
        [::core::mem::offset_of!(acpi_ras2_la2pa_translation_parameter, Status) - 32usize];
};
pub type ACPI_RAS2_LA2PA_TRANSLATION_PARAM = acpi_ras2_la2pa_translation_parameter;
pub const AcpiRas2Commands_ACPI_RAS2_EXECUTE_RAS2_COMMAND: AcpiRas2Commands = 1;
pub type AcpiRas2Commands = ::core::ffi::c_uint;
pub const AcpiRas2Features_ACPI_RAS2_PATROL_SCRUB_SUPPORTED: AcpiRas2Features = 0;
pub const AcpiRas2Features_ACPI_RAS2_LA2PA_TRANSLATION: AcpiRas2Features = 1;
pub type AcpiRas2Features = ::core::ffi::c_uint;
pub const AcpiRas2PatrolScrubCommands_ACPI_RAS2_GET_PATROL_PARAMETERS: AcpiRas2PatrolScrubCommands =
    1;
pub const AcpiRas2PatrolScrubCommands_ACPI_RAS2_START_PATROL_SCRUBBER: AcpiRas2PatrolScrubCommands =
    2;
pub const AcpiRas2PatrolScrubCommands_ACPI_RAS2_STOP_PATROL_SCRUBBER: AcpiRas2PatrolScrubCommands =
    3;
pub type AcpiRas2PatrolScrubCommands = ::core::ffi::c_uint;
pub const AcpiRas2La2PaTranslationCommands_ACPI_RAS2_GET_LA2PA_TRANSLATION:
    AcpiRas2La2PaTranslationCommands = 1;
pub type AcpiRas2La2PaTranslationCommands = ::core::ffi::c_uint;
pub const AcpiRas2La2PaTranslationStatus_ACPI_RAS2_LA2PA_TRANSLATION_SUCCESS:
    AcpiRas2La2PaTranslationStatus = 0;
pub const AcpiRas2La2PaTranslationStatus_ACPI_RAS2_LA2PA_TRANSLATION_FAIL:
    AcpiRas2La2PaTranslationStatus = 1;
pub type AcpiRas2La2PaTranslationStatus = ::core::ffi::c_uint;
pub const AcpiRas2Status_ACPI_RAS2_SUCCESS: AcpiRas2Status = 0;
pub const AcpiRas2Status_ACPI_RAS2_NOT_VALID: AcpiRas2Status = 1;
pub const AcpiRas2Status_ACPI_RAS2_NOT_SUPPORTED: AcpiRas2Status = 2;
pub const AcpiRas2Status_ACPI_RAS2_BUSY: AcpiRas2Status = 3;
pub const AcpiRas2Status_ACPI_RAS2_FAILED: AcpiRas2Status = 4;
pub const AcpiRas2Status_ACPI_RAS2_ABORTED: AcpiRas2Status = 5;
pub const AcpiRas2Status_ACPI_RAS2_INVALID_DATA: AcpiRas2Status = 6;
pub type AcpiRas2Status = ::core::ffi::c_uint;
#[doc = " RGRT - Regulatory Graphics Resource Table\n        Version 1\n\n Conforms to \"ACPI RGRT\" available at:\n https://microsoft.github.io/mu/dyn/mu_plus/MsCorePkg/AcpiRGRT/feature_acpi_rgrt/\n"]
#[repr(C, packed)]
pub struct acpi_table_rgrt {
    pub Header: ACPI_TABLE_HEADER,
    pub Version: UINT16,
    pub ImageType: UINT8,
    pub Reserved: UINT8,
    pub Image: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_rgrt"][::core::mem::size_of::<acpi_table_rgrt>() - 40usize];
    ["Alignment of acpi_table_rgrt"][::core::mem::align_of::<acpi_table_rgrt>() - 1usize];
    ["Offset of field: acpi_table_rgrt::Header"]
        [::core::mem::offset_of!(acpi_table_rgrt, Header) - 0usize];
    ["Offset of field: acpi_table_rgrt::Version"]
        [::core::mem::offset_of!(acpi_table_rgrt, Version) - 36usize];
    ["Offset of field: acpi_table_rgrt::ImageType"]
        [::core::mem::offset_of!(acpi_table_rgrt, ImageType) - 38usize];
    ["Offset of field: acpi_table_rgrt::Reserved"]
        [::core::mem::offset_of!(acpi_table_rgrt, Reserved) - 39usize];
    ["Offset of field: acpi_table_rgrt::Image"]
        [::core::mem::offset_of!(acpi_table_rgrt, Image) - 40usize];
};
#[doc = " RGRT - Regulatory Graphics Resource Table\n        Version 1\n\n Conforms to \"ACPI RGRT\" available at:\n https://microsoft.github.io/mu/dyn/mu_plus/MsCorePkg/AcpiRGRT/feature_acpi_rgrt/\n"]
pub type ACPI_TABLE_RGRT = acpi_table_rgrt;
pub const AcpiRgrtImageType_ACPI_RGRT_TYPE_RESERVED0: AcpiRgrtImageType = 0;
pub const AcpiRgrtImageType_ACPI_RGRT_IMAGE_TYPE_PNG: AcpiRgrtImageType = 1;
pub const AcpiRgrtImageType_ACPI_RGRT_TYPE_RESERVED: AcpiRgrtImageType = 2;
pub type AcpiRgrtImageType = ::core::ffi::c_uint;
#[doc = " RHCT - RISC-V Hart Capabilities Table\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rhct {
    pub Header: ACPI_TABLE_HEADER,
    pub Flags: UINT32,
    pub TimeBaseFreq: UINT64,
    pub NodeCount: UINT32,
    pub NodeOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_rhct"][::core::mem::size_of::<acpi_table_rhct>() - 56usize];
    ["Alignment of acpi_table_rhct"][::core::mem::align_of::<acpi_table_rhct>() - 1usize];
    ["Offset of field: acpi_table_rhct::Header"]
        [::core::mem::offset_of!(acpi_table_rhct, Header) - 0usize];
    ["Offset of field: acpi_table_rhct::Flags"]
        [::core::mem::offset_of!(acpi_table_rhct, Flags) - 36usize];
    ["Offset of field: acpi_table_rhct::TimeBaseFreq"]
        [::core::mem::offset_of!(acpi_table_rhct, TimeBaseFreq) - 40usize];
    ["Offset of field: acpi_table_rhct::NodeCount"]
        [::core::mem::offset_of!(acpi_table_rhct, NodeCount) - 48usize];
    ["Offset of field: acpi_table_rhct::NodeOffset"]
        [::core::mem::offset_of!(acpi_table_rhct, NodeOffset) - 52usize];
};
#[doc = " RHCT - RISC-V Hart Capabilities Table\n        Version 1\n"]
pub type ACPI_TABLE_RHCT = acpi_table_rhct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rhct_node_header {
    pub Type: UINT16,
    pub Length: UINT16,
    pub Revision: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rhct_node_header"][::core::mem::size_of::<acpi_rhct_node_header>() - 6usize];
    ["Alignment of acpi_rhct_node_header"]
        [::core::mem::align_of::<acpi_rhct_node_header>() - 1usize];
    ["Offset of field: acpi_rhct_node_header::Type"]
        [::core::mem::offset_of!(acpi_rhct_node_header, Type) - 0usize];
    ["Offset of field: acpi_rhct_node_header::Length"]
        [::core::mem::offset_of!(acpi_rhct_node_header, Length) - 2usize];
    ["Offset of field: acpi_rhct_node_header::Revision"]
        [::core::mem::offset_of!(acpi_rhct_node_header, Revision) - 4usize];
};
pub type ACPI_RHCT_NODE_HEADER = acpi_rhct_node_header;
pub const acpi_rhct_node_type_ACPI_RHCT_NODE_TYPE_ISA_STRING: acpi_rhct_node_type = 0;
pub const acpi_rhct_node_type_ACPI_RHCT_NODE_TYPE_CMO: acpi_rhct_node_type = 1;
pub const acpi_rhct_node_type_ACPI_RHCT_NODE_TYPE_MMU: acpi_rhct_node_type = 2;
pub const acpi_rhct_node_type_ACPI_RHCT_NODE_TYPE_RESERVED: acpi_rhct_node_type = 3;
pub const acpi_rhct_node_type_ACPI_RHCT_NODE_TYPE_HART_INFO: acpi_rhct_node_type = 65535;
pub type acpi_rhct_node_type = ::core::ffi::c_uint;
#[repr(C, packed)]
pub struct acpi_rhct_isa_string {
    pub IsaLength: UINT16,
    pub Isa: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rhct_isa_string"][::core::mem::size_of::<acpi_rhct_isa_string>() - 2usize];
    ["Alignment of acpi_rhct_isa_string"][::core::mem::align_of::<acpi_rhct_isa_string>() - 1usize];
    ["Offset of field: acpi_rhct_isa_string::IsaLength"]
        [::core::mem::offset_of!(acpi_rhct_isa_string, IsaLength) - 0usize];
    ["Offset of field: acpi_rhct_isa_string::Isa"]
        [::core::mem::offset_of!(acpi_rhct_isa_string, Isa) - 2usize];
};
pub type ACPI_RHCT_ISA_STRING = acpi_rhct_isa_string;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rhct_cmo_node {
    pub Reserved: UINT8,
    pub CbomSize: UINT8,
    pub CbopSize: UINT8,
    pub CbozSize: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rhct_cmo_node"][::core::mem::size_of::<acpi_rhct_cmo_node>() - 4usize];
    ["Alignment of acpi_rhct_cmo_node"][::core::mem::align_of::<acpi_rhct_cmo_node>() - 1usize];
    ["Offset of field: acpi_rhct_cmo_node::Reserved"]
        [::core::mem::offset_of!(acpi_rhct_cmo_node, Reserved) - 0usize];
    ["Offset of field: acpi_rhct_cmo_node::CbomSize"]
        [::core::mem::offset_of!(acpi_rhct_cmo_node, CbomSize) - 1usize];
    ["Offset of field: acpi_rhct_cmo_node::CbopSize"]
        [::core::mem::offset_of!(acpi_rhct_cmo_node, CbopSize) - 2usize];
    ["Offset of field: acpi_rhct_cmo_node::CbozSize"]
        [::core::mem::offset_of!(acpi_rhct_cmo_node, CbozSize) - 3usize];
};
pub type ACPI_RHCT_CMO_NODE = acpi_rhct_cmo_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rhct_mmu_node {
    pub Reserved: UINT8,
    pub MmuType: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rhct_mmu_node"][::core::mem::size_of::<acpi_rhct_mmu_node>() - 2usize];
    ["Alignment of acpi_rhct_mmu_node"][::core::mem::align_of::<acpi_rhct_mmu_node>() - 1usize];
    ["Offset of field: acpi_rhct_mmu_node::Reserved"]
        [::core::mem::offset_of!(acpi_rhct_mmu_node, Reserved) - 0usize];
    ["Offset of field: acpi_rhct_mmu_node::MmuType"]
        [::core::mem::offset_of!(acpi_rhct_mmu_node, MmuType) - 1usize];
};
pub type ACPI_RHCT_MMU_NODE = acpi_rhct_mmu_node;
pub const acpi_rhct_mmu_type_ACPI_RHCT_MMU_TYPE_SV39: acpi_rhct_mmu_type = 0;
pub const acpi_rhct_mmu_type_ACPI_RHCT_MMU_TYPE_SV48: acpi_rhct_mmu_type = 1;
pub const acpi_rhct_mmu_type_ACPI_RHCT_MMU_TYPE_SV57: acpi_rhct_mmu_type = 2;
pub type acpi_rhct_mmu_type = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rhct_hart_info {
    pub NumOffsets: UINT16,
    pub Uid: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rhct_hart_info"][::core::mem::size_of::<acpi_rhct_hart_info>() - 6usize];
    ["Alignment of acpi_rhct_hart_info"][::core::mem::align_of::<acpi_rhct_hart_info>() - 1usize];
    ["Offset of field: acpi_rhct_hart_info::NumOffsets"]
        [::core::mem::offset_of!(acpi_rhct_hart_info, NumOffsets) - 0usize];
    ["Offset of field: acpi_rhct_hart_info::Uid"]
        [::core::mem::offset_of!(acpi_rhct_hart_info, Uid) - 2usize];
};
pub type ACPI_RHCT_HART_INFO = acpi_rhct_hart_info;
#[doc = " RIMT - RISC-V IO Remapping Table\n\n https://github.com/riscv-non-isa/riscv-acpi-rimt\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rimt {
    pub Header: ACPI_TABLE_HEADER,
    pub NumNodes: UINT32,
    pub NodeOffset: UINT32,
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_rimt"][::core::mem::size_of::<acpi_table_rimt>() - 48usize];
    ["Alignment of acpi_table_rimt"][::core::mem::align_of::<acpi_table_rimt>() - 1usize];
    ["Offset of field: acpi_table_rimt::Header"]
        [::core::mem::offset_of!(acpi_table_rimt, Header) - 0usize];
    ["Offset of field: acpi_table_rimt::NumNodes"]
        [::core::mem::offset_of!(acpi_table_rimt, NumNodes) - 36usize];
    ["Offset of field: acpi_table_rimt::NodeOffset"]
        [::core::mem::offset_of!(acpi_table_rimt, NodeOffset) - 40usize];
    ["Offset of field: acpi_table_rimt::Reserved"]
        [::core::mem::offset_of!(acpi_table_rimt, Reserved) - 44usize];
};
#[doc = " RIMT - RISC-V IO Remapping Table\n\n https://github.com/riscv-non-isa/riscv-acpi-rimt\n"]
pub type ACPI_TABLE_RIMT = acpi_table_rimt;
#[repr(C, packed)]
pub struct acpi_rimt_node {
    pub Type: UINT8,
    pub Revision: UINT8,
    pub Length: UINT16,
    pub Reserved: UINT16,
    pub Id: UINT16,
    pub NodeData: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rimt_node"][::core::mem::size_of::<acpi_rimt_node>() - 8usize];
    ["Alignment of acpi_rimt_node"][::core::mem::align_of::<acpi_rimt_node>() - 1usize];
    ["Offset of field: acpi_rimt_node::Type"]
        [::core::mem::offset_of!(acpi_rimt_node, Type) - 0usize];
    ["Offset of field: acpi_rimt_node::Revision"]
        [::core::mem::offset_of!(acpi_rimt_node, Revision) - 1usize];
    ["Offset of field: acpi_rimt_node::Length"]
        [::core::mem::offset_of!(acpi_rimt_node, Length) - 2usize];
    ["Offset of field: acpi_rimt_node::Reserved"]
        [::core::mem::offset_of!(acpi_rimt_node, Reserved) - 4usize];
    ["Offset of field: acpi_rimt_node::Id"][::core::mem::offset_of!(acpi_rimt_node, Id) - 6usize];
    ["Offset of field: acpi_rimt_node::NodeData"]
        [::core::mem::offset_of!(acpi_rimt_node, NodeData) - 8usize];
};
pub type ACPI_RIMT_NODE = acpi_rimt_node;
pub const acpi_rimt_node_type_ACPI_RIMT_NODE_TYPE_IOMMU: acpi_rimt_node_type = 0;
pub const acpi_rimt_node_type_ACPI_RIMT_NODE_TYPE_PCIE_ROOT_COMPLEX: acpi_rimt_node_type = 1;
pub const acpi_rimt_node_type_ACPI_RIMT_NODE_TYPE_PLAT_DEVICE: acpi_rimt_node_type = 2;
pub type acpi_rimt_node_type = ::core::ffi::c_uint;
#[repr(C, packed)]
pub struct acpi_rimt_iommu {
    pub HardwareId: [UINT8; 8usize],
    pub BaseAddress: UINT64,
    pub Flags: UINT32,
    pub ProximityDomain: UINT32,
    pub PcieSegmentNumber: UINT16,
    pub PcieBdf: UINT16,
    pub NumInterruptWires: UINT16,
    pub InterruptWireOffset: UINT16,
    pub InterruptWire: __IncompleteArrayField<UINT64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rimt_iommu"][::core::mem::size_of::<acpi_rimt_iommu>() - 32usize];
    ["Alignment of acpi_rimt_iommu"][::core::mem::align_of::<acpi_rimt_iommu>() - 1usize];
    ["Offset of field: acpi_rimt_iommu::HardwareId"]
        [::core::mem::offset_of!(acpi_rimt_iommu, HardwareId) - 0usize];
    ["Offset of field: acpi_rimt_iommu::BaseAddress"]
        [::core::mem::offset_of!(acpi_rimt_iommu, BaseAddress) - 8usize];
    ["Offset of field: acpi_rimt_iommu::Flags"]
        [::core::mem::offset_of!(acpi_rimt_iommu, Flags) - 16usize];
    ["Offset of field: acpi_rimt_iommu::ProximityDomain"]
        [::core::mem::offset_of!(acpi_rimt_iommu, ProximityDomain) - 20usize];
    ["Offset of field: acpi_rimt_iommu::PcieSegmentNumber"]
        [::core::mem::offset_of!(acpi_rimt_iommu, PcieSegmentNumber) - 24usize];
    ["Offset of field: acpi_rimt_iommu::PcieBdf"]
        [::core::mem::offset_of!(acpi_rimt_iommu, PcieBdf) - 26usize];
    ["Offset of field: acpi_rimt_iommu::NumInterruptWires"]
        [::core::mem::offset_of!(acpi_rimt_iommu, NumInterruptWires) - 28usize];
    ["Offset of field: acpi_rimt_iommu::InterruptWireOffset"]
        [::core::mem::offset_of!(acpi_rimt_iommu, InterruptWireOffset) - 30usize];
    ["Offset of field: acpi_rimt_iommu::InterruptWire"]
        [::core::mem::offset_of!(acpi_rimt_iommu, InterruptWire) - 32usize];
};
pub type ACPI_RIMT_IOMMU = acpi_rimt_iommu;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rimt_iommu_wire_gsi {
    pub IrqNum: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rimt_iommu_wire_gsi"]
        [::core::mem::size_of::<acpi_rimt_iommu_wire_gsi>() - 8usize];
    ["Alignment of acpi_rimt_iommu_wire_gsi"]
        [::core::mem::align_of::<acpi_rimt_iommu_wire_gsi>() - 1usize];
    ["Offset of field: acpi_rimt_iommu_wire_gsi::IrqNum"]
        [::core::mem::offset_of!(acpi_rimt_iommu_wire_gsi, IrqNum) - 0usize];
    ["Offset of field: acpi_rimt_iommu_wire_gsi::Flags"]
        [::core::mem::offset_of!(acpi_rimt_iommu_wire_gsi, Flags) - 4usize];
};
pub type ACPI_RIMT_IOMMU_WIRE_GSI = acpi_rimt_iommu_wire_gsi;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rimt_id_mapping {
    pub SourceIdBase: UINT32,
    pub NumIds: UINT32,
    pub DestIdBase: UINT32,
    pub DestOffset: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rimt_id_mapping"][::core::mem::size_of::<acpi_rimt_id_mapping>() - 20usize];
    ["Alignment of acpi_rimt_id_mapping"][::core::mem::align_of::<acpi_rimt_id_mapping>() - 1usize];
    ["Offset of field: acpi_rimt_id_mapping::SourceIdBase"]
        [::core::mem::offset_of!(acpi_rimt_id_mapping, SourceIdBase) - 0usize];
    ["Offset of field: acpi_rimt_id_mapping::NumIds"]
        [::core::mem::offset_of!(acpi_rimt_id_mapping, NumIds) - 4usize];
    ["Offset of field: acpi_rimt_id_mapping::DestIdBase"]
        [::core::mem::offset_of!(acpi_rimt_id_mapping, DestIdBase) - 8usize];
    ["Offset of field: acpi_rimt_id_mapping::DestOffset"]
        [::core::mem::offset_of!(acpi_rimt_id_mapping, DestOffset) - 12usize];
    ["Offset of field: acpi_rimt_id_mapping::Flags"]
        [::core::mem::offset_of!(acpi_rimt_id_mapping, Flags) - 16usize];
};
pub type ACPI_RIMT_ID_MAPPING = acpi_rimt_id_mapping;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rimt_pcie_rc {
    pub Flags: UINT32,
    pub Reserved: UINT16,
    pub PcieSegmentNumber: UINT16,
    pub IdMappingOffset: UINT16,
    pub NumIdMappings: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rimt_pcie_rc"][::core::mem::size_of::<acpi_rimt_pcie_rc>() - 12usize];
    ["Alignment of acpi_rimt_pcie_rc"][::core::mem::align_of::<acpi_rimt_pcie_rc>() - 1usize];
    ["Offset of field: acpi_rimt_pcie_rc::Flags"]
        [::core::mem::offset_of!(acpi_rimt_pcie_rc, Flags) - 0usize];
    ["Offset of field: acpi_rimt_pcie_rc::Reserved"]
        [::core::mem::offset_of!(acpi_rimt_pcie_rc, Reserved) - 4usize];
    ["Offset of field: acpi_rimt_pcie_rc::PcieSegmentNumber"]
        [::core::mem::offset_of!(acpi_rimt_pcie_rc, PcieSegmentNumber) - 6usize];
    ["Offset of field: acpi_rimt_pcie_rc::IdMappingOffset"]
        [::core::mem::offset_of!(acpi_rimt_pcie_rc, IdMappingOffset) - 8usize];
    ["Offset of field: acpi_rimt_pcie_rc::NumIdMappings"]
        [::core::mem::offset_of!(acpi_rimt_pcie_rc, NumIdMappings) - 10usize];
};
pub type ACPI_RIMT_PCIE_RC = acpi_rimt_pcie_rc;
#[repr(C, packed)]
pub struct acpi_rimt_platform_device {
    pub IdMappingOffset: UINT16,
    pub NumIdMappings: UINT16,
    pub DeviceName: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_rimt_platform_device"]
        [::core::mem::size_of::<acpi_rimt_platform_device>() - 4usize];
    ["Alignment of acpi_rimt_platform_device"]
        [::core::mem::align_of::<acpi_rimt_platform_device>() - 1usize];
    ["Offset of field: acpi_rimt_platform_device::IdMappingOffset"]
        [::core::mem::offset_of!(acpi_rimt_platform_device, IdMappingOffset) - 0usize];
    ["Offset of field: acpi_rimt_platform_device::NumIdMappings"]
        [::core::mem::offset_of!(acpi_rimt_platform_device, NumIdMappings) - 2usize];
    ["Offset of field: acpi_rimt_platform_device::DeviceName"]
        [::core::mem::offset_of!(acpi_rimt_platform_device, DeviceName) - 4usize];
};
pub type ACPI_RIMT_PLATFORM_DEVICE = acpi_rimt_platform_device;
#[doc = " SBST - Smart Battery Specification Table\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_sbst {
    pub Header: ACPI_TABLE_HEADER,
    pub WarningLevel: UINT32,
    pub LowLevel: UINT32,
    pub CriticalLevel: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_sbst"][::core::mem::size_of::<acpi_table_sbst>() - 48usize];
    ["Alignment of acpi_table_sbst"][::core::mem::align_of::<acpi_table_sbst>() - 1usize];
    ["Offset of field: acpi_table_sbst::Header"]
        [::core::mem::offset_of!(acpi_table_sbst, Header) - 0usize];
    ["Offset of field: acpi_table_sbst::WarningLevel"]
        [::core::mem::offset_of!(acpi_table_sbst, WarningLevel) - 36usize];
    ["Offset of field: acpi_table_sbst::LowLevel"]
        [::core::mem::offset_of!(acpi_table_sbst, LowLevel) - 40usize];
    ["Offset of field: acpi_table_sbst::CriticalLevel"]
        [::core::mem::offset_of!(acpi_table_sbst, CriticalLevel) - 44usize];
};
#[doc = " SBST - Smart Battery Specification Table\n        Version 1\n"]
pub type ACPI_TABLE_SBST = acpi_table_sbst;
#[doc = " SDEI - Software Delegated Exception Interface Descriptor Table\n\n Conforms to \"Software Delegated Exception Interface (SDEI)\" ARM DEN0054A,\n May 8th, 2017. Copyright 2017 ARM Ltd.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_sdei {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_sdei"][::core::mem::size_of::<acpi_table_sdei>() - 36usize];
    ["Alignment of acpi_table_sdei"][::core::mem::align_of::<acpi_table_sdei>() - 1usize];
    ["Offset of field: acpi_table_sdei::Header"]
        [::core::mem::offset_of!(acpi_table_sdei, Header) - 0usize];
};
#[doc = " SDEI - Software Delegated Exception Interface Descriptor Table\n\n Conforms to \"Software Delegated Exception Interface (SDEI)\" ARM DEN0054A,\n May 8th, 2017. Copyright 2017 ARM Ltd.\n"]
pub type ACPI_TABLE_SDEI = acpi_table_sdei;
#[doc = " SDEV - Secure Devices Table (ACPI 6.2)\n        Version 1\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_sdev {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_sdev"][::core::mem::size_of::<acpi_table_sdev>() - 36usize];
    ["Alignment of acpi_table_sdev"][::core::mem::align_of::<acpi_table_sdev>() - 1usize];
    ["Offset of field: acpi_table_sdev::Header"]
        [::core::mem::offset_of!(acpi_table_sdev, Header) - 0usize];
};
#[doc = " SDEV - Secure Devices Table (ACPI 6.2)\n        Version 1\n"]
pub type ACPI_TABLE_SDEV = acpi_table_sdev;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_header {
    pub Type: UINT8,
    pub Flags: UINT8,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_header"][::core::mem::size_of::<acpi_sdev_header>() - 4usize];
    ["Alignment of acpi_sdev_header"][::core::mem::align_of::<acpi_sdev_header>() - 1usize];
    ["Offset of field: acpi_sdev_header::Type"]
        [::core::mem::offset_of!(acpi_sdev_header, Type) - 0usize];
    ["Offset of field: acpi_sdev_header::Flags"]
        [::core::mem::offset_of!(acpi_sdev_header, Flags) - 1usize];
    ["Offset of field: acpi_sdev_header::Length"]
        [::core::mem::offset_of!(acpi_sdev_header, Length) - 2usize];
};
pub type ACPI_SDEV_HEADER = acpi_sdev_header;
pub const AcpiSdevType_ACPI_SDEV_TYPE_NAMESPACE_DEVICE: AcpiSdevType = 0;
pub const AcpiSdevType_ACPI_SDEV_TYPE_PCIE_ENDPOINT_DEVICE: AcpiSdevType = 1;
pub const AcpiSdevType_ACPI_SDEV_TYPE_RESERVED: AcpiSdevType = 2;
pub type AcpiSdevType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_namespace {
    pub Header: ACPI_SDEV_HEADER,
    pub DeviceIdOffset: UINT16,
    pub DeviceIdLength: UINT16,
    pub VendorDataOffset: UINT16,
    pub VendorDataLength: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_namespace"][::core::mem::size_of::<acpi_sdev_namespace>() - 12usize];
    ["Alignment of acpi_sdev_namespace"][::core::mem::align_of::<acpi_sdev_namespace>() - 1usize];
    ["Offset of field: acpi_sdev_namespace::Header"]
        [::core::mem::offset_of!(acpi_sdev_namespace, Header) - 0usize];
    ["Offset of field: acpi_sdev_namespace::DeviceIdOffset"]
        [::core::mem::offset_of!(acpi_sdev_namespace, DeviceIdOffset) - 4usize];
    ["Offset of field: acpi_sdev_namespace::DeviceIdLength"]
        [::core::mem::offset_of!(acpi_sdev_namespace, DeviceIdLength) - 6usize];
    ["Offset of field: acpi_sdev_namespace::VendorDataOffset"]
        [::core::mem::offset_of!(acpi_sdev_namespace, VendorDataOffset) - 8usize];
    ["Offset of field: acpi_sdev_namespace::VendorDataLength"]
        [::core::mem::offset_of!(acpi_sdev_namespace, VendorDataLength) - 10usize];
};
pub type ACPI_SDEV_NAMESPACE = acpi_sdev_namespace;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_secure_component {
    pub SecureComponentOffset: UINT16,
    pub SecureComponentLength: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_secure_component"]
        [::core::mem::size_of::<acpi_sdev_secure_component>() - 4usize];
    ["Alignment of acpi_sdev_secure_component"]
        [::core::mem::align_of::<acpi_sdev_secure_component>() - 1usize];
    ["Offset of field: acpi_sdev_secure_component::SecureComponentOffset"]
        [::core::mem::offset_of!(acpi_sdev_secure_component, SecureComponentOffset) - 0usize];
    ["Offset of field: acpi_sdev_secure_component::SecureComponentLength"]
        [::core::mem::offset_of!(acpi_sdev_secure_component, SecureComponentLength) - 2usize];
};
pub type ACPI_SDEV_SECURE_COMPONENT = acpi_sdev_secure_component;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_component {
    pub Header: ACPI_SDEV_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_component"][::core::mem::size_of::<acpi_sdev_component>() - 4usize];
    ["Alignment of acpi_sdev_component"][::core::mem::align_of::<acpi_sdev_component>() - 1usize];
    ["Offset of field: acpi_sdev_component::Header"]
        [::core::mem::offset_of!(acpi_sdev_component, Header) - 0usize];
};
pub type ACPI_SDEV_COMPONENT = acpi_sdev_component;
pub const AcpiSacType_ACPI_SDEV_TYPE_ID_COMPONENT: AcpiSacType = 0;
pub const AcpiSacType_ACPI_SDEV_TYPE_MEM_COMPONENT: AcpiSacType = 1;
pub type AcpiSacType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_id_component {
    pub Header: ACPI_SDEV_HEADER,
    pub HardwareIdOffset: UINT16,
    pub HardwareIdLength: UINT16,
    pub SubsystemIdOffset: UINT16,
    pub SubsystemIdLength: UINT16,
    pub HardwareRevision: UINT16,
    pub HardwareRevPresent: UINT8,
    pub ClassCodePresent: UINT8,
    pub PciBaseClass: UINT8,
    pub PciSubClass: UINT8,
    pub PciProgrammingXface: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_id_component"][::core::mem::size_of::<acpi_sdev_id_component>() - 19usize];
    ["Alignment of acpi_sdev_id_component"]
        [::core::mem::align_of::<acpi_sdev_id_component>() - 1usize];
    ["Offset of field: acpi_sdev_id_component::Header"]
        [::core::mem::offset_of!(acpi_sdev_id_component, Header) - 0usize];
    ["Offset of field: acpi_sdev_id_component::HardwareIdOffset"]
        [::core::mem::offset_of!(acpi_sdev_id_component, HardwareIdOffset) - 4usize];
    ["Offset of field: acpi_sdev_id_component::HardwareIdLength"]
        [::core::mem::offset_of!(acpi_sdev_id_component, HardwareIdLength) - 6usize];
    ["Offset of field: acpi_sdev_id_component::SubsystemIdOffset"]
        [::core::mem::offset_of!(acpi_sdev_id_component, SubsystemIdOffset) - 8usize];
    ["Offset of field: acpi_sdev_id_component::SubsystemIdLength"]
        [::core::mem::offset_of!(acpi_sdev_id_component, SubsystemIdLength) - 10usize];
    ["Offset of field: acpi_sdev_id_component::HardwareRevision"]
        [::core::mem::offset_of!(acpi_sdev_id_component, HardwareRevision) - 12usize];
    ["Offset of field: acpi_sdev_id_component::HardwareRevPresent"]
        [::core::mem::offset_of!(acpi_sdev_id_component, HardwareRevPresent) - 14usize];
    ["Offset of field: acpi_sdev_id_component::ClassCodePresent"]
        [::core::mem::offset_of!(acpi_sdev_id_component, ClassCodePresent) - 15usize];
    ["Offset of field: acpi_sdev_id_component::PciBaseClass"]
        [::core::mem::offset_of!(acpi_sdev_id_component, PciBaseClass) - 16usize];
    ["Offset of field: acpi_sdev_id_component::PciSubClass"]
        [::core::mem::offset_of!(acpi_sdev_id_component, PciSubClass) - 17usize];
    ["Offset of field: acpi_sdev_id_component::PciProgrammingXface"]
        [::core::mem::offset_of!(acpi_sdev_id_component, PciProgrammingXface) - 18usize];
};
pub type ACPI_SDEV_ID_COMPONENT = acpi_sdev_id_component;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_mem_component {
    pub Header: ACPI_SDEV_HEADER,
    pub Reserved: UINT32,
    pub MemoryBaseAddress: UINT64,
    pub MemoryLength: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_mem_component"]
        [::core::mem::size_of::<acpi_sdev_mem_component>() - 24usize];
    ["Alignment of acpi_sdev_mem_component"]
        [::core::mem::align_of::<acpi_sdev_mem_component>() - 1usize];
    ["Offset of field: acpi_sdev_mem_component::Header"]
        [::core::mem::offset_of!(acpi_sdev_mem_component, Header) - 0usize];
    ["Offset of field: acpi_sdev_mem_component::Reserved"]
        [::core::mem::offset_of!(acpi_sdev_mem_component, Reserved) - 4usize];
    ["Offset of field: acpi_sdev_mem_component::MemoryBaseAddress"]
        [::core::mem::offset_of!(acpi_sdev_mem_component, MemoryBaseAddress) - 8usize];
    ["Offset of field: acpi_sdev_mem_component::MemoryLength"]
        [::core::mem::offset_of!(acpi_sdev_mem_component, MemoryLength) - 16usize];
};
pub type ACPI_SDEV_MEM_COMPONENT = acpi_sdev_mem_component;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_pcie {
    pub Header: ACPI_SDEV_HEADER,
    pub Segment: UINT16,
    pub StartBus: UINT16,
    pub PathOffset: UINT16,
    pub PathLength: UINT16,
    pub VendorDataOffset: UINT16,
    pub VendorDataLength: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_pcie"][::core::mem::size_of::<acpi_sdev_pcie>() - 16usize];
    ["Alignment of acpi_sdev_pcie"][::core::mem::align_of::<acpi_sdev_pcie>() - 1usize];
    ["Offset of field: acpi_sdev_pcie::Header"]
        [::core::mem::offset_of!(acpi_sdev_pcie, Header) - 0usize];
    ["Offset of field: acpi_sdev_pcie::Segment"]
        [::core::mem::offset_of!(acpi_sdev_pcie, Segment) - 4usize];
    ["Offset of field: acpi_sdev_pcie::StartBus"]
        [::core::mem::offset_of!(acpi_sdev_pcie, StartBus) - 6usize];
    ["Offset of field: acpi_sdev_pcie::PathOffset"]
        [::core::mem::offset_of!(acpi_sdev_pcie, PathOffset) - 8usize];
    ["Offset of field: acpi_sdev_pcie::PathLength"]
        [::core::mem::offset_of!(acpi_sdev_pcie, PathLength) - 10usize];
    ["Offset of field: acpi_sdev_pcie::VendorDataOffset"]
        [::core::mem::offset_of!(acpi_sdev_pcie, VendorDataOffset) - 12usize];
    ["Offset of field: acpi_sdev_pcie::VendorDataLength"]
        [::core::mem::offset_of!(acpi_sdev_pcie, VendorDataLength) - 14usize];
};
pub type ACPI_SDEV_PCIE = acpi_sdev_pcie;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_pcie_path {
    pub Device: UINT8,
    pub Function: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_sdev_pcie_path"][::core::mem::size_of::<acpi_sdev_pcie_path>() - 2usize];
    ["Alignment of acpi_sdev_pcie_path"][::core::mem::align_of::<acpi_sdev_pcie_path>() - 1usize];
    ["Offset of field: acpi_sdev_pcie_path::Device"]
        [::core::mem::offset_of!(acpi_sdev_pcie_path, Device) - 0usize];
    ["Offset of field: acpi_sdev_pcie_path::Function"]
        [::core::mem::offset_of!(acpi_sdev_pcie_path, Function) - 1usize];
};
pub type ACPI_SDEV_PCIE_PATH = acpi_sdev_pcie_path;
#[doc = " SVKL - Storage Volume Key Location Table (ACPI 6.4)\n        From: \"Guest-Host-Communication Interface (GHCI) for Intel\n        Trust Domain Extensions (Intel TDX)\".\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_svkl {
    pub Header: ACPI_TABLE_HEADER,
    pub Count: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_svkl"][::core::mem::size_of::<acpi_table_svkl>() - 40usize];
    ["Alignment of acpi_table_svkl"][::core::mem::align_of::<acpi_table_svkl>() - 1usize];
    ["Offset of field: acpi_table_svkl::Header"]
        [::core::mem::offset_of!(acpi_table_svkl, Header) - 0usize];
    ["Offset of field: acpi_table_svkl::Count"]
        [::core::mem::offset_of!(acpi_table_svkl, Count) - 36usize];
};
#[doc = " SVKL - Storage Volume Key Location Table (ACPI 6.4)\n        From: \"Guest-Host-Communication Interface (GHCI) for Intel\n        Trust Domain Extensions (Intel TDX)\".\n        Version 1\n"]
pub type ACPI_TABLE_SVKL = acpi_table_svkl;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_svkl_key {
    pub Type: UINT16,
    pub Format: UINT16,
    pub Size: UINT32,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_svkl_key"][::core::mem::size_of::<acpi_svkl_key>() - 16usize];
    ["Alignment of acpi_svkl_key"][::core::mem::align_of::<acpi_svkl_key>() - 1usize];
    ["Offset of field: acpi_svkl_key::Type"][::core::mem::offset_of!(acpi_svkl_key, Type) - 0usize];
    ["Offset of field: acpi_svkl_key::Format"]
        [::core::mem::offset_of!(acpi_svkl_key, Format) - 2usize];
    ["Offset of field: acpi_svkl_key::Size"][::core::mem::offset_of!(acpi_svkl_key, Size) - 4usize];
    ["Offset of field: acpi_svkl_key::Address"]
        [::core::mem::offset_of!(acpi_svkl_key, Address) - 8usize];
};
pub type ACPI_SVKL_KEY = acpi_svkl_key;
pub const acpi_svkl_type_ACPI_SVKL_TYPE_MAIN_STORAGE: acpi_svkl_type = 0;
pub const acpi_svkl_type_ACPI_SVKL_TYPE_RESERVED: acpi_svkl_type = 1;
pub type acpi_svkl_type = ::core::ffi::c_uint;
pub const acpi_svkl_format_ACPI_SVKL_FORMAT_RAW_BINARY: acpi_svkl_format = 0;
pub const acpi_svkl_format_ACPI_SVKL_FORMAT_RESERVED: acpi_svkl_format = 1;
pub type acpi_svkl_format = ::core::ffi::c_uint;
#[doc = " TDEL - TD-Event Log\n        From: \"Guest-Host-Communication Interface (GHCI) for Intel\n        Trust Domain Extensions (Intel TDX)\".\n        September 2020\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tdel {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
    pub LogAreaMinimumLength: UINT64,
    pub LogAreaStartAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_tdel"][::core::mem::size_of::<acpi_table_tdel>() - 56usize];
    ["Alignment of acpi_table_tdel"][::core::mem::align_of::<acpi_table_tdel>() - 1usize];
    ["Offset of field: acpi_table_tdel::Header"]
        [::core::mem::offset_of!(acpi_table_tdel, Header) - 0usize];
    ["Offset of field: acpi_table_tdel::Reserved"]
        [::core::mem::offset_of!(acpi_table_tdel, Reserved) - 36usize];
    ["Offset of field: acpi_table_tdel::LogAreaMinimumLength"]
        [::core::mem::offset_of!(acpi_table_tdel, LogAreaMinimumLength) - 40usize];
    ["Offset of field: acpi_table_tdel::LogAreaStartAddress"]
        [::core::mem::offset_of!(acpi_table_tdel, LogAreaStartAddress) - 48usize];
};
#[doc = " TDEL - TD-Event Log\n        From: \"Guest-Host-Communication Interface (GHCI) for Intel\n        Trust Domain Extensions (Intel TDX)\".\n        September 2020\n"]
pub type ACPI_TABLE_TDEL = acpi_table_tdel;
#[doc = " SLIC - Software Licensing Description Table\n\n Conforms to \"Microsoft Software Licensing Tables (SLIC and MSDM)\",\n November 29, 2011. Copyright 2011 Microsoft\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_slic {
    pub Header: ACPI_TABLE_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_slic"][::core::mem::size_of::<acpi_table_slic>() - 36usize];
    ["Alignment of acpi_table_slic"][::core::mem::align_of::<acpi_table_slic>() - 1usize];
    ["Offset of field: acpi_table_slic::Header"]
        [::core::mem::offset_of!(acpi_table_slic, Header) - 0usize];
};
#[doc = " SLIC - Software Licensing Description Table\n\n Conforms to \"Microsoft Software Licensing Tables (SLIC and MSDM)\",\n November 29, 2011. Copyright 2011 Microsoft\n"]
pub type ACPI_TABLE_SLIC = acpi_table_slic;
#[doc = " SLIT - System Locality Distance Information Table\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_slit {
    pub Header: ACPI_TABLE_HEADER,
    pub LocalityCount: UINT64,
    pub Entry: [UINT8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_slit"][::core::mem::size_of::<acpi_table_slit>() - 45usize];
    ["Alignment of acpi_table_slit"][::core::mem::align_of::<acpi_table_slit>() - 1usize];
    ["Offset of field: acpi_table_slit::Header"]
        [::core::mem::offset_of!(acpi_table_slit, Header) - 0usize];
    ["Offset of field: acpi_table_slit::LocalityCount"]
        [::core::mem::offset_of!(acpi_table_slit, LocalityCount) - 36usize];
    ["Offset of field: acpi_table_slit::Entry"]
        [::core::mem::offset_of!(acpi_table_slit, Entry) - 44usize];
};
#[doc = " SLIT - System Locality Distance Information Table\n        Version 1\n"]
pub type ACPI_TABLE_SLIT = acpi_table_slit;
#[doc = " SPCR - Serial Port Console Redirection table\n        Version 4\n\n Conforms to \"Serial Port Console Redirection Table\",\n Version 1.10, Jan 5, 2023\n"]
#[repr(C, packed)]
pub struct acpi_table_spcr {
    pub Header: ACPI_TABLE_HEADER,
    pub InterfaceType: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub SerialPort: ACPI_GENERIC_ADDRESS,
    pub InterruptType: UINT8,
    pub PcInterrupt: UINT8,
    pub Interrupt: UINT32,
    pub BaudRate: UINT8,
    pub Parity: UINT8,
    pub StopBits: UINT8,
    pub FlowControl: UINT8,
    pub TerminalType: UINT8,
    pub Language: UINT8,
    pub PciDeviceId: UINT16,
    pub PciVendorId: UINT16,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub PciFlags: UINT32,
    pub PciSegment: UINT8,
    pub UartClkFreq: UINT32,
    pub PreciseBaudrate: UINT32,
    pub NameSpaceStringLength: UINT16,
    pub NameSpaceStringOffset: UINT16,
    pub NameSpaceString: __IncompleteArrayField<::core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_spcr"][::core::mem::size_of::<acpi_table_spcr>() - 88usize];
    ["Alignment of acpi_table_spcr"][::core::mem::align_of::<acpi_table_spcr>() - 1usize];
    ["Offset of field: acpi_table_spcr::Header"]
        [::core::mem::offset_of!(acpi_table_spcr, Header) - 0usize];
    ["Offset of field: acpi_table_spcr::InterfaceType"]
        [::core::mem::offset_of!(acpi_table_spcr, InterfaceType) - 36usize];
    ["Offset of field: acpi_table_spcr::Reserved"]
        [::core::mem::offset_of!(acpi_table_spcr, Reserved) - 37usize];
    ["Offset of field: acpi_table_spcr::SerialPort"]
        [::core::mem::offset_of!(acpi_table_spcr, SerialPort) - 40usize];
    ["Offset of field: acpi_table_spcr::InterruptType"]
        [::core::mem::offset_of!(acpi_table_spcr, InterruptType) - 52usize];
    ["Offset of field: acpi_table_spcr::PcInterrupt"]
        [::core::mem::offset_of!(acpi_table_spcr, PcInterrupt) - 53usize];
    ["Offset of field: acpi_table_spcr::Interrupt"]
        [::core::mem::offset_of!(acpi_table_spcr, Interrupt) - 54usize];
    ["Offset of field: acpi_table_spcr::BaudRate"]
        [::core::mem::offset_of!(acpi_table_spcr, BaudRate) - 58usize];
    ["Offset of field: acpi_table_spcr::Parity"]
        [::core::mem::offset_of!(acpi_table_spcr, Parity) - 59usize];
    ["Offset of field: acpi_table_spcr::StopBits"]
        [::core::mem::offset_of!(acpi_table_spcr, StopBits) - 60usize];
    ["Offset of field: acpi_table_spcr::FlowControl"]
        [::core::mem::offset_of!(acpi_table_spcr, FlowControl) - 61usize];
    ["Offset of field: acpi_table_spcr::TerminalType"]
        [::core::mem::offset_of!(acpi_table_spcr, TerminalType) - 62usize];
    ["Offset of field: acpi_table_spcr::Language"]
        [::core::mem::offset_of!(acpi_table_spcr, Language) - 63usize];
    ["Offset of field: acpi_table_spcr::PciDeviceId"]
        [::core::mem::offset_of!(acpi_table_spcr, PciDeviceId) - 64usize];
    ["Offset of field: acpi_table_spcr::PciVendorId"]
        [::core::mem::offset_of!(acpi_table_spcr, PciVendorId) - 66usize];
    ["Offset of field: acpi_table_spcr::PciBus"]
        [::core::mem::offset_of!(acpi_table_spcr, PciBus) - 68usize];
    ["Offset of field: acpi_table_spcr::PciDevice"]
        [::core::mem::offset_of!(acpi_table_spcr, PciDevice) - 69usize];
    ["Offset of field: acpi_table_spcr::PciFunction"]
        [::core::mem::offset_of!(acpi_table_spcr, PciFunction) - 70usize];
    ["Offset of field: acpi_table_spcr::PciFlags"]
        [::core::mem::offset_of!(acpi_table_spcr, PciFlags) - 71usize];
    ["Offset of field: acpi_table_spcr::PciSegment"]
        [::core::mem::offset_of!(acpi_table_spcr, PciSegment) - 75usize];
    ["Offset of field: acpi_table_spcr::UartClkFreq"]
        [::core::mem::offset_of!(acpi_table_spcr, UartClkFreq) - 76usize];
    ["Offset of field: acpi_table_spcr::PreciseBaudrate"]
        [::core::mem::offset_of!(acpi_table_spcr, PreciseBaudrate) - 80usize];
    ["Offset of field: acpi_table_spcr::NameSpaceStringLength"]
        [::core::mem::offset_of!(acpi_table_spcr, NameSpaceStringLength) - 84usize];
    ["Offset of field: acpi_table_spcr::NameSpaceStringOffset"]
        [::core::mem::offset_of!(acpi_table_spcr, NameSpaceStringOffset) - 86usize];
    ["Offset of field: acpi_table_spcr::NameSpaceString"]
        [::core::mem::offset_of!(acpi_table_spcr, NameSpaceString) - 88usize];
};
#[doc = " SPCR - Serial Port Console Redirection table\n        Version 4\n\n Conforms to \"Serial Port Console Redirection Table\",\n Version 1.10, Jan 5, 2023\n"]
pub type ACPI_TABLE_SPCR = acpi_table_spcr;
#[doc = " SPMI - Server Platform Management Interface table\n        Version 5\n\n Conforms to \"Intelligent Platform Management Interface Specification\n Second Generation v2.0\", Document Revision 1.0, February 12, 2004 with\n June 12, 2009 markup.\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_spmi {
    pub Header: ACPI_TABLE_HEADER,
    pub InterfaceType: UINT8,
    pub Reserved: UINT8,
    pub SpecRevision: UINT16,
    pub InterruptType: UINT8,
    pub GpeNumber: UINT8,
    pub Reserved1: UINT8,
    pub PciDeviceFlag: UINT8,
    pub Interrupt: UINT32,
    pub IpmiRegister: ACPI_GENERIC_ADDRESS,
    pub PciSegment: UINT8,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub Reserved2: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_spmi"][::core::mem::size_of::<acpi_table_spmi>() - 65usize];
    ["Alignment of acpi_table_spmi"][::core::mem::align_of::<acpi_table_spmi>() - 1usize];
    ["Offset of field: acpi_table_spmi::Header"]
        [::core::mem::offset_of!(acpi_table_spmi, Header) - 0usize];
    ["Offset of field: acpi_table_spmi::InterfaceType"]
        [::core::mem::offset_of!(acpi_table_spmi, InterfaceType) - 36usize];
    ["Offset of field: acpi_table_spmi::Reserved"]
        [::core::mem::offset_of!(acpi_table_spmi, Reserved) - 37usize];
    ["Offset of field: acpi_table_spmi::SpecRevision"]
        [::core::mem::offset_of!(acpi_table_spmi, SpecRevision) - 38usize];
    ["Offset of field: acpi_table_spmi::InterruptType"]
        [::core::mem::offset_of!(acpi_table_spmi, InterruptType) - 40usize];
    ["Offset of field: acpi_table_spmi::GpeNumber"]
        [::core::mem::offset_of!(acpi_table_spmi, GpeNumber) - 41usize];
    ["Offset of field: acpi_table_spmi::Reserved1"]
        [::core::mem::offset_of!(acpi_table_spmi, Reserved1) - 42usize];
    ["Offset of field: acpi_table_spmi::PciDeviceFlag"]
        [::core::mem::offset_of!(acpi_table_spmi, PciDeviceFlag) - 43usize];
    ["Offset of field: acpi_table_spmi::Interrupt"]
        [::core::mem::offset_of!(acpi_table_spmi, Interrupt) - 44usize];
    ["Offset of field: acpi_table_spmi::IpmiRegister"]
        [::core::mem::offset_of!(acpi_table_spmi, IpmiRegister) - 48usize];
    ["Offset of field: acpi_table_spmi::PciSegment"]
        [::core::mem::offset_of!(acpi_table_spmi, PciSegment) - 60usize];
    ["Offset of field: acpi_table_spmi::PciBus"]
        [::core::mem::offset_of!(acpi_table_spmi, PciBus) - 61usize];
    ["Offset of field: acpi_table_spmi::PciDevice"]
        [::core::mem::offset_of!(acpi_table_spmi, PciDevice) - 62usize];
    ["Offset of field: acpi_table_spmi::PciFunction"]
        [::core::mem::offset_of!(acpi_table_spmi, PciFunction) - 63usize];
    ["Offset of field: acpi_table_spmi::Reserved2"]
        [::core::mem::offset_of!(acpi_table_spmi, Reserved2) - 64usize];
};
#[doc = " SPMI - Server Platform Management Interface table\n        Version 5\n\n Conforms to \"Intelligent Platform Management Interface Specification\n Second Generation v2.0\", Document Revision 1.0, February 12, 2004 with\n June 12, 2009 markup.\n"]
pub type ACPI_TABLE_SPMI = acpi_table_spmi;
pub const AcpiSpmiInterfaceTypes_ACPI_SPMI_NOT_USED: AcpiSpmiInterfaceTypes = 0;
pub const AcpiSpmiInterfaceTypes_ACPI_SPMI_KEYBOARD: AcpiSpmiInterfaceTypes = 1;
pub const AcpiSpmiInterfaceTypes_ACPI_SPMI_SMI: AcpiSpmiInterfaceTypes = 2;
pub const AcpiSpmiInterfaceTypes_ACPI_SPMI_BLOCK_TRANSFER: AcpiSpmiInterfaceTypes = 3;
pub const AcpiSpmiInterfaceTypes_ACPI_SPMI_SMBUS: AcpiSpmiInterfaceTypes = 4;
pub const AcpiSpmiInterfaceTypes_ACPI_SPMI_RESERVED: AcpiSpmiInterfaceTypes = 5;
pub type AcpiSpmiInterfaceTypes = ::core::ffi::c_uint;
#[doc = " SRAT - System Resource Affinity Table\n        Version 3\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_srat {
    pub Header: ACPI_TABLE_HEADER,
    pub TableRevision: UINT32,
    pub Reserved: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_srat"][::core::mem::size_of::<acpi_table_srat>() - 48usize];
    ["Alignment of acpi_table_srat"][::core::mem::align_of::<acpi_table_srat>() - 1usize];
    ["Offset of field: acpi_table_srat::Header"]
        [::core::mem::offset_of!(acpi_table_srat, Header) - 0usize];
    ["Offset of field: acpi_table_srat::TableRevision"]
        [::core::mem::offset_of!(acpi_table_srat, TableRevision) - 36usize];
    ["Offset of field: acpi_table_srat::Reserved"]
        [::core::mem::offset_of!(acpi_table_srat, Reserved) - 40usize];
};
#[doc = " SRAT - System Resource Affinity Table\n        Version 3\n"]
pub type ACPI_TABLE_SRAT = acpi_table_srat;
pub const AcpiSratType_ACPI_SRAT_TYPE_CPU_AFFINITY: AcpiSratType = 0;
pub const AcpiSratType_ACPI_SRAT_TYPE_MEMORY_AFFINITY: AcpiSratType = 1;
pub const AcpiSratType_ACPI_SRAT_TYPE_X2APIC_CPU_AFFINITY: AcpiSratType = 2;
pub const AcpiSratType_ACPI_SRAT_TYPE_GICC_AFFINITY: AcpiSratType = 3;
pub const AcpiSratType_ACPI_SRAT_TYPE_GIC_ITS_AFFINITY: AcpiSratType = 4;
pub const AcpiSratType_ACPI_SRAT_TYPE_GENERIC_AFFINITY: AcpiSratType = 5;
pub const AcpiSratType_ACPI_SRAT_TYPE_GENERIC_PORT_AFFINITY: AcpiSratType = 6;
pub const AcpiSratType_ACPI_SRAT_TYPE_RINTC_AFFINITY: AcpiSratType = 7;
pub const AcpiSratType_ACPI_SRAT_TYPE_RESERVED: AcpiSratType = 8;
pub type AcpiSratType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_cpu_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomainLo: UINT8,
    pub ApicId: UINT8,
    pub Flags: UINT32,
    pub LocalSapicEid: UINT8,
    pub ProximityDomainHi: [UINT8; 3usize],
    pub ClockDomain: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_cpu_affinity"][::core::mem::size_of::<acpi_srat_cpu_affinity>() - 16usize];
    ["Alignment of acpi_srat_cpu_affinity"]
        [::core::mem::align_of::<acpi_srat_cpu_affinity>() - 1usize];
    ["Offset of field: acpi_srat_cpu_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_cpu_affinity::ProximityDomainLo"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, ProximityDomainLo) - 2usize];
    ["Offset of field: acpi_srat_cpu_affinity::ApicId"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, ApicId) - 3usize];
    ["Offset of field: acpi_srat_cpu_affinity::Flags"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, Flags) - 4usize];
    ["Offset of field: acpi_srat_cpu_affinity::LocalSapicEid"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, LocalSapicEid) - 8usize];
    ["Offset of field: acpi_srat_cpu_affinity::ProximityDomainHi"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, ProximityDomainHi) - 9usize];
    ["Offset of field: acpi_srat_cpu_affinity::ClockDomain"]
        [::core::mem::offset_of!(acpi_srat_cpu_affinity, ClockDomain) - 12usize];
};
pub type ACPI_SRAT_CPU_AFFINITY = acpi_srat_cpu_affinity;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_mem_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomain: UINT32,
    pub Reserved: UINT16,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub Reserved2: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_mem_affinity"][::core::mem::size_of::<acpi_srat_mem_affinity>() - 40usize];
    ["Alignment of acpi_srat_mem_affinity"]
        [::core::mem::align_of::<acpi_srat_mem_affinity>() - 1usize];
    ["Offset of field: acpi_srat_mem_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_mem_affinity::ProximityDomain"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, ProximityDomain) - 2usize];
    ["Offset of field: acpi_srat_mem_affinity::Reserved"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, Reserved) - 6usize];
    ["Offset of field: acpi_srat_mem_affinity::BaseAddress"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, BaseAddress) - 8usize];
    ["Offset of field: acpi_srat_mem_affinity::Length"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, Length) - 16usize];
    ["Offset of field: acpi_srat_mem_affinity::Reserved1"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, Reserved1) - 24usize];
    ["Offset of field: acpi_srat_mem_affinity::Flags"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, Flags) - 28usize];
    ["Offset of field: acpi_srat_mem_affinity::Reserved2"]
        [::core::mem::offset_of!(acpi_srat_mem_affinity, Reserved2) - 32usize];
};
pub type ACPI_SRAT_MEM_AFFINITY = acpi_srat_mem_affinity;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_x2apic_cpu_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub ProximityDomain: UINT32,
    pub ApicId: UINT32,
    pub Flags: UINT32,
    pub ClockDomain: UINT32,
    pub Reserved2: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_x2apic_cpu_affinity"]
        [::core::mem::size_of::<acpi_srat_x2apic_cpu_affinity>() - 24usize];
    ["Alignment of acpi_srat_x2apic_cpu_affinity"]
        [::core::mem::align_of::<acpi_srat_x2apic_cpu_affinity>() - 1usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::Reserved"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, Reserved) - 2usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::ProximityDomain"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, ProximityDomain) - 4usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::ApicId"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, ApicId) - 8usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::Flags"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, Flags) - 12usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::ClockDomain"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, ClockDomain) - 16usize];
    ["Offset of field: acpi_srat_x2apic_cpu_affinity::Reserved2"]
        [::core::mem::offset_of!(acpi_srat_x2apic_cpu_affinity, Reserved2) - 20usize];
};
pub type ACPI_SRAT_X2APIC_CPU_AFFINITY = acpi_srat_x2apic_cpu_affinity;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_gicc_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomain: UINT32,
    pub AcpiProcessorUid: UINT32,
    pub Flags: UINT32,
    pub ClockDomain: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_gicc_affinity"]
        [::core::mem::size_of::<acpi_srat_gicc_affinity>() - 18usize];
    ["Alignment of acpi_srat_gicc_affinity"]
        [::core::mem::align_of::<acpi_srat_gicc_affinity>() - 1usize];
    ["Offset of field: acpi_srat_gicc_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_gicc_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_gicc_affinity::ProximityDomain"]
        [::core::mem::offset_of!(acpi_srat_gicc_affinity, ProximityDomain) - 2usize];
    ["Offset of field: acpi_srat_gicc_affinity::AcpiProcessorUid"]
        [::core::mem::offset_of!(acpi_srat_gicc_affinity, AcpiProcessorUid) - 6usize];
    ["Offset of field: acpi_srat_gicc_affinity::Flags"]
        [::core::mem::offset_of!(acpi_srat_gicc_affinity, Flags) - 10usize];
    ["Offset of field: acpi_srat_gicc_affinity::ClockDomain"]
        [::core::mem::offset_of!(acpi_srat_gicc_affinity, ClockDomain) - 14usize];
};
pub type ACPI_SRAT_GICC_AFFINITY = acpi_srat_gicc_affinity;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_gic_its_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomain: UINT32,
    pub Reserved: UINT16,
    pub ItsId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_gic_its_affinity"]
        [::core::mem::size_of::<acpi_srat_gic_its_affinity>() - 12usize];
    ["Alignment of acpi_srat_gic_its_affinity"]
        [::core::mem::align_of::<acpi_srat_gic_its_affinity>() - 1usize];
    ["Offset of field: acpi_srat_gic_its_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_gic_its_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_gic_its_affinity::ProximityDomain"]
        [::core::mem::offset_of!(acpi_srat_gic_its_affinity, ProximityDomain) - 2usize];
    ["Offset of field: acpi_srat_gic_its_affinity::Reserved"]
        [::core::mem::offset_of!(acpi_srat_gic_its_affinity, Reserved) - 6usize];
    ["Offset of field: acpi_srat_gic_its_affinity::ItsId"]
        [::core::mem::offset_of!(acpi_srat_gic_its_affinity, ItsId) - 8usize];
};
pub type ACPI_SRAT_GIC_ITS_AFFINITY = acpi_srat_gic_its_affinity;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_generic_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT8,
    pub DeviceHandleType: UINT8,
    pub ProximityDomain: UINT32,
    pub DeviceHandle: [UINT8; 16usize],
    pub Flags: UINT32,
    pub Reserved1: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_generic_affinity"]
        [::core::mem::size_of::<acpi_srat_generic_affinity>() - 32usize];
    ["Alignment of acpi_srat_generic_affinity"]
        [::core::mem::align_of::<acpi_srat_generic_affinity>() - 1usize];
    ["Offset of field: acpi_srat_generic_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_generic_affinity::Reserved"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, Reserved) - 2usize];
    ["Offset of field: acpi_srat_generic_affinity::DeviceHandleType"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, DeviceHandleType) - 3usize];
    ["Offset of field: acpi_srat_generic_affinity::ProximityDomain"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, ProximityDomain) - 4usize];
    ["Offset of field: acpi_srat_generic_affinity::DeviceHandle"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, DeviceHandle) - 8usize];
    ["Offset of field: acpi_srat_generic_affinity::Flags"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, Flags) - 24usize];
    ["Offset of field: acpi_srat_generic_affinity::Reserved1"]
        [::core::mem::offset_of!(acpi_srat_generic_affinity, Reserved1) - 28usize];
};
pub type ACPI_SRAT_GENERIC_AFFINITY = acpi_srat_generic_affinity;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_rintc_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub ProximityDomain: UINT32,
    pub AcpiProcessorUid: UINT32,
    pub Flags: UINT32,
    pub ClockDomain: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_srat_rintc_affinity"]
        [::core::mem::size_of::<acpi_srat_rintc_affinity>() - 20usize];
    ["Alignment of acpi_srat_rintc_affinity"]
        [::core::mem::align_of::<acpi_srat_rintc_affinity>() - 1usize];
    ["Offset of field: acpi_srat_rintc_affinity::Header"]
        [::core::mem::offset_of!(acpi_srat_rintc_affinity, Header) - 0usize];
    ["Offset of field: acpi_srat_rintc_affinity::Reserved"]
        [::core::mem::offset_of!(acpi_srat_rintc_affinity, Reserved) - 2usize];
    ["Offset of field: acpi_srat_rintc_affinity::ProximityDomain"]
        [::core::mem::offset_of!(acpi_srat_rintc_affinity, ProximityDomain) - 4usize];
    ["Offset of field: acpi_srat_rintc_affinity::AcpiProcessorUid"]
        [::core::mem::offset_of!(acpi_srat_rintc_affinity, AcpiProcessorUid) - 8usize];
    ["Offset of field: acpi_srat_rintc_affinity::Flags"]
        [::core::mem::offset_of!(acpi_srat_rintc_affinity, Flags) - 12usize];
    ["Offset of field: acpi_srat_rintc_affinity::ClockDomain"]
        [::core::mem::offset_of!(acpi_srat_rintc_affinity, ClockDomain) - 16usize];
};
pub type ACPI_SRAT_RINTC_AFFINITY = acpi_srat_rintc_affinity;
#[doc = " STAO - Status Override Table (_STA override) - ACPI 6.0\n        Version 1\n\n Conforms to \"ACPI Specification for Status Override Table\"\n 6 January 2015\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_stao {
    pub Header: ACPI_TABLE_HEADER,
    pub IgnoreUart: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_stao"][::core::mem::size_of::<acpi_table_stao>() - 37usize];
    ["Alignment of acpi_table_stao"][::core::mem::align_of::<acpi_table_stao>() - 1usize];
    ["Offset of field: acpi_table_stao::Header"]
        [::core::mem::offset_of!(acpi_table_stao, Header) - 0usize];
    ["Offset of field: acpi_table_stao::IgnoreUart"]
        [::core::mem::offset_of!(acpi_table_stao, IgnoreUart) - 36usize];
};
#[doc = " STAO - Status Override Table (_STA override) - ACPI 6.0\n        Version 1\n\n Conforms to \"ACPI Specification for Status Override Table\"\n 6 January 2015\n"]
pub type ACPI_TABLE_STAO = acpi_table_stao;
#[doc = " TCPA - Trusted Computing Platform Alliance table\n        Version 2\n\n TCG Hardware Interface Table for TPM 1.2 Clients and Servers\n\n Conforms to \"TCG ACPI Specification, Family 1.2 and 2.0\",\n Version 1.2, Revision 8\n February 27, 2017\n\n NOTE: There are two versions of the table with the same signature --\n the client version and the server version. The common PlatformClass\n field is used to differentiate the two types of tables.\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tcpa_hdr {
    pub Header: ACPI_TABLE_HEADER,
    pub PlatformClass: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_tcpa_hdr"][::core::mem::size_of::<acpi_table_tcpa_hdr>() - 38usize];
    ["Alignment of acpi_table_tcpa_hdr"][::core::mem::align_of::<acpi_table_tcpa_hdr>() - 1usize];
    ["Offset of field: acpi_table_tcpa_hdr::Header"]
        [::core::mem::offset_of!(acpi_table_tcpa_hdr, Header) - 0usize];
    ["Offset of field: acpi_table_tcpa_hdr::PlatformClass"]
        [::core::mem::offset_of!(acpi_table_tcpa_hdr, PlatformClass) - 36usize];
};
#[doc = " TCPA - Trusted Computing Platform Alliance table\n        Version 2\n\n TCG Hardware Interface Table for TPM 1.2 Clients and Servers\n\n Conforms to \"TCG ACPI Specification, Family 1.2 and 2.0\",\n Version 1.2, Revision 8\n February 27, 2017\n\n NOTE: There are two versions of the table with the same signature --\n the client version and the server version. The common PlatformClass\n field is used to differentiate the two types of tables.\n"]
pub type ACPI_TABLE_TCPA_HDR = acpi_table_tcpa_hdr;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tcpa_client {
    pub MinimumLogLength: UINT32,
    pub LogAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_tcpa_client"][::core::mem::size_of::<acpi_table_tcpa_client>() - 12usize];
    ["Alignment of acpi_table_tcpa_client"]
        [::core::mem::align_of::<acpi_table_tcpa_client>() - 1usize];
    ["Offset of field: acpi_table_tcpa_client::MinimumLogLength"]
        [::core::mem::offset_of!(acpi_table_tcpa_client, MinimumLogLength) - 0usize];
    ["Offset of field: acpi_table_tcpa_client::LogAddress"]
        [::core::mem::offset_of!(acpi_table_tcpa_client, LogAddress) - 4usize];
};
pub type ACPI_TABLE_TCPA_CLIENT = acpi_table_tcpa_client;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tcpa_server {
    pub Reserved: UINT16,
    pub MinimumLogLength: UINT64,
    pub LogAddress: UINT64,
    pub SpecRevision: UINT16,
    pub DeviceFlags: UINT8,
    pub InterruptFlags: UINT8,
    pub GpeNumber: UINT8,
    pub Reserved2: [UINT8; 3usize],
    pub GlobalInterrupt: UINT32,
    pub Address: ACPI_GENERIC_ADDRESS,
    pub Reserved3: UINT32,
    pub ConfigAddress: ACPI_GENERIC_ADDRESS,
    pub Group: UINT8,
    pub Bus: UINT8,
    pub Device: UINT8,
    pub Function: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_tcpa_server"][::core::mem::size_of::<acpi_table_tcpa_server>() - 62usize];
    ["Alignment of acpi_table_tcpa_server"]
        [::core::mem::align_of::<acpi_table_tcpa_server>() - 1usize];
    ["Offset of field: acpi_table_tcpa_server::Reserved"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Reserved) - 0usize];
    ["Offset of field: acpi_table_tcpa_server::MinimumLogLength"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, MinimumLogLength) - 2usize];
    ["Offset of field: acpi_table_tcpa_server::LogAddress"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, LogAddress) - 10usize];
    ["Offset of field: acpi_table_tcpa_server::SpecRevision"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, SpecRevision) - 18usize];
    ["Offset of field: acpi_table_tcpa_server::DeviceFlags"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, DeviceFlags) - 20usize];
    ["Offset of field: acpi_table_tcpa_server::InterruptFlags"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, InterruptFlags) - 21usize];
    ["Offset of field: acpi_table_tcpa_server::GpeNumber"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, GpeNumber) - 22usize];
    ["Offset of field: acpi_table_tcpa_server::Reserved2"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Reserved2) - 23usize];
    ["Offset of field: acpi_table_tcpa_server::GlobalInterrupt"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, GlobalInterrupt) - 26usize];
    ["Offset of field: acpi_table_tcpa_server::Address"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Address) - 30usize];
    ["Offset of field: acpi_table_tcpa_server::Reserved3"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Reserved3) - 42usize];
    ["Offset of field: acpi_table_tcpa_server::ConfigAddress"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, ConfigAddress) - 46usize];
    ["Offset of field: acpi_table_tcpa_server::Group"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Group) - 58usize];
    ["Offset of field: acpi_table_tcpa_server::Bus"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Bus) - 59usize];
    ["Offset of field: acpi_table_tcpa_server::Device"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Device) - 60usize];
    ["Offset of field: acpi_table_tcpa_server::Function"]
        [::core::mem::offset_of!(acpi_table_tcpa_server, Function) - 61usize];
};
pub type ACPI_TABLE_TCPA_SERVER = acpi_table_tcpa_server;
#[doc = " TPM2 - Trusted Platform Module (TPM) 2.0 Hardware Interface Table\n        Version 4\n\n TCG Hardware Interface Table for TPM 2.0 Clients and Servers\n\n Conforms to \"TCG ACPI Specification, Family 1.2 and 2.0\",\n Version 1.2, Revision 8\n February 27, 2017\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tpm23 {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
    pub ControlAddress: UINT64,
    pub StartMethod: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_tpm23"][::core::mem::size_of::<acpi_table_tpm23>() - 52usize];
    ["Alignment of acpi_table_tpm23"][::core::mem::align_of::<acpi_table_tpm23>() - 1usize];
    ["Offset of field: acpi_table_tpm23::Header"]
        [::core::mem::offset_of!(acpi_table_tpm23, Header) - 0usize];
    ["Offset of field: acpi_table_tpm23::Reserved"]
        [::core::mem::offset_of!(acpi_table_tpm23, Reserved) - 36usize];
    ["Offset of field: acpi_table_tpm23::ControlAddress"]
        [::core::mem::offset_of!(acpi_table_tpm23, ControlAddress) - 40usize];
    ["Offset of field: acpi_table_tpm23::StartMethod"]
        [::core::mem::offset_of!(acpi_table_tpm23, StartMethod) - 48usize];
};
#[doc = " TPM2 - Trusted Platform Module (TPM) 2.0 Hardware Interface Table\n        Version 4\n\n TCG Hardware Interface Table for TPM 2.0 Clients and Servers\n\n Conforms to \"TCG ACPI Specification, Family 1.2 and 2.0\",\n Version 1.2, Revision 8\n February 27, 2017\n"]
pub type ACPI_TABLE_TPM23 = acpi_table_tpm23;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_tmp23_trailer {
    pub Reserved: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_tmp23_trailer"][::core::mem::size_of::<acpi_tmp23_trailer>() - 4usize];
    ["Alignment of acpi_tmp23_trailer"][::core::mem::align_of::<acpi_tmp23_trailer>() - 1usize];
    ["Offset of field: acpi_tmp23_trailer::Reserved"]
        [::core::mem::offset_of!(acpi_tmp23_trailer, Reserved) - 0usize];
};
pub type ACPI_TPM23_TRAILER = acpi_tmp23_trailer;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tpm2 {
    pub Header: ACPI_TABLE_HEADER,
    pub PlatformClass: UINT16,
    pub Reserved: UINT16,
    pub ControlAddress: UINT64,
    pub StartMethod: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_tpm2"][::core::mem::size_of::<acpi_table_tpm2>() - 52usize];
    ["Alignment of acpi_table_tpm2"][::core::mem::align_of::<acpi_table_tpm2>() - 1usize];
    ["Offset of field: acpi_table_tpm2::Header"]
        [::core::mem::offset_of!(acpi_table_tpm2, Header) - 0usize];
    ["Offset of field: acpi_table_tpm2::PlatformClass"]
        [::core::mem::offset_of!(acpi_table_tpm2, PlatformClass) - 36usize];
    ["Offset of field: acpi_table_tpm2::Reserved"]
        [::core::mem::offset_of!(acpi_table_tpm2, Reserved) - 38usize];
    ["Offset of field: acpi_table_tpm2::ControlAddress"]
        [::core::mem::offset_of!(acpi_table_tpm2, ControlAddress) - 40usize];
    ["Offset of field: acpi_table_tpm2::StartMethod"]
        [::core::mem::offset_of!(acpi_table_tpm2, StartMethod) - 48usize];
};
pub type ACPI_TABLE_TPM2 = acpi_table_tpm2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_tpm2_trailer {
    pub MethodParameters: [UINT8; 12usize],
    pub MinimumLogLength: UINT32,
    pub LogAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_tpm2_trailer"][::core::mem::size_of::<acpi_tpm2_trailer>() - 24usize];
    ["Alignment of acpi_tpm2_trailer"][::core::mem::align_of::<acpi_tpm2_trailer>() - 1usize];
    ["Offset of field: acpi_tpm2_trailer::MethodParameters"]
        [::core::mem::offset_of!(acpi_tpm2_trailer, MethodParameters) - 0usize];
    ["Offset of field: acpi_tpm2_trailer::MinimumLogLength"]
        [::core::mem::offset_of!(acpi_tpm2_trailer, MinimumLogLength) - 12usize];
    ["Offset of field: acpi_tpm2_trailer::LogAddress"]
        [::core::mem::offset_of!(acpi_tpm2_trailer, LogAddress) - 16usize];
};
pub type ACPI_TPM2_TRAILER = acpi_tpm2_trailer;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_tpm2_arm_smc {
    pub GlobalInterrupt: UINT32,
    pub InterruptFlags: UINT8,
    pub OperationFlags: UINT8,
    pub Reserved: UINT16,
    pub FunctionId: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_tpm2_arm_smc"][::core::mem::size_of::<acpi_tpm2_arm_smc>() - 12usize];
    ["Alignment of acpi_tpm2_arm_smc"][::core::mem::align_of::<acpi_tpm2_arm_smc>() - 1usize];
    ["Offset of field: acpi_tpm2_arm_smc::GlobalInterrupt"]
        [::core::mem::offset_of!(acpi_tpm2_arm_smc, GlobalInterrupt) - 0usize];
    ["Offset of field: acpi_tpm2_arm_smc::InterruptFlags"]
        [::core::mem::offset_of!(acpi_tpm2_arm_smc, InterruptFlags) - 4usize];
    ["Offset of field: acpi_tpm2_arm_smc::OperationFlags"]
        [::core::mem::offset_of!(acpi_tpm2_arm_smc, OperationFlags) - 5usize];
    ["Offset of field: acpi_tpm2_arm_smc::Reserved"]
        [::core::mem::offset_of!(acpi_tpm2_arm_smc, Reserved) - 6usize];
    ["Offset of field: acpi_tpm2_arm_smc::FunctionId"]
        [::core::mem::offset_of!(acpi_tpm2_arm_smc, FunctionId) - 8usize];
};
pub type ACPI_TPM2_ARM_SMC = acpi_tpm2_arm_smc;
#[doc = " UEFI - UEFI Boot optimization Table\n        Version 1\n\n Conforms to \"Unified Extensible Firmware Interface Specification\",\n Version 2.3, May 8, 2009\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_uefi {
    pub Header: ACPI_TABLE_HEADER,
    pub Identifier: [UINT8; 16usize],
    pub DataOffset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_uefi"][::core::mem::size_of::<acpi_table_uefi>() - 54usize];
    ["Alignment of acpi_table_uefi"][::core::mem::align_of::<acpi_table_uefi>() - 1usize];
    ["Offset of field: acpi_table_uefi::Header"]
        [::core::mem::offset_of!(acpi_table_uefi, Header) - 0usize];
    ["Offset of field: acpi_table_uefi::Identifier"]
        [::core::mem::offset_of!(acpi_table_uefi, Identifier) - 36usize];
    ["Offset of field: acpi_table_uefi::DataOffset"]
        [::core::mem::offset_of!(acpi_table_uefi, DataOffset) - 52usize];
};
#[doc = " UEFI - UEFI Boot optimization Table\n        Version 1\n\n Conforms to \"Unified Extensible Firmware Interface Specification\",\n Version 2.3, May 8, 2009\n"]
pub type ACPI_TABLE_UEFI = acpi_table_uefi;
#[doc = " VIOT - Virtual I/O Translation Table\n        Version 1\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_viot {
    pub Header: ACPI_TABLE_HEADER,
    pub NodeCount: UINT16,
    pub NodeOffset: UINT16,
    pub Reserved: [UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_viot"][::core::mem::size_of::<acpi_table_viot>() - 48usize];
    ["Alignment of acpi_table_viot"][::core::mem::align_of::<acpi_table_viot>() - 1usize];
    ["Offset of field: acpi_table_viot::Header"]
        [::core::mem::offset_of!(acpi_table_viot, Header) - 0usize];
    ["Offset of field: acpi_table_viot::NodeCount"]
        [::core::mem::offset_of!(acpi_table_viot, NodeCount) - 36usize];
    ["Offset of field: acpi_table_viot::NodeOffset"]
        [::core::mem::offset_of!(acpi_table_viot, NodeOffset) - 38usize];
    ["Offset of field: acpi_table_viot::Reserved"]
        [::core::mem::offset_of!(acpi_table_viot, Reserved) - 40usize];
};
#[doc = " VIOT - Virtual I/O Translation Table\n        Version 1\n"]
pub type ACPI_TABLE_VIOT = acpi_table_viot;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_viot_header {
    pub Type: UINT8,
    pub Reserved: UINT8,
    pub Length: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_viot_header"][::core::mem::size_of::<acpi_viot_header>() - 4usize];
    ["Alignment of acpi_viot_header"][::core::mem::align_of::<acpi_viot_header>() - 1usize];
    ["Offset of field: acpi_viot_header::Type"]
        [::core::mem::offset_of!(acpi_viot_header, Type) - 0usize];
    ["Offset of field: acpi_viot_header::Reserved"]
        [::core::mem::offset_of!(acpi_viot_header, Reserved) - 1usize];
    ["Offset of field: acpi_viot_header::Length"]
        [::core::mem::offset_of!(acpi_viot_header, Length) - 2usize];
};
pub type ACPI_VIOT_HEADER = acpi_viot_header;
pub const AcpiViotNodeType_ACPI_VIOT_NODE_PCI_RANGE: AcpiViotNodeType = 1;
pub const AcpiViotNodeType_ACPI_VIOT_NODE_MMIO: AcpiViotNodeType = 2;
pub const AcpiViotNodeType_ACPI_VIOT_NODE_VIRTIO_IOMMU_PCI: AcpiViotNodeType = 3;
pub const AcpiViotNodeType_ACPI_VIOT_NODE_VIRTIO_IOMMU_MMIO: AcpiViotNodeType = 4;
pub const AcpiViotNodeType_ACPI_VIOT_RESERVED: AcpiViotNodeType = 5;
pub type AcpiViotNodeType = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_viot_pci_range {
    pub Header: ACPI_VIOT_HEADER,
    pub EndpointStart: UINT32,
    pub SegmentStart: UINT16,
    pub SegmentEnd: UINT16,
    pub BdfStart: UINT16,
    pub BdfEnd: UINT16,
    pub OutputNode: UINT16,
    pub Reserved: [UINT8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_viot_pci_range"][::core::mem::size_of::<acpi_viot_pci_range>() - 24usize];
    ["Alignment of acpi_viot_pci_range"][::core::mem::align_of::<acpi_viot_pci_range>() - 1usize];
    ["Offset of field: acpi_viot_pci_range::Header"]
        [::core::mem::offset_of!(acpi_viot_pci_range, Header) - 0usize];
    ["Offset of field: acpi_viot_pci_range::EndpointStart"]
        [::core::mem::offset_of!(acpi_viot_pci_range, EndpointStart) - 4usize];
    ["Offset of field: acpi_viot_pci_range::SegmentStart"]
        [::core::mem::offset_of!(acpi_viot_pci_range, SegmentStart) - 8usize];
    ["Offset of field: acpi_viot_pci_range::SegmentEnd"]
        [::core::mem::offset_of!(acpi_viot_pci_range, SegmentEnd) - 10usize];
    ["Offset of field: acpi_viot_pci_range::BdfStart"]
        [::core::mem::offset_of!(acpi_viot_pci_range, BdfStart) - 12usize];
    ["Offset of field: acpi_viot_pci_range::BdfEnd"]
        [::core::mem::offset_of!(acpi_viot_pci_range, BdfEnd) - 14usize];
    ["Offset of field: acpi_viot_pci_range::OutputNode"]
        [::core::mem::offset_of!(acpi_viot_pci_range, OutputNode) - 16usize];
    ["Offset of field: acpi_viot_pci_range::Reserved"]
        [::core::mem::offset_of!(acpi_viot_pci_range, Reserved) - 18usize];
};
pub type ACPI_VIOT_PCI_RANGE = acpi_viot_pci_range;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_viot_mmio {
    pub Header: ACPI_VIOT_HEADER,
    pub Endpoint: UINT32,
    pub BaseAddress: UINT64,
    pub OutputNode: UINT16,
    pub Reserved: [UINT8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_viot_mmio"][::core::mem::size_of::<acpi_viot_mmio>() - 24usize];
    ["Alignment of acpi_viot_mmio"][::core::mem::align_of::<acpi_viot_mmio>() - 1usize];
    ["Offset of field: acpi_viot_mmio::Header"]
        [::core::mem::offset_of!(acpi_viot_mmio, Header) - 0usize];
    ["Offset of field: acpi_viot_mmio::Endpoint"]
        [::core::mem::offset_of!(acpi_viot_mmio, Endpoint) - 4usize];
    ["Offset of field: acpi_viot_mmio::BaseAddress"]
        [::core::mem::offset_of!(acpi_viot_mmio, BaseAddress) - 8usize];
    ["Offset of field: acpi_viot_mmio::OutputNode"]
        [::core::mem::offset_of!(acpi_viot_mmio, OutputNode) - 16usize];
    ["Offset of field: acpi_viot_mmio::Reserved"]
        [::core::mem::offset_of!(acpi_viot_mmio, Reserved) - 18usize];
};
pub type ACPI_VIOT_MMIO = acpi_viot_mmio;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_viot_virtio_iommu_pci {
    pub Header: ACPI_VIOT_HEADER,
    pub Segment: UINT16,
    pub Bdf: UINT16,
    pub Reserved: [UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_viot_virtio_iommu_pci"]
        [::core::mem::size_of::<acpi_viot_virtio_iommu_pci>() - 16usize];
    ["Alignment of acpi_viot_virtio_iommu_pci"]
        [::core::mem::align_of::<acpi_viot_virtio_iommu_pci>() - 1usize];
    ["Offset of field: acpi_viot_virtio_iommu_pci::Header"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_pci, Header) - 0usize];
    ["Offset of field: acpi_viot_virtio_iommu_pci::Segment"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_pci, Segment) - 4usize];
    ["Offset of field: acpi_viot_virtio_iommu_pci::Bdf"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_pci, Bdf) - 6usize];
    ["Offset of field: acpi_viot_virtio_iommu_pci::Reserved"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_pci, Reserved) - 8usize];
};
pub type ACPI_VIOT_VIRTIO_IOMMU_PCI = acpi_viot_virtio_iommu_pci;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_viot_virtio_iommu_mmio {
    pub Header: ACPI_VIOT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub BaseAddress: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_viot_virtio_iommu_mmio"]
        [::core::mem::size_of::<acpi_viot_virtio_iommu_mmio>() - 16usize];
    ["Alignment of acpi_viot_virtio_iommu_mmio"]
        [::core::mem::align_of::<acpi_viot_virtio_iommu_mmio>() - 1usize];
    ["Offset of field: acpi_viot_virtio_iommu_mmio::Header"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_mmio, Header) - 0usize];
    ["Offset of field: acpi_viot_virtio_iommu_mmio::Reserved"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_mmio, Reserved) - 4usize];
    ["Offset of field: acpi_viot_virtio_iommu_mmio::BaseAddress"]
        [::core::mem::offset_of!(acpi_viot_virtio_iommu_mmio, BaseAddress) - 8usize];
};
pub type ACPI_VIOT_VIRTIO_IOMMU_MMIO = acpi_viot_virtio_iommu_mmio;
#[doc = " WAET - Windows ACPI Emulated devices Table\n        Version 1\n\n Conforms to \"Windows ACPI Emulated Devices Table\", version 1.0, April 6, 2009\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_waet {
    pub Header: ACPI_TABLE_HEADER,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_waet"][::core::mem::size_of::<acpi_table_waet>() - 40usize];
    ["Alignment of acpi_table_waet"][::core::mem::align_of::<acpi_table_waet>() - 1usize];
    ["Offset of field: acpi_table_waet::Header"]
        [::core::mem::offset_of!(acpi_table_waet, Header) - 0usize];
    ["Offset of field: acpi_table_waet::Flags"]
        [::core::mem::offset_of!(acpi_table_waet, Flags) - 36usize];
};
#[doc = " WAET - Windows ACPI Emulated devices Table\n        Version 1\n\n Conforms to \"Windows ACPI Emulated Devices Table\", version 1.0, April 6, 2009\n"]
pub type ACPI_TABLE_WAET = acpi_table_waet;
#[doc = " WDAT - Watchdog Action Table\n        Version 1\n\n Conforms to \"Hardware Watchdog Timers Design Specification\",\n Copyright 2006 Microsoft Corporation.\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wdat {
    pub Header: ACPI_TABLE_HEADER,
    pub HeaderLength: UINT32,
    pub PciSegment: UINT16,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub TimerPeriod: UINT32,
    pub MaxCount: UINT32,
    pub MinCount: UINT32,
    pub Flags: UINT8,
    pub Reserved2: [UINT8; 3usize],
    pub Entries: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_wdat"][::core::mem::size_of::<acpi_table_wdat>() - 68usize];
    ["Alignment of acpi_table_wdat"][::core::mem::align_of::<acpi_table_wdat>() - 1usize];
    ["Offset of field: acpi_table_wdat::Header"]
        [::core::mem::offset_of!(acpi_table_wdat, Header) - 0usize];
    ["Offset of field: acpi_table_wdat::HeaderLength"]
        [::core::mem::offset_of!(acpi_table_wdat, HeaderLength) - 36usize];
    ["Offset of field: acpi_table_wdat::PciSegment"]
        [::core::mem::offset_of!(acpi_table_wdat, PciSegment) - 40usize];
    ["Offset of field: acpi_table_wdat::PciBus"]
        [::core::mem::offset_of!(acpi_table_wdat, PciBus) - 42usize];
    ["Offset of field: acpi_table_wdat::PciDevice"]
        [::core::mem::offset_of!(acpi_table_wdat, PciDevice) - 43usize];
    ["Offset of field: acpi_table_wdat::PciFunction"]
        [::core::mem::offset_of!(acpi_table_wdat, PciFunction) - 44usize];
    ["Offset of field: acpi_table_wdat::Reserved"]
        [::core::mem::offset_of!(acpi_table_wdat, Reserved) - 45usize];
    ["Offset of field: acpi_table_wdat::TimerPeriod"]
        [::core::mem::offset_of!(acpi_table_wdat, TimerPeriod) - 48usize];
    ["Offset of field: acpi_table_wdat::MaxCount"]
        [::core::mem::offset_of!(acpi_table_wdat, MaxCount) - 52usize];
    ["Offset of field: acpi_table_wdat::MinCount"]
        [::core::mem::offset_of!(acpi_table_wdat, MinCount) - 56usize];
    ["Offset of field: acpi_table_wdat::Flags"]
        [::core::mem::offset_of!(acpi_table_wdat, Flags) - 60usize];
    ["Offset of field: acpi_table_wdat::Reserved2"]
        [::core::mem::offset_of!(acpi_table_wdat, Reserved2) - 61usize];
    ["Offset of field: acpi_table_wdat::Entries"]
        [::core::mem::offset_of!(acpi_table_wdat, Entries) - 64usize];
};
#[doc = " WDAT - Watchdog Action Table\n        Version 1\n\n Conforms to \"Hardware Watchdog Timers Design Specification\",\n Copyright 2006 Microsoft Corporation.\n"]
pub type ACPI_TABLE_WDAT = acpi_table_wdat;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_wdat_entry {
    pub Action: UINT8,
    pub Instruction: UINT8,
    pub Reserved: UINT16,
    pub RegisterRegion: ACPI_GENERIC_ADDRESS,
    pub Value: UINT32,
    pub Mask: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_wdat_entry"][::core::mem::size_of::<acpi_wdat_entry>() - 24usize];
    ["Alignment of acpi_wdat_entry"][::core::mem::align_of::<acpi_wdat_entry>() - 1usize];
    ["Offset of field: acpi_wdat_entry::Action"]
        [::core::mem::offset_of!(acpi_wdat_entry, Action) - 0usize];
    ["Offset of field: acpi_wdat_entry::Instruction"]
        [::core::mem::offset_of!(acpi_wdat_entry, Instruction) - 1usize];
    ["Offset of field: acpi_wdat_entry::Reserved"]
        [::core::mem::offset_of!(acpi_wdat_entry, Reserved) - 2usize];
    ["Offset of field: acpi_wdat_entry::RegisterRegion"]
        [::core::mem::offset_of!(acpi_wdat_entry, RegisterRegion) - 4usize];
    ["Offset of field: acpi_wdat_entry::Value"]
        [::core::mem::offset_of!(acpi_wdat_entry, Value) - 16usize];
    ["Offset of field: acpi_wdat_entry::Mask"]
        [::core::mem::offset_of!(acpi_wdat_entry, Mask) - 20usize];
};
pub type ACPI_WDAT_ENTRY = acpi_wdat_entry;
pub const AcpiWdatActions_ACPI_WDAT_RESET: AcpiWdatActions = 1;
pub const AcpiWdatActions_ACPI_WDAT_GET_CURRENT_COUNTDOWN: AcpiWdatActions = 4;
pub const AcpiWdatActions_ACPI_WDAT_GET_COUNTDOWN: AcpiWdatActions = 5;
pub const AcpiWdatActions_ACPI_WDAT_SET_COUNTDOWN: AcpiWdatActions = 6;
pub const AcpiWdatActions_ACPI_WDAT_GET_RUNNING_STATE: AcpiWdatActions = 8;
pub const AcpiWdatActions_ACPI_WDAT_SET_RUNNING_STATE: AcpiWdatActions = 9;
pub const AcpiWdatActions_ACPI_WDAT_GET_STOPPED_STATE: AcpiWdatActions = 10;
pub const AcpiWdatActions_ACPI_WDAT_SET_STOPPED_STATE: AcpiWdatActions = 11;
pub const AcpiWdatActions_ACPI_WDAT_GET_REBOOT: AcpiWdatActions = 16;
pub const AcpiWdatActions_ACPI_WDAT_SET_REBOOT: AcpiWdatActions = 17;
pub const AcpiWdatActions_ACPI_WDAT_GET_SHUTDOWN: AcpiWdatActions = 18;
pub const AcpiWdatActions_ACPI_WDAT_SET_SHUTDOWN: AcpiWdatActions = 19;
pub const AcpiWdatActions_ACPI_WDAT_GET_STATUS: AcpiWdatActions = 32;
pub const AcpiWdatActions_ACPI_WDAT_SET_STATUS: AcpiWdatActions = 33;
pub const AcpiWdatActions_ACPI_WDAT_ACTION_RESERVED: AcpiWdatActions = 34;
pub type AcpiWdatActions = ::core::ffi::c_uint;
pub const AcpiWdatInstructions_ACPI_WDAT_READ_VALUE: AcpiWdatInstructions = 0;
pub const AcpiWdatInstructions_ACPI_WDAT_READ_COUNTDOWN: AcpiWdatInstructions = 1;
pub const AcpiWdatInstructions_ACPI_WDAT_WRITE_VALUE: AcpiWdatInstructions = 2;
pub const AcpiWdatInstructions_ACPI_WDAT_WRITE_COUNTDOWN: AcpiWdatInstructions = 3;
pub const AcpiWdatInstructions_ACPI_WDAT_INSTRUCTION_RESERVED: AcpiWdatInstructions = 4;
pub const AcpiWdatInstructions_ACPI_WDAT_PRESERVE_REGISTER: AcpiWdatInstructions = 128;
pub type AcpiWdatInstructions = ::core::ffi::c_uint;
#[doc = " WDDT - Watchdog Descriptor Table\n        Version 1\n\n Conforms to \"Using the Intel ICH Family Watchdog Timer (WDT)\",\n Version 001, September 2002\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wddt {
    pub Header: ACPI_TABLE_HEADER,
    pub SpecVersion: UINT16,
    pub TableVersion: UINT16,
    pub PciVendorId: UINT16,
    pub Address: ACPI_GENERIC_ADDRESS,
    pub MaxCount: UINT16,
    pub MinCount: UINT16,
    pub Period: UINT16,
    pub Status: UINT16,
    pub Capability: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_wddt"][::core::mem::size_of::<acpi_table_wddt>() - 64usize];
    ["Alignment of acpi_table_wddt"][::core::mem::align_of::<acpi_table_wddt>() - 1usize];
    ["Offset of field: acpi_table_wddt::Header"]
        [::core::mem::offset_of!(acpi_table_wddt, Header) - 0usize];
    ["Offset of field: acpi_table_wddt::SpecVersion"]
        [::core::mem::offset_of!(acpi_table_wddt, SpecVersion) - 36usize];
    ["Offset of field: acpi_table_wddt::TableVersion"]
        [::core::mem::offset_of!(acpi_table_wddt, TableVersion) - 38usize];
    ["Offset of field: acpi_table_wddt::PciVendorId"]
        [::core::mem::offset_of!(acpi_table_wddt, PciVendorId) - 40usize];
    ["Offset of field: acpi_table_wddt::Address"]
        [::core::mem::offset_of!(acpi_table_wddt, Address) - 42usize];
    ["Offset of field: acpi_table_wddt::MaxCount"]
        [::core::mem::offset_of!(acpi_table_wddt, MaxCount) - 54usize];
    ["Offset of field: acpi_table_wddt::MinCount"]
        [::core::mem::offset_of!(acpi_table_wddt, MinCount) - 56usize];
    ["Offset of field: acpi_table_wddt::Period"]
        [::core::mem::offset_of!(acpi_table_wddt, Period) - 58usize];
    ["Offset of field: acpi_table_wddt::Status"]
        [::core::mem::offset_of!(acpi_table_wddt, Status) - 60usize];
    ["Offset of field: acpi_table_wddt::Capability"]
        [::core::mem::offset_of!(acpi_table_wddt, Capability) - 62usize];
};
#[doc = " WDDT - Watchdog Descriptor Table\n        Version 1\n\n Conforms to \"Using the Intel ICH Family Watchdog Timer (WDT)\",\n Version 001, September 2002\n"]
pub type ACPI_TABLE_WDDT = acpi_table_wddt;
#[doc = " WDRT - Watchdog Resource Table\n        Version 1\n\n Conforms to \"Watchdog Timer Hardware Requirements for Windows Server 2003\",\n Version 1.01, August 28, 2006\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wdrt {
    pub Header: ACPI_TABLE_HEADER,
    pub ControlRegister: ACPI_GENERIC_ADDRESS,
    pub CountRegister: ACPI_GENERIC_ADDRESS,
    pub PciDeviceId: UINT16,
    pub PciVendorId: UINT16,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub PciSegment: UINT8,
    pub MaxCount: UINT16,
    pub Units: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_wdrt"][::core::mem::size_of::<acpi_table_wdrt>() - 71usize];
    ["Alignment of acpi_table_wdrt"][::core::mem::align_of::<acpi_table_wdrt>() - 1usize];
    ["Offset of field: acpi_table_wdrt::Header"]
        [::core::mem::offset_of!(acpi_table_wdrt, Header) - 0usize];
    ["Offset of field: acpi_table_wdrt::ControlRegister"]
        [::core::mem::offset_of!(acpi_table_wdrt, ControlRegister) - 36usize];
    ["Offset of field: acpi_table_wdrt::CountRegister"]
        [::core::mem::offset_of!(acpi_table_wdrt, CountRegister) - 48usize];
    ["Offset of field: acpi_table_wdrt::PciDeviceId"]
        [::core::mem::offset_of!(acpi_table_wdrt, PciDeviceId) - 60usize];
    ["Offset of field: acpi_table_wdrt::PciVendorId"]
        [::core::mem::offset_of!(acpi_table_wdrt, PciVendorId) - 62usize];
    ["Offset of field: acpi_table_wdrt::PciBus"]
        [::core::mem::offset_of!(acpi_table_wdrt, PciBus) - 64usize];
    ["Offset of field: acpi_table_wdrt::PciDevice"]
        [::core::mem::offset_of!(acpi_table_wdrt, PciDevice) - 65usize];
    ["Offset of field: acpi_table_wdrt::PciFunction"]
        [::core::mem::offset_of!(acpi_table_wdrt, PciFunction) - 66usize];
    ["Offset of field: acpi_table_wdrt::PciSegment"]
        [::core::mem::offset_of!(acpi_table_wdrt, PciSegment) - 67usize];
    ["Offset of field: acpi_table_wdrt::MaxCount"]
        [::core::mem::offset_of!(acpi_table_wdrt, MaxCount) - 68usize];
    ["Offset of field: acpi_table_wdrt::Units"]
        [::core::mem::offset_of!(acpi_table_wdrt, Units) - 70usize];
};
#[doc = " WDRT - Watchdog Resource Table\n        Version 1\n\n Conforms to \"Watchdog Timer Hardware Requirements for Windows Server 2003\",\n Version 1.01, August 28, 2006\n"]
pub type ACPI_TABLE_WDRT = acpi_table_wdrt;
#[doc = " WPBT - Windows Platform Environment Table (ACPI 6.0)\n        Version 1\n\n Conforms to \"Windows Platform Binary Table (WPBT)\" 29 November 2011\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wpbt {
    pub Header: ACPI_TABLE_HEADER,
    pub HandoffSize: UINT32,
    pub HandoffAddress: UINT64,
    pub Layout: UINT8,
    pub Type: UINT8,
    pub ArgumentsLength: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_wpbt"][::core::mem::size_of::<acpi_table_wpbt>() - 52usize];
    ["Alignment of acpi_table_wpbt"][::core::mem::align_of::<acpi_table_wpbt>() - 1usize];
    ["Offset of field: acpi_table_wpbt::Header"]
        [::core::mem::offset_of!(acpi_table_wpbt, Header) - 0usize];
    ["Offset of field: acpi_table_wpbt::HandoffSize"]
        [::core::mem::offset_of!(acpi_table_wpbt, HandoffSize) - 36usize];
    ["Offset of field: acpi_table_wpbt::HandoffAddress"]
        [::core::mem::offset_of!(acpi_table_wpbt, HandoffAddress) - 40usize];
    ["Offset of field: acpi_table_wpbt::Layout"]
        [::core::mem::offset_of!(acpi_table_wpbt, Layout) - 48usize];
    ["Offset of field: acpi_table_wpbt::Type"]
        [::core::mem::offset_of!(acpi_table_wpbt, Type) - 49usize];
    ["Offset of field: acpi_table_wpbt::ArgumentsLength"]
        [::core::mem::offset_of!(acpi_table_wpbt, ArgumentsLength) - 50usize];
};
#[doc = " WPBT - Windows Platform Environment Table (ACPI 6.0)\n        Version 1\n\n Conforms to \"Windows Platform Binary Table (WPBT)\" 29 November 2011\n"]
pub type ACPI_TABLE_WPBT = acpi_table_wpbt;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_wpbt_unicode {
    pub UnicodeString: *mut UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_wpbt_unicode"][::core::mem::size_of::<acpi_wpbt_unicode>() - 8usize];
    ["Alignment of acpi_wpbt_unicode"][::core::mem::align_of::<acpi_wpbt_unicode>() - 1usize];
    ["Offset of field: acpi_wpbt_unicode::UnicodeString"]
        [::core::mem::offset_of!(acpi_wpbt_unicode, UnicodeString) - 0usize];
};
pub type ACPI_WPBT_UNICODE = acpi_wpbt_unicode;
#[doc = " WSMT - Windows SMM Security Mitigations Table\n        Version 1\n\n Conforms to \"Windows SMM Security Mitigations Table\",\n Version 1.0, April 18, 2016\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wsmt {
    pub Header: ACPI_TABLE_HEADER,
    pub ProtectionFlags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_wsmt"][::core::mem::size_of::<acpi_table_wsmt>() - 40usize];
    ["Alignment of acpi_table_wsmt"][::core::mem::align_of::<acpi_table_wsmt>() - 1usize];
    ["Offset of field: acpi_table_wsmt::Header"]
        [::core::mem::offset_of!(acpi_table_wsmt, Header) - 0usize];
    ["Offset of field: acpi_table_wsmt::ProtectionFlags"]
        [::core::mem::offset_of!(acpi_table_wsmt, ProtectionFlags) - 36usize];
};
#[doc = " WSMT - Windows SMM Security Mitigations Table\n        Version 1\n\n Conforms to \"Windows SMM Security Mitigations Table\",\n Version 1.0, April 18, 2016\n"]
pub type ACPI_TABLE_WSMT = acpi_table_wsmt;
#[doc = " XENV - Xen Environment Table (ACPI 6.0)\n        Version 1\n\n Conforms to \"ACPI Specification for Xen Environment Table\" 4 January 2015\n"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_xenv {
    pub Header: ACPI_TABLE_HEADER,
    pub GrantTableAddress: UINT64,
    pub GrantTableSize: UINT64,
    pub EventInterrupt: UINT32,
    pub EventFlags: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_table_xenv"][::core::mem::size_of::<acpi_table_xenv>() - 57usize];
    ["Alignment of acpi_table_xenv"][::core::mem::align_of::<acpi_table_xenv>() - 1usize];
    ["Offset of field: acpi_table_xenv::Header"]
        [::core::mem::offset_of!(acpi_table_xenv, Header) - 0usize];
    ["Offset of field: acpi_table_xenv::GrantTableAddress"]
        [::core::mem::offset_of!(acpi_table_xenv, GrantTableAddress) - 36usize];
    ["Offset of field: acpi_table_xenv::GrantTableSize"]
        [::core::mem::offset_of!(acpi_table_xenv, GrantTableSize) - 44usize];
    ["Offset of field: acpi_table_xenv::EventInterrupt"]
        [::core::mem::offset_of!(acpi_table_xenv, EventInterrupt) - 52usize];
    ["Offset of field: acpi_table_xenv::EventFlags"]
        [::core::mem::offset_of!(acpi_table_xenv, EventFlags) - 56usize];
};
#[doc = " XENV - Xen Environment Table (ACPI 6.0)\n        Version 1\n\n Conforms to \"ACPI Specification for Xen Environment Table\" 4 January 2015\n"]
pub type ACPI_TABLE_XENV = acpi_table_xenv;
pub type ACPI_RS_LENGTH = UINT16;
pub type ACPI_RSDESC_SIZE = UINT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_uuid {
    pub Data: [UINT8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_uuid"][::core::mem::size_of::<acpi_uuid>() - 16usize];
    ["Alignment of acpi_uuid"][::core::mem::align_of::<acpi_uuid>() - 1usize];
    ["Offset of field: acpi_uuid::Data"][::core::mem::offset_of!(acpi_uuid, Data) - 0usize];
};
pub type ACPI_UUID = acpi_uuid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_vendor_uuid {
    pub Subtype: UINT8,
    pub Data: [UINT8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_vendor_uuid"][::core::mem::size_of::<acpi_vendor_uuid>() - 17usize];
    ["Alignment of acpi_vendor_uuid"][::core::mem::align_of::<acpi_vendor_uuid>() - 1usize];
    ["Offset of field: acpi_vendor_uuid::Subtype"]
        [::core::mem::offset_of!(acpi_vendor_uuid, Subtype) - 0usize];
    ["Offset of field: acpi_vendor_uuid::Data"]
        [::core::mem::offset_of!(acpi_vendor_uuid, Data) - 1usize];
};
pub type ACPI_VENDOR_UUID = acpi_vendor_uuid;
#[repr(C)]
pub struct acpi_resource_irq {
    pub DescriptorLength: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub InterruptCount: UINT8,
    pub __bindgen_anon_1: acpi_resource_irq__bindgen_ty_1,
}
#[repr(C)]
pub struct acpi_resource_irq__bindgen_ty_1 {
    pub Interrupt: __BindgenUnionField<UINT8>,
    pub __bindgen_anon_1: __BindgenUnionField<acpi_resource_irq__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct acpi_resource_irq__bindgen_ty_1__bindgen_ty_1 {
    pub __Empty_Interrupts: acpi_resource_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub Interrupts: __IncompleteArrayField<UINT8>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        acpi_resource_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 0usize];
    ["Alignment of acpi_resource_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_irq__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_resource_irq__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_resource_irq__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_irq__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_resource_irq__bindgen_ty_1__bindgen_ty_1::__Empty_Interrupts"][::core::mem::offset_of!(
        acpi_resource_irq__bindgen_ty_1__bindgen_ty_1,
        __Empty_Interrupts
    )
        - 0usize];
    ["Offset of field: acpi_resource_irq__bindgen_ty_1__bindgen_ty_1::Interrupts"][::core::mem::offset_of!(
        acpi_resource_irq__bindgen_ty_1__bindgen_ty_1,
        Interrupts
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_irq__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_resource_irq__bindgen_ty_1>() - 1usize];
    ["Alignment of acpi_resource_irq__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_irq__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_resource_irq__bindgen_ty_1::Interrupt"]
        [::core::mem::offset_of!(acpi_resource_irq__bindgen_ty_1, Interrupt) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_irq"][::core::mem::size_of::<acpi_resource_irq>() - 7usize];
    ["Alignment of acpi_resource_irq"][::core::mem::align_of::<acpi_resource_irq>() - 1usize];
    ["Offset of field: acpi_resource_irq::DescriptorLength"]
        [::core::mem::offset_of!(acpi_resource_irq, DescriptorLength) - 0usize];
    ["Offset of field: acpi_resource_irq::Triggering"]
        [::core::mem::offset_of!(acpi_resource_irq, Triggering) - 1usize];
    ["Offset of field: acpi_resource_irq::Polarity"]
        [::core::mem::offset_of!(acpi_resource_irq, Polarity) - 2usize];
    ["Offset of field: acpi_resource_irq::Shareable"]
        [::core::mem::offset_of!(acpi_resource_irq, Shareable) - 3usize];
    ["Offset of field: acpi_resource_irq::WakeCapable"]
        [::core::mem::offset_of!(acpi_resource_irq, WakeCapable) - 4usize];
    ["Offset of field: acpi_resource_irq::InterruptCount"]
        [::core::mem::offset_of!(acpi_resource_irq, InterruptCount) - 5usize];
};
pub type ACPI_RESOURCE_IRQ = acpi_resource_irq;
#[repr(C)]
pub struct acpi_resource_dma {
    pub Type: UINT8,
    pub BusMaster: UINT8,
    pub Transfer: UINT8,
    pub ChannelCount: UINT8,
    pub __bindgen_anon_1: acpi_resource_dma__bindgen_ty_1,
}
#[repr(C)]
pub struct acpi_resource_dma__bindgen_ty_1 {
    pub Channel: __BindgenUnionField<UINT8>,
    pub __bindgen_anon_1: __BindgenUnionField<acpi_resource_dma__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct acpi_resource_dma__bindgen_ty_1__bindgen_ty_1 {
    pub __Empty_Channels: acpi_resource_dma__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub Channels: __IncompleteArrayField<UINT8>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_dma__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_dma__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        acpi_resource_dma__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 0usize];
    ["Alignment of acpi_resource_dma__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_dma__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_dma__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_resource_dma__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_resource_dma__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_dma__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_resource_dma__bindgen_ty_1__bindgen_ty_1::__Empty_Channels"][::core::mem::offset_of!(
        acpi_resource_dma__bindgen_ty_1__bindgen_ty_1,
        __Empty_Channels
    )
        - 0usize];
    ["Offset of field: acpi_resource_dma__bindgen_ty_1__bindgen_ty_1::Channels"]
        [::core::mem::offset_of!(acpi_resource_dma__bindgen_ty_1__bindgen_ty_1, Channels) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_dma__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_resource_dma__bindgen_ty_1>() - 1usize];
    ["Alignment of acpi_resource_dma__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_dma__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_resource_dma__bindgen_ty_1::Channel"]
        [::core::mem::offset_of!(acpi_resource_dma__bindgen_ty_1, Channel) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_dma"][::core::mem::size_of::<acpi_resource_dma>() - 5usize];
    ["Alignment of acpi_resource_dma"][::core::mem::align_of::<acpi_resource_dma>() - 1usize];
    ["Offset of field: acpi_resource_dma::Type"]
        [::core::mem::offset_of!(acpi_resource_dma, Type) - 0usize];
    ["Offset of field: acpi_resource_dma::BusMaster"]
        [::core::mem::offset_of!(acpi_resource_dma, BusMaster) - 1usize];
    ["Offset of field: acpi_resource_dma::Transfer"]
        [::core::mem::offset_of!(acpi_resource_dma, Transfer) - 2usize];
    ["Offset of field: acpi_resource_dma::ChannelCount"]
        [::core::mem::offset_of!(acpi_resource_dma, ChannelCount) - 3usize];
};
pub type ACPI_RESOURCE_DMA = acpi_resource_dma;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_start_dependent {
    pub DescriptorLength: UINT8,
    pub CompatibilityPriority: UINT8,
    pub PerformanceRobustness: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_start_dependent"]
        [::core::mem::size_of::<acpi_resource_start_dependent>() - 3usize];
    ["Alignment of acpi_resource_start_dependent"]
        [::core::mem::align_of::<acpi_resource_start_dependent>() - 1usize];
    ["Offset of field: acpi_resource_start_dependent::DescriptorLength"]
        [::core::mem::offset_of!(acpi_resource_start_dependent, DescriptorLength) - 0usize];
    ["Offset of field: acpi_resource_start_dependent::CompatibilityPriority"]
        [::core::mem::offset_of!(acpi_resource_start_dependent, CompatibilityPriority) - 1usize];
    ["Offset of field: acpi_resource_start_dependent::PerformanceRobustness"]
        [::core::mem::offset_of!(acpi_resource_start_dependent, PerformanceRobustness) - 2usize];
};
pub type ACPI_RESOURCE_START_DEPENDENT = acpi_resource_start_dependent;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_io {
    pub IoDecode: UINT8,
    pub Alignment: UINT8,
    pub AddressLength: UINT8,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_io"][::core::mem::size_of::<acpi_resource_io>() - 7usize];
    ["Alignment of acpi_resource_io"][::core::mem::align_of::<acpi_resource_io>() - 1usize];
    ["Offset of field: acpi_resource_io::IoDecode"]
        [::core::mem::offset_of!(acpi_resource_io, IoDecode) - 0usize];
    ["Offset of field: acpi_resource_io::Alignment"]
        [::core::mem::offset_of!(acpi_resource_io, Alignment) - 1usize];
    ["Offset of field: acpi_resource_io::AddressLength"]
        [::core::mem::offset_of!(acpi_resource_io, AddressLength) - 2usize];
    ["Offset of field: acpi_resource_io::Minimum"]
        [::core::mem::offset_of!(acpi_resource_io, Minimum) - 3usize];
    ["Offset of field: acpi_resource_io::Maximum"]
        [::core::mem::offset_of!(acpi_resource_io, Maximum) - 5usize];
};
pub type ACPI_RESOURCE_IO = acpi_resource_io;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_io {
    pub Address: UINT16,
    pub AddressLength: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_fixed_io"][::core::mem::size_of::<acpi_resource_fixed_io>() - 3usize];
    ["Alignment of acpi_resource_fixed_io"]
        [::core::mem::align_of::<acpi_resource_fixed_io>() - 1usize];
    ["Offset of field: acpi_resource_fixed_io::Address"]
        [::core::mem::offset_of!(acpi_resource_fixed_io, Address) - 0usize];
    ["Offset of field: acpi_resource_fixed_io::AddressLength"]
        [::core::mem::offset_of!(acpi_resource_fixed_io, AddressLength) - 2usize];
};
pub type ACPI_RESOURCE_FIXED_IO = acpi_resource_fixed_io;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_dma {
    pub RequestLines: UINT16,
    pub Channels: UINT16,
    pub Width: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_fixed_dma"][::core::mem::size_of::<acpi_resource_fixed_dma>() - 5usize];
    ["Alignment of acpi_resource_fixed_dma"]
        [::core::mem::align_of::<acpi_resource_fixed_dma>() - 1usize];
    ["Offset of field: acpi_resource_fixed_dma::RequestLines"]
        [::core::mem::offset_of!(acpi_resource_fixed_dma, RequestLines) - 0usize];
    ["Offset of field: acpi_resource_fixed_dma::Channels"]
        [::core::mem::offset_of!(acpi_resource_fixed_dma, Channels) - 2usize];
    ["Offset of field: acpi_resource_fixed_dma::Width"]
        [::core::mem::offset_of!(acpi_resource_fixed_dma, Width) - 4usize];
};
pub type ACPI_RESOURCE_FIXED_DMA = acpi_resource_fixed_dma;
#[repr(C, packed)]
pub struct acpi_resource_vendor {
    pub ByteLength: UINT16,
    pub ByteData: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_vendor"][::core::mem::size_of::<acpi_resource_vendor>() - 2usize];
    ["Alignment of acpi_resource_vendor"][::core::mem::align_of::<acpi_resource_vendor>() - 1usize];
    ["Offset of field: acpi_resource_vendor::ByteLength"]
        [::core::mem::offset_of!(acpi_resource_vendor, ByteLength) - 0usize];
    ["Offset of field: acpi_resource_vendor::ByteData"]
        [::core::mem::offset_of!(acpi_resource_vendor, ByteData) - 2usize];
};
pub type ACPI_RESOURCE_VENDOR = acpi_resource_vendor;
#[repr(C, packed)]
pub struct acpi_resource_vendor_typed {
    pub ByteLength: UINT16,
    pub UuidSubtype: UINT8,
    pub Uuid: [UINT8; 16usize],
    pub ByteData: __IncompleteArrayField<UINT8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_vendor_typed"]
        [::core::mem::size_of::<acpi_resource_vendor_typed>() - 19usize];
    ["Alignment of acpi_resource_vendor_typed"]
        [::core::mem::align_of::<acpi_resource_vendor_typed>() - 1usize];
    ["Offset of field: acpi_resource_vendor_typed::ByteLength"]
        [::core::mem::offset_of!(acpi_resource_vendor_typed, ByteLength) - 0usize];
    ["Offset of field: acpi_resource_vendor_typed::UuidSubtype"]
        [::core::mem::offset_of!(acpi_resource_vendor_typed, UuidSubtype) - 2usize];
    ["Offset of field: acpi_resource_vendor_typed::Uuid"]
        [::core::mem::offset_of!(acpi_resource_vendor_typed, Uuid) - 3usize];
    ["Offset of field: acpi_resource_vendor_typed::ByteData"]
        [::core::mem::offset_of!(acpi_resource_vendor_typed, ByteData) - 19usize];
};
pub type ACPI_RESOURCE_VENDOR_TYPED = acpi_resource_vendor_typed;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_end_tag {
    pub Checksum: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_end_tag"][::core::mem::size_of::<acpi_resource_end_tag>() - 1usize];
    ["Alignment of acpi_resource_end_tag"]
        [::core::mem::align_of::<acpi_resource_end_tag>() - 1usize];
    ["Offset of field: acpi_resource_end_tag::Checksum"]
        [::core::mem::offset_of!(acpi_resource_end_tag, Checksum) - 0usize];
};
pub type ACPI_RESOURCE_END_TAG = acpi_resource_end_tag;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_memory24 {
    pub WriteProtect: UINT8,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
    pub Alignment: UINT16,
    pub AddressLength: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_memory24"][::core::mem::size_of::<acpi_resource_memory24>() - 9usize];
    ["Alignment of acpi_resource_memory24"]
        [::core::mem::align_of::<acpi_resource_memory24>() - 1usize];
    ["Offset of field: acpi_resource_memory24::WriteProtect"]
        [::core::mem::offset_of!(acpi_resource_memory24, WriteProtect) - 0usize];
    ["Offset of field: acpi_resource_memory24::Minimum"]
        [::core::mem::offset_of!(acpi_resource_memory24, Minimum) - 1usize];
    ["Offset of field: acpi_resource_memory24::Maximum"]
        [::core::mem::offset_of!(acpi_resource_memory24, Maximum) - 3usize];
    ["Offset of field: acpi_resource_memory24::Alignment"]
        [::core::mem::offset_of!(acpi_resource_memory24, Alignment) - 5usize];
    ["Offset of field: acpi_resource_memory24::AddressLength"]
        [::core::mem::offset_of!(acpi_resource_memory24, AddressLength) - 7usize];
};
pub type ACPI_RESOURCE_MEMORY24 = acpi_resource_memory24;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_memory32 {
    pub WriteProtect: UINT8,
    pub Minimum: UINT32,
    pub Maximum: UINT32,
    pub Alignment: UINT32,
    pub AddressLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_memory32"][::core::mem::size_of::<acpi_resource_memory32>() - 17usize];
    ["Alignment of acpi_resource_memory32"]
        [::core::mem::align_of::<acpi_resource_memory32>() - 1usize];
    ["Offset of field: acpi_resource_memory32::WriteProtect"]
        [::core::mem::offset_of!(acpi_resource_memory32, WriteProtect) - 0usize];
    ["Offset of field: acpi_resource_memory32::Minimum"]
        [::core::mem::offset_of!(acpi_resource_memory32, Minimum) - 1usize];
    ["Offset of field: acpi_resource_memory32::Maximum"]
        [::core::mem::offset_of!(acpi_resource_memory32, Maximum) - 5usize];
    ["Offset of field: acpi_resource_memory32::Alignment"]
        [::core::mem::offset_of!(acpi_resource_memory32, Alignment) - 9usize];
    ["Offset of field: acpi_resource_memory32::AddressLength"]
        [::core::mem::offset_of!(acpi_resource_memory32, AddressLength) - 13usize];
};
pub type ACPI_RESOURCE_MEMORY32 = acpi_resource_memory32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_memory32 {
    pub WriteProtect: UINT8,
    pub Address: UINT32,
    pub AddressLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_fixed_memory32"]
        [::core::mem::size_of::<acpi_resource_fixed_memory32>() - 9usize];
    ["Alignment of acpi_resource_fixed_memory32"]
        [::core::mem::align_of::<acpi_resource_fixed_memory32>() - 1usize];
    ["Offset of field: acpi_resource_fixed_memory32::WriteProtect"]
        [::core::mem::offset_of!(acpi_resource_fixed_memory32, WriteProtect) - 0usize];
    ["Offset of field: acpi_resource_fixed_memory32::Address"]
        [::core::mem::offset_of!(acpi_resource_fixed_memory32, Address) - 1usize];
    ["Offset of field: acpi_resource_fixed_memory32::AddressLength"]
        [::core::mem::offset_of!(acpi_resource_fixed_memory32, AddressLength) - 5usize];
};
pub type ACPI_RESOURCE_FIXED_MEMORY32 = acpi_resource_fixed_memory32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_memory_attribute {
    pub WriteProtect: UINT8,
    pub Caching: UINT8,
    pub RangeType: UINT8,
    pub Translation: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_memory_attribute"][::core::mem::size_of::<acpi_memory_attribute>() - 4usize];
    ["Alignment of acpi_memory_attribute"]
        [::core::mem::align_of::<acpi_memory_attribute>() - 1usize];
    ["Offset of field: acpi_memory_attribute::WriteProtect"]
        [::core::mem::offset_of!(acpi_memory_attribute, WriteProtect) - 0usize];
    ["Offset of field: acpi_memory_attribute::Caching"]
        [::core::mem::offset_of!(acpi_memory_attribute, Caching) - 1usize];
    ["Offset of field: acpi_memory_attribute::RangeType"]
        [::core::mem::offset_of!(acpi_memory_attribute, RangeType) - 2usize];
    ["Offset of field: acpi_memory_attribute::Translation"]
        [::core::mem::offset_of!(acpi_memory_attribute, Translation) - 3usize];
};
pub type ACPI_MEMORY_ATTRIBUTE = acpi_memory_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_io_attribute {
    pub RangeType: UINT8,
    pub Translation: UINT8,
    pub TranslationType: UINT8,
    pub Reserved1: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_io_attribute"][::core::mem::size_of::<acpi_io_attribute>() - 4usize];
    ["Alignment of acpi_io_attribute"][::core::mem::align_of::<acpi_io_attribute>() - 1usize];
    ["Offset of field: acpi_io_attribute::RangeType"]
        [::core::mem::offset_of!(acpi_io_attribute, RangeType) - 0usize];
    ["Offset of field: acpi_io_attribute::Translation"]
        [::core::mem::offset_of!(acpi_io_attribute, Translation) - 1usize];
    ["Offset of field: acpi_io_attribute::TranslationType"]
        [::core::mem::offset_of!(acpi_io_attribute, TranslationType) - 2usize];
    ["Offset of field: acpi_io_attribute::Reserved1"]
        [::core::mem::offset_of!(acpi_io_attribute, Reserved1) - 3usize];
};
pub type ACPI_IO_ATTRIBUTE = acpi_io_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_resource_attribute {
    pub Mem: ACPI_MEMORY_ATTRIBUTE,
    pub Io: ACPI_IO_ATTRIBUTE,
    pub TypeSpecific: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_attribute"][::core::mem::size_of::<acpi_resource_attribute>() - 4usize];
    ["Alignment of acpi_resource_attribute"]
        [::core::mem::align_of::<acpi_resource_attribute>() - 1usize];
    ["Offset of field: acpi_resource_attribute::Mem"]
        [::core::mem::offset_of!(acpi_resource_attribute, Mem) - 0usize];
    ["Offset of field: acpi_resource_attribute::Io"]
        [::core::mem::offset_of!(acpi_resource_attribute, Io) - 0usize];
    ["Offset of field: acpi_resource_attribute::TypeSpecific"]
        [::core::mem::offset_of!(acpi_resource_attribute, TypeSpecific) - 0usize];
};
pub type ACPI_RESOURCE_ATTRIBUTE = acpi_resource_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_label {
    pub StringLength: UINT16,
    pub StringPtr: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_label"][::core::mem::size_of::<acpi_resource_label>() - 10usize];
    ["Alignment of acpi_resource_label"][::core::mem::align_of::<acpi_resource_label>() - 1usize];
    ["Offset of field: acpi_resource_label::StringLength"]
        [::core::mem::offset_of!(acpi_resource_label, StringLength) - 0usize];
    ["Offset of field: acpi_resource_label::StringPtr"]
        [::core::mem::offset_of!(acpi_resource_label, StringPtr) - 2usize];
};
pub type ACPI_RESOURCE_LABEL = acpi_resource_label;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_source {
    pub Index: UINT8,
    pub StringLength: UINT16,
    pub StringPtr: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_source"][::core::mem::size_of::<acpi_resource_source>() - 11usize];
    ["Alignment of acpi_resource_source"][::core::mem::align_of::<acpi_resource_source>() - 1usize];
    ["Offset of field: acpi_resource_source::Index"]
        [::core::mem::offset_of!(acpi_resource_source, Index) - 0usize];
    ["Offset of field: acpi_resource_source::StringLength"]
        [::core::mem::offset_of!(acpi_resource_source, StringLength) - 1usize];
    ["Offset of field: acpi_resource_source::StringPtr"]
        [::core::mem::offset_of!(acpi_resource_source, StringPtr) - 3usize];
};
pub type ACPI_RESOURCE_SOURCE = acpi_resource_source;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address16_attribute {
    pub Granularity: UINT16,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
    pub TranslationOffset: UINT16,
    pub AddressLength: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_address16_attribute"]
        [::core::mem::size_of::<acpi_address16_attribute>() - 10usize];
    ["Alignment of acpi_address16_attribute"]
        [::core::mem::align_of::<acpi_address16_attribute>() - 1usize];
    ["Offset of field: acpi_address16_attribute::Granularity"]
        [::core::mem::offset_of!(acpi_address16_attribute, Granularity) - 0usize];
    ["Offset of field: acpi_address16_attribute::Minimum"]
        [::core::mem::offset_of!(acpi_address16_attribute, Minimum) - 2usize];
    ["Offset of field: acpi_address16_attribute::Maximum"]
        [::core::mem::offset_of!(acpi_address16_attribute, Maximum) - 4usize];
    ["Offset of field: acpi_address16_attribute::TranslationOffset"]
        [::core::mem::offset_of!(acpi_address16_attribute, TranslationOffset) - 6usize];
    ["Offset of field: acpi_address16_attribute::AddressLength"]
        [::core::mem::offset_of!(acpi_address16_attribute, AddressLength) - 8usize];
};
pub type ACPI_ADDRESS16_ATTRIBUTE = acpi_address16_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address32_attribute {
    pub Granularity: UINT32,
    pub Minimum: UINT32,
    pub Maximum: UINT32,
    pub TranslationOffset: UINT32,
    pub AddressLength: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_address32_attribute"]
        [::core::mem::size_of::<acpi_address32_attribute>() - 20usize];
    ["Alignment of acpi_address32_attribute"]
        [::core::mem::align_of::<acpi_address32_attribute>() - 1usize];
    ["Offset of field: acpi_address32_attribute::Granularity"]
        [::core::mem::offset_of!(acpi_address32_attribute, Granularity) - 0usize];
    ["Offset of field: acpi_address32_attribute::Minimum"]
        [::core::mem::offset_of!(acpi_address32_attribute, Minimum) - 4usize];
    ["Offset of field: acpi_address32_attribute::Maximum"]
        [::core::mem::offset_of!(acpi_address32_attribute, Maximum) - 8usize];
    ["Offset of field: acpi_address32_attribute::TranslationOffset"]
        [::core::mem::offset_of!(acpi_address32_attribute, TranslationOffset) - 12usize];
    ["Offset of field: acpi_address32_attribute::AddressLength"]
        [::core::mem::offset_of!(acpi_address32_attribute, AddressLength) - 16usize];
};
pub type ACPI_ADDRESS32_ATTRIBUTE = acpi_address32_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address64_attribute {
    pub Granularity: UINT64,
    pub Minimum: UINT64,
    pub Maximum: UINT64,
    pub TranslationOffset: UINT64,
    pub AddressLength: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_address64_attribute"]
        [::core::mem::size_of::<acpi_address64_attribute>() - 40usize];
    ["Alignment of acpi_address64_attribute"]
        [::core::mem::align_of::<acpi_address64_attribute>() - 1usize];
    ["Offset of field: acpi_address64_attribute::Granularity"]
        [::core::mem::offset_of!(acpi_address64_attribute, Granularity) - 0usize];
    ["Offset of field: acpi_address64_attribute::Minimum"]
        [::core::mem::offset_of!(acpi_address64_attribute, Minimum) - 8usize];
    ["Offset of field: acpi_address64_attribute::Maximum"]
        [::core::mem::offset_of!(acpi_address64_attribute, Maximum) - 16usize];
    ["Offset of field: acpi_address64_attribute::TranslationOffset"]
        [::core::mem::offset_of!(acpi_address64_attribute, TranslationOffset) - 24usize];
    ["Offset of field: acpi_address64_attribute::AddressLength"]
        [::core::mem::offset_of!(acpi_address64_attribute, AddressLength) - 32usize];
};
pub type ACPI_ADDRESS64_ATTRIBUTE = acpi_address64_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_address"][::core::mem::size_of::<acpi_resource_address>() - 9usize];
    ["Alignment of acpi_resource_address"]
        [::core::mem::align_of::<acpi_resource_address>() - 1usize];
    ["Offset of field: acpi_resource_address::ResourceType"]
        [::core::mem::offset_of!(acpi_resource_address, ResourceType) - 0usize];
    ["Offset of field: acpi_resource_address::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_address, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_address::Decode"]
        [::core::mem::offset_of!(acpi_resource_address, Decode) - 2usize];
    ["Offset of field: acpi_resource_address::MinAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address, MinAddressFixed) - 3usize];
    ["Offset of field: acpi_resource_address::MaxAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address, MaxAddressFixed) - 4usize];
    ["Offset of field: acpi_resource_address::Info"]
        [::core::mem::offset_of!(acpi_resource_address, Info) - 5usize];
};
pub type ACPI_RESOURCE_ADDRESS = acpi_resource_address;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address16 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS16_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_address16"]
        [::core::mem::size_of::<acpi_resource_address16>() - 30usize];
    ["Alignment of acpi_resource_address16"]
        [::core::mem::align_of::<acpi_resource_address16>() - 1usize];
    ["Offset of field: acpi_resource_address16::ResourceType"]
        [::core::mem::offset_of!(acpi_resource_address16, ResourceType) - 0usize];
    ["Offset of field: acpi_resource_address16::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_address16, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_address16::Decode"]
        [::core::mem::offset_of!(acpi_resource_address16, Decode) - 2usize];
    ["Offset of field: acpi_resource_address16::MinAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address16, MinAddressFixed) - 3usize];
    ["Offset of field: acpi_resource_address16::MaxAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address16, MaxAddressFixed) - 4usize];
    ["Offset of field: acpi_resource_address16::Info"]
        [::core::mem::offset_of!(acpi_resource_address16, Info) - 5usize];
    ["Offset of field: acpi_resource_address16::Address"]
        [::core::mem::offset_of!(acpi_resource_address16, Address) - 9usize];
    ["Offset of field: acpi_resource_address16::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_address16, ResourceSource) - 19usize];
};
pub type ACPI_RESOURCE_ADDRESS16 = acpi_resource_address16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address32 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS32_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_address32"]
        [::core::mem::size_of::<acpi_resource_address32>() - 40usize];
    ["Alignment of acpi_resource_address32"]
        [::core::mem::align_of::<acpi_resource_address32>() - 1usize];
    ["Offset of field: acpi_resource_address32::ResourceType"]
        [::core::mem::offset_of!(acpi_resource_address32, ResourceType) - 0usize];
    ["Offset of field: acpi_resource_address32::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_address32, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_address32::Decode"]
        [::core::mem::offset_of!(acpi_resource_address32, Decode) - 2usize];
    ["Offset of field: acpi_resource_address32::MinAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address32, MinAddressFixed) - 3usize];
    ["Offset of field: acpi_resource_address32::MaxAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address32, MaxAddressFixed) - 4usize];
    ["Offset of field: acpi_resource_address32::Info"]
        [::core::mem::offset_of!(acpi_resource_address32, Info) - 5usize];
    ["Offset of field: acpi_resource_address32::Address"]
        [::core::mem::offset_of!(acpi_resource_address32, Address) - 9usize];
    ["Offset of field: acpi_resource_address32::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_address32, ResourceSource) - 29usize];
};
pub type ACPI_RESOURCE_ADDRESS32 = acpi_resource_address32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address64 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS64_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_address64"]
        [::core::mem::size_of::<acpi_resource_address64>() - 60usize];
    ["Alignment of acpi_resource_address64"]
        [::core::mem::align_of::<acpi_resource_address64>() - 1usize];
    ["Offset of field: acpi_resource_address64::ResourceType"]
        [::core::mem::offset_of!(acpi_resource_address64, ResourceType) - 0usize];
    ["Offset of field: acpi_resource_address64::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_address64, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_address64::Decode"]
        [::core::mem::offset_of!(acpi_resource_address64, Decode) - 2usize];
    ["Offset of field: acpi_resource_address64::MinAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address64, MinAddressFixed) - 3usize];
    ["Offset of field: acpi_resource_address64::MaxAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_address64, MaxAddressFixed) - 4usize];
    ["Offset of field: acpi_resource_address64::Info"]
        [::core::mem::offset_of!(acpi_resource_address64, Info) - 5usize];
    ["Offset of field: acpi_resource_address64::Address"]
        [::core::mem::offset_of!(acpi_resource_address64, Address) - 9usize];
    ["Offset of field: acpi_resource_address64::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_address64, ResourceSource) - 49usize];
};
pub type ACPI_RESOURCE_ADDRESS64 = acpi_resource_address64;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_resource_extended_address64 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub RevisionID: UINT8,
    pub Address: ACPI_ADDRESS64_ATTRIBUTE,
    pub TypeSpecific: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_extended_address64"]
        [::core::mem::size_of::<acpi_resource_extended_address64>() - 58usize];
    ["Alignment of acpi_resource_extended_address64"]
        [::core::mem::align_of::<acpi_resource_extended_address64>() - 1usize];
    ["Offset of field: acpi_resource_extended_address64::ResourceType"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, ResourceType) - 0usize];
    ["Offset of field: acpi_resource_extended_address64::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_extended_address64::Decode"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, Decode) - 2usize];
    ["Offset of field: acpi_resource_extended_address64::MinAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, MinAddressFixed) - 3usize];
    ["Offset of field: acpi_resource_extended_address64::MaxAddressFixed"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, MaxAddressFixed) - 4usize];
    ["Offset of field: acpi_resource_extended_address64::Info"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, Info) - 5usize];
    ["Offset of field: acpi_resource_extended_address64::RevisionID"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, RevisionID) - 9usize];
    ["Offset of field: acpi_resource_extended_address64::Address"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, Address) - 10usize];
    ["Offset of field: acpi_resource_extended_address64::TypeSpecific"]
        [::core::mem::offset_of!(acpi_resource_extended_address64, TypeSpecific) - 50usize];
};
pub type ACPI_RESOURCE_EXTENDED_ADDRESS64 = acpi_resource_extended_address64;
#[repr(C)]
pub struct acpi_resource_extended_irq {
    pub ProducerConsumer: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub InterruptCount: UINT8,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub __bindgen_anon_1: acpi_resource_extended_irq__bindgen_ty_1,
}
#[repr(C, packed)]
pub struct acpi_resource_extended_irq__bindgen_ty_1 {
    pub Interrupt: __BindgenUnionField<UINT32>,
    pub __bindgen_anon_1:
        __BindgenUnionField<acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u8; 4usize],
}
#[repr(C, packed)]
pub struct acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1 {
    pub __Empty_Interrupts: acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub Interrupts: __IncompleteArrayField<UINT32>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<
            acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 0usize];
    ["Alignment of acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<
            acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1"][::core::mem::align_of::<
        acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1,
    >() - 1usize];
    ["Offset of field: acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1::__Empty_Interrupts"]
        [::core::mem::offset_of!(
            acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1,
            __Empty_Interrupts
        ) - 0usize];
    ["Offset of field: acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1::Interrupts"][::core::mem::offset_of!(
        acpi_resource_extended_irq__bindgen_ty_1__bindgen_ty_1,
        Interrupts
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_extended_irq__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_resource_extended_irq__bindgen_ty_1>() - 4usize];
    ["Alignment of acpi_resource_extended_irq__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_resource_extended_irq__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_resource_extended_irq__bindgen_ty_1::Interrupt"]
        [::core::mem::offset_of!(acpi_resource_extended_irq__bindgen_ty_1, Interrupt) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_extended_irq"]
        [::core::mem::size_of::<acpi_resource_extended_irq>() - 21usize];
    ["Alignment of acpi_resource_extended_irq"]
        [::core::mem::align_of::<acpi_resource_extended_irq>() - 1usize];
    ["Offset of field: acpi_resource_extended_irq::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, ProducerConsumer) - 0usize];
    ["Offset of field: acpi_resource_extended_irq::Triggering"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, Triggering) - 1usize];
    ["Offset of field: acpi_resource_extended_irq::Polarity"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, Polarity) - 2usize];
    ["Offset of field: acpi_resource_extended_irq::Shareable"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, Shareable) - 3usize];
    ["Offset of field: acpi_resource_extended_irq::WakeCapable"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, WakeCapable) - 4usize];
    ["Offset of field: acpi_resource_extended_irq::InterruptCount"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, InterruptCount) - 5usize];
    ["Offset of field: acpi_resource_extended_irq::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_extended_irq, ResourceSource) - 6usize];
};
pub type ACPI_RESOURCE_EXTENDED_IRQ = acpi_resource_extended_irq;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_generic_register {
    pub SpaceId: UINT8,
    pub BitWidth: UINT8,
    pub BitOffset: UINT8,
    pub AccessSize: UINT8,
    pub Address: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_generic_register"]
        [::core::mem::size_of::<acpi_resource_generic_register>() - 12usize];
    ["Alignment of acpi_resource_generic_register"]
        [::core::mem::align_of::<acpi_resource_generic_register>() - 1usize];
    ["Offset of field: acpi_resource_generic_register::SpaceId"]
        [::core::mem::offset_of!(acpi_resource_generic_register, SpaceId) - 0usize];
    ["Offset of field: acpi_resource_generic_register::BitWidth"]
        [::core::mem::offset_of!(acpi_resource_generic_register, BitWidth) - 1usize];
    ["Offset of field: acpi_resource_generic_register::BitOffset"]
        [::core::mem::offset_of!(acpi_resource_generic_register, BitOffset) - 2usize];
    ["Offset of field: acpi_resource_generic_register::AccessSize"]
        [::core::mem::offset_of!(acpi_resource_generic_register, AccessSize) - 3usize];
    ["Offset of field: acpi_resource_generic_register::Address"]
        [::core::mem::offset_of!(acpi_resource_generic_register, Address) - 4usize];
};
pub type ACPI_RESOURCE_GENERIC_REGISTER = acpi_resource_generic_register;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_gpio {
    pub RevisionId: UINT8,
    pub ConnectionType: UINT8,
    pub ProducerConsumer: UINT8,
    pub PinConfig: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub IoRestriction: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub DriveStrength: UINT16,
    pub DebounceTimeout: UINT16,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_gpio"][::core::mem::size_of::<acpi_resource_gpio>() - 44usize];
    ["Alignment of acpi_resource_gpio"][::core::mem::align_of::<acpi_resource_gpio>() - 1usize];
    ["Offset of field: acpi_resource_gpio::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_gpio, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_gpio::ConnectionType"]
        [::core::mem::offset_of!(acpi_resource_gpio, ConnectionType) - 1usize];
    ["Offset of field: acpi_resource_gpio::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_gpio, ProducerConsumer) - 2usize];
    ["Offset of field: acpi_resource_gpio::PinConfig"]
        [::core::mem::offset_of!(acpi_resource_gpio, PinConfig) - 3usize];
    ["Offset of field: acpi_resource_gpio::Shareable"]
        [::core::mem::offset_of!(acpi_resource_gpio, Shareable) - 4usize];
    ["Offset of field: acpi_resource_gpio::WakeCapable"]
        [::core::mem::offset_of!(acpi_resource_gpio, WakeCapable) - 5usize];
    ["Offset of field: acpi_resource_gpio::IoRestriction"]
        [::core::mem::offset_of!(acpi_resource_gpio, IoRestriction) - 6usize];
    ["Offset of field: acpi_resource_gpio::Triggering"]
        [::core::mem::offset_of!(acpi_resource_gpio, Triggering) - 7usize];
    ["Offset of field: acpi_resource_gpio::Polarity"]
        [::core::mem::offset_of!(acpi_resource_gpio, Polarity) - 8usize];
    ["Offset of field: acpi_resource_gpio::DriveStrength"]
        [::core::mem::offset_of!(acpi_resource_gpio, DriveStrength) - 9usize];
    ["Offset of field: acpi_resource_gpio::DebounceTimeout"]
        [::core::mem::offset_of!(acpi_resource_gpio, DebounceTimeout) - 11usize];
    ["Offset of field: acpi_resource_gpio::PinTableLength"]
        [::core::mem::offset_of!(acpi_resource_gpio, PinTableLength) - 13usize];
    ["Offset of field: acpi_resource_gpio::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_gpio, VendorLength) - 15usize];
    ["Offset of field: acpi_resource_gpio::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_gpio, ResourceSource) - 17usize];
    ["Offset of field: acpi_resource_gpio::PinTable"]
        [::core::mem::offset_of!(acpi_resource_gpio, PinTable) - 28usize];
    ["Offset of field: acpi_resource_gpio::VendorData"]
        [::core::mem::offset_of!(acpi_resource_gpio, VendorData) - 36usize];
};
pub type ACPI_RESOURCE_GPIO = acpi_resource_gpio;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_common_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_common_serialbus"]
        [::core::mem::size_of::<acpi_resource_common_serialbus>() - 29usize];
    ["Alignment of acpi_resource_common_serialbus"]
        [::core::mem::align_of::<acpi_resource_common_serialbus>() - 1usize];
    ["Offset of field: acpi_resource_common_serialbus::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_common_serialbus::Type"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, Type) - 1usize];
    ["Offset of field: acpi_resource_common_serialbus::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, ProducerConsumer) - 2usize];
    ["Offset of field: acpi_resource_common_serialbus::SlaveMode"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, SlaveMode) - 3usize];
    ["Offset of field: acpi_resource_common_serialbus::ConnectionSharing"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, ConnectionSharing) - 4usize];
    ["Offset of field: acpi_resource_common_serialbus::TypeRevisionId"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, TypeRevisionId) - 5usize];
    ["Offset of field: acpi_resource_common_serialbus::TypeDataLength"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, TypeDataLength) - 6usize];
    ["Offset of field: acpi_resource_common_serialbus::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, VendorLength) - 8usize];
    ["Offset of field: acpi_resource_common_serialbus::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, ResourceSource) - 10usize];
    ["Offset of field: acpi_resource_common_serialbus::VendorData"]
        [::core::mem::offset_of!(acpi_resource_common_serialbus, VendorData) - 21usize];
};
pub type ACPI_RESOURCE_COMMON_SERIALBUS = acpi_resource_common_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_i2c_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub AccessMode: UINT8,
    pub SlaveAddress: UINT16,
    pub ConnectionSpeed: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_i2c_serialbus"]
        [::core::mem::size_of::<acpi_resource_i2c_serialbus>() - 36usize];
    ["Alignment of acpi_resource_i2c_serialbus"]
        [::core::mem::align_of::<acpi_resource_i2c_serialbus>() - 1usize];
    ["Offset of field: acpi_resource_i2c_serialbus::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_i2c_serialbus::Type"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, Type) - 1usize];
    ["Offset of field: acpi_resource_i2c_serialbus::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, ProducerConsumer) - 2usize];
    ["Offset of field: acpi_resource_i2c_serialbus::SlaveMode"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, SlaveMode) - 3usize];
    ["Offset of field: acpi_resource_i2c_serialbus::ConnectionSharing"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, ConnectionSharing) - 4usize];
    ["Offset of field: acpi_resource_i2c_serialbus::TypeRevisionId"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, TypeRevisionId) - 5usize];
    ["Offset of field: acpi_resource_i2c_serialbus::TypeDataLength"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, TypeDataLength) - 6usize];
    ["Offset of field: acpi_resource_i2c_serialbus::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, VendorLength) - 8usize];
    ["Offset of field: acpi_resource_i2c_serialbus::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, ResourceSource) - 10usize];
    ["Offset of field: acpi_resource_i2c_serialbus::VendorData"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, VendorData) - 21usize];
    ["Offset of field: acpi_resource_i2c_serialbus::AccessMode"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, AccessMode) - 29usize];
    ["Offset of field: acpi_resource_i2c_serialbus::SlaveAddress"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, SlaveAddress) - 30usize];
    ["Offset of field: acpi_resource_i2c_serialbus::ConnectionSpeed"]
        [::core::mem::offset_of!(acpi_resource_i2c_serialbus, ConnectionSpeed) - 32usize];
};
pub type ACPI_RESOURCE_I2C_SERIALBUS = acpi_resource_i2c_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_spi_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub WireMode: UINT8,
    pub DevicePolarity: UINT8,
    pub DataBitLength: UINT8,
    pub ClockPhase: UINT8,
    pub ClockPolarity: UINT8,
    pub DeviceSelection: UINT16,
    pub ConnectionSpeed: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_spi_serialbus"]
        [::core::mem::size_of::<acpi_resource_spi_serialbus>() - 40usize];
    ["Alignment of acpi_resource_spi_serialbus"]
        [::core::mem::align_of::<acpi_resource_spi_serialbus>() - 1usize];
    ["Offset of field: acpi_resource_spi_serialbus::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_spi_serialbus::Type"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, Type) - 1usize];
    ["Offset of field: acpi_resource_spi_serialbus::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, ProducerConsumer) - 2usize];
    ["Offset of field: acpi_resource_spi_serialbus::SlaveMode"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, SlaveMode) - 3usize];
    ["Offset of field: acpi_resource_spi_serialbus::ConnectionSharing"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, ConnectionSharing) - 4usize];
    ["Offset of field: acpi_resource_spi_serialbus::TypeRevisionId"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, TypeRevisionId) - 5usize];
    ["Offset of field: acpi_resource_spi_serialbus::TypeDataLength"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, TypeDataLength) - 6usize];
    ["Offset of field: acpi_resource_spi_serialbus::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, VendorLength) - 8usize];
    ["Offset of field: acpi_resource_spi_serialbus::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, ResourceSource) - 10usize];
    ["Offset of field: acpi_resource_spi_serialbus::VendorData"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, VendorData) - 21usize];
    ["Offset of field: acpi_resource_spi_serialbus::WireMode"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, WireMode) - 29usize];
    ["Offset of field: acpi_resource_spi_serialbus::DevicePolarity"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, DevicePolarity) - 30usize];
    ["Offset of field: acpi_resource_spi_serialbus::DataBitLength"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, DataBitLength) - 31usize];
    ["Offset of field: acpi_resource_spi_serialbus::ClockPhase"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, ClockPhase) - 32usize];
    ["Offset of field: acpi_resource_spi_serialbus::ClockPolarity"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, ClockPolarity) - 33usize];
    ["Offset of field: acpi_resource_spi_serialbus::DeviceSelection"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, DeviceSelection) - 34usize];
    ["Offset of field: acpi_resource_spi_serialbus::ConnectionSpeed"]
        [::core::mem::offset_of!(acpi_resource_spi_serialbus, ConnectionSpeed) - 36usize];
};
pub type ACPI_RESOURCE_SPI_SERIALBUS = acpi_resource_spi_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_uart_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub Endian: UINT8,
    pub DataBits: UINT8,
    pub StopBits: UINT8,
    pub FlowControl: UINT8,
    pub Parity: UINT8,
    pub LinesEnabled: UINT8,
    pub RxFifoSize: UINT16,
    pub TxFifoSize: UINT16,
    pub DefaultBaudRate: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_uart_serialbus"]
        [::core::mem::size_of::<acpi_resource_uart_serialbus>() - 43usize];
    ["Alignment of acpi_resource_uart_serialbus"]
        [::core::mem::align_of::<acpi_resource_uart_serialbus>() - 1usize];
    ["Offset of field: acpi_resource_uart_serialbus::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_uart_serialbus::Type"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, Type) - 1usize];
    ["Offset of field: acpi_resource_uart_serialbus::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, ProducerConsumer) - 2usize];
    ["Offset of field: acpi_resource_uart_serialbus::SlaveMode"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, SlaveMode) - 3usize];
    ["Offset of field: acpi_resource_uart_serialbus::ConnectionSharing"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, ConnectionSharing) - 4usize];
    ["Offset of field: acpi_resource_uart_serialbus::TypeRevisionId"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, TypeRevisionId) - 5usize];
    ["Offset of field: acpi_resource_uart_serialbus::TypeDataLength"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, TypeDataLength) - 6usize];
    ["Offset of field: acpi_resource_uart_serialbus::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, VendorLength) - 8usize];
    ["Offset of field: acpi_resource_uart_serialbus::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, ResourceSource) - 10usize];
    ["Offset of field: acpi_resource_uart_serialbus::VendorData"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, VendorData) - 21usize];
    ["Offset of field: acpi_resource_uart_serialbus::Endian"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, Endian) - 29usize];
    ["Offset of field: acpi_resource_uart_serialbus::DataBits"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, DataBits) - 30usize];
    ["Offset of field: acpi_resource_uart_serialbus::StopBits"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, StopBits) - 31usize];
    ["Offset of field: acpi_resource_uart_serialbus::FlowControl"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, FlowControl) - 32usize];
    ["Offset of field: acpi_resource_uart_serialbus::Parity"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, Parity) - 33usize];
    ["Offset of field: acpi_resource_uart_serialbus::LinesEnabled"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, LinesEnabled) - 34usize];
    ["Offset of field: acpi_resource_uart_serialbus::RxFifoSize"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, RxFifoSize) - 35usize];
    ["Offset of field: acpi_resource_uart_serialbus::TxFifoSize"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, TxFifoSize) - 37usize];
    ["Offset of field: acpi_resource_uart_serialbus::DefaultBaudRate"]
        [::core::mem::offset_of!(acpi_resource_uart_serialbus, DefaultBaudRate) - 39usize];
};
pub type ACPI_RESOURCE_UART_SERIALBUS = acpi_resource_uart_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_csi2_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub LocalPortInstance: UINT8,
    pub PhyType: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_csi2_serialbus"]
        [::core::mem::size_of::<acpi_resource_csi2_serialbus>() - 31usize];
    ["Alignment of acpi_resource_csi2_serialbus"]
        [::core::mem::align_of::<acpi_resource_csi2_serialbus>() - 1usize];
    ["Offset of field: acpi_resource_csi2_serialbus::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_csi2_serialbus::Type"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, Type) - 1usize];
    ["Offset of field: acpi_resource_csi2_serialbus::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, ProducerConsumer) - 2usize];
    ["Offset of field: acpi_resource_csi2_serialbus::SlaveMode"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, SlaveMode) - 3usize];
    ["Offset of field: acpi_resource_csi2_serialbus::ConnectionSharing"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, ConnectionSharing) - 4usize];
    ["Offset of field: acpi_resource_csi2_serialbus::TypeRevisionId"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, TypeRevisionId) - 5usize];
    ["Offset of field: acpi_resource_csi2_serialbus::TypeDataLength"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, TypeDataLength) - 6usize];
    ["Offset of field: acpi_resource_csi2_serialbus::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, VendorLength) - 8usize];
    ["Offset of field: acpi_resource_csi2_serialbus::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, ResourceSource) - 10usize];
    ["Offset of field: acpi_resource_csi2_serialbus::VendorData"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, VendorData) - 21usize];
    ["Offset of field: acpi_resource_csi2_serialbus::LocalPortInstance"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, LocalPortInstance) - 29usize];
    ["Offset of field: acpi_resource_csi2_serialbus::PhyType"]
        [::core::mem::offset_of!(acpi_resource_csi2_serialbus, PhyType) - 30usize];
};
pub type ACPI_RESOURCE_CSI2_SERIALBUS = acpi_resource_csi2_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_function {
    pub RevisionId: UINT8,
    pub PinConfig: UINT8,
    pub Shareable: UINT8,
    pub FunctionNumber: UINT16,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_pin_function"]
        [::core::mem::size_of::<acpi_resource_pin_function>() - 36usize];
    ["Alignment of acpi_resource_pin_function"]
        [::core::mem::align_of::<acpi_resource_pin_function>() - 1usize];
    ["Offset of field: acpi_resource_pin_function::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_pin_function, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_pin_function::PinConfig"]
        [::core::mem::offset_of!(acpi_resource_pin_function, PinConfig) - 1usize];
    ["Offset of field: acpi_resource_pin_function::Shareable"]
        [::core::mem::offset_of!(acpi_resource_pin_function, Shareable) - 2usize];
    ["Offset of field: acpi_resource_pin_function::FunctionNumber"]
        [::core::mem::offset_of!(acpi_resource_pin_function, FunctionNumber) - 3usize];
    ["Offset of field: acpi_resource_pin_function::PinTableLength"]
        [::core::mem::offset_of!(acpi_resource_pin_function, PinTableLength) - 5usize];
    ["Offset of field: acpi_resource_pin_function::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_pin_function, VendorLength) - 7usize];
    ["Offset of field: acpi_resource_pin_function::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_pin_function, ResourceSource) - 9usize];
    ["Offset of field: acpi_resource_pin_function::PinTable"]
        [::core::mem::offset_of!(acpi_resource_pin_function, PinTable) - 20usize];
    ["Offset of field: acpi_resource_pin_function::VendorData"]
        [::core::mem::offset_of!(acpi_resource_pin_function, VendorData) - 28usize];
};
pub type ACPI_RESOURCE_PIN_FUNCTION = acpi_resource_pin_function;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_config {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub PinConfigType: UINT8,
    pub PinConfigValue: UINT32,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_pin_config"]
        [::core::mem::size_of::<acpi_resource_pin_config>() - 39usize];
    ["Alignment of acpi_resource_pin_config"]
        [::core::mem::align_of::<acpi_resource_pin_config>() - 1usize];
    ["Offset of field: acpi_resource_pin_config::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_pin_config, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_pin_config::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_pin_config, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_pin_config::Shareable"]
        [::core::mem::offset_of!(acpi_resource_pin_config, Shareable) - 2usize];
    ["Offset of field: acpi_resource_pin_config::PinConfigType"]
        [::core::mem::offset_of!(acpi_resource_pin_config, PinConfigType) - 3usize];
    ["Offset of field: acpi_resource_pin_config::PinConfigValue"]
        [::core::mem::offset_of!(acpi_resource_pin_config, PinConfigValue) - 4usize];
    ["Offset of field: acpi_resource_pin_config::PinTableLength"]
        [::core::mem::offset_of!(acpi_resource_pin_config, PinTableLength) - 8usize];
    ["Offset of field: acpi_resource_pin_config::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_pin_config, VendorLength) - 10usize];
    ["Offset of field: acpi_resource_pin_config::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_pin_config, ResourceSource) - 12usize];
    ["Offset of field: acpi_resource_pin_config::PinTable"]
        [::core::mem::offset_of!(acpi_resource_pin_config, PinTable) - 23usize];
    ["Offset of field: acpi_resource_pin_config::VendorData"]
        [::core::mem::offset_of!(acpi_resource_pin_config, VendorData) - 31usize];
};
pub type ACPI_RESOURCE_PIN_CONFIG = acpi_resource_pin_config;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_clock_input {
    pub RevisionId: UINT8,
    pub Mode: UINT8,
    pub Scale: UINT8,
    pub FrequencyDivisor: UINT16,
    pub FrequencyNumerator: UINT32,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_clock_input"]
        [::core::mem::size_of::<acpi_resource_clock_input>() - 20usize];
    ["Alignment of acpi_resource_clock_input"]
        [::core::mem::align_of::<acpi_resource_clock_input>() - 1usize];
    ["Offset of field: acpi_resource_clock_input::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_clock_input, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_clock_input::Mode"]
        [::core::mem::offset_of!(acpi_resource_clock_input, Mode) - 1usize];
    ["Offset of field: acpi_resource_clock_input::Scale"]
        [::core::mem::offset_of!(acpi_resource_clock_input, Scale) - 2usize];
    ["Offset of field: acpi_resource_clock_input::FrequencyDivisor"]
        [::core::mem::offset_of!(acpi_resource_clock_input, FrequencyDivisor) - 3usize];
    ["Offset of field: acpi_resource_clock_input::FrequencyNumerator"]
        [::core::mem::offset_of!(acpi_resource_clock_input, FrequencyNumerator) - 5usize];
    ["Offset of field: acpi_resource_clock_input::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_clock_input, ResourceSource) - 9usize];
};
pub type ACPI_RESOURCE_CLOCK_INPUT = acpi_resource_clock_input;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub PinTable: *mut UINT16,
    pub ResourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_pin_group"]
        [::core::mem::size_of::<acpi_resource_pin_group>() - 32usize];
    ["Alignment of acpi_resource_pin_group"]
        [::core::mem::align_of::<acpi_resource_pin_group>() - 1usize];
    ["Offset of field: acpi_resource_pin_group::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_pin_group, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_pin_group::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_pin_group, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_pin_group::PinTableLength"]
        [::core::mem::offset_of!(acpi_resource_pin_group, PinTableLength) - 2usize];
    ["Offset of field: acpi_resource_pin_group::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_pin_group, VendorLength) - 4usize];
    ["Offset of field: acpi_resource_pin_group::PinTable"]
        [::core::mem::offset_of!(acpi_resource_pin_group, PinTable) - 6usize];
    ["Offset of field: acpi_resource_pin_group::ResourceLabel"]
        [::core::mem::offset_of!(acpi_resource_pin_group, ResourceLabel) - 14usize];
    ["Offset of field: acpi_resource_pin_group::VendorData"]
        [::core::mem::offset_of!(acpi_resource_pin_group, VendorData) - 24usize];
};
pub type ACPI_RESOURCE_PIN_GROUP = acpi_resource_pin_group;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group_function {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub FunctionNumber: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub ResourceSourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_pin_group_function"]
        [::core::mem::size_of::<acpi_resource_pin_group_function>() - 36usize];
    ["Alignment of acpi_resource_pin_group_function"]
        [::core::mem::align_of::<acpi_resource_pin_group_function>() - 1usize];
    ["Offset of field: acpi_resource_pin_group_function::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_pin_group_function::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_pin_group_function::Shareable"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, Shareable) - 2usize];
    ["Offset of field: acpi_resource_pin_group_function::FunctionNumber"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, FunctionNumber) - 3usize];
    ["Offset of field: acpi_resource_pin_group_function::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, VendorLength) - 5usize];
    ["Offset of field: acpi_resource_pin_group_function::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, ResourceSource) - 7usize];
    ["Offset of field: acpi_resource_pin_group_function::ResourceSourceLabel"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, ResourceSourceLabel) - 18usize];
    ["Offset of field: acpi_resource_pin_group_function::VendorData"]
        [::core::mem::offset_of!(acpi_resource_pin_group_function, VendorData) - 28usize];
};
pub type ACPI_RESOURCE_PIN_GROUP_FUNCTION = acpi_resource_pin_group_function;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group_config {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub PinConfigType: UINT8,
    pub PinConfigValue: UINT32,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub ResourceSourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_pin_group_config"]
        [::core::mem::size_of::<acpi_resource_pin_group_config>() - 39usize];
    ["Alignment of acpi_resource_pin_group_config"]
        [::core::mem::align_of::<acpi_resource_pin_group_config>() - 1usize];
    ["Offset of field: acpi_resource_pin_group_config::RevisionId"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, RevisionId) - 0usize];
    ["Offset of field: acpi_resource_pin_group_config::ProducerConsumer"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, ProducerConsumer) - 1usize];
    ["Offset of field: acpi_resource_pin_group_config::Shareable"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, Shareable) - 2usize];
    ["Offset of field: acpi_resource_pin_group_config::PinConfigType"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, PinConfigType) - 3usize];
    ["Offset of field: acpi_resource_pin_group_config::PinConfigValue"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, PinConfigValue) - 4usize];
    ["Offset of field: acpi_resource_pin_group_config::VendorLength"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, VendorLength) - 8usize];
    ["Offset of field: acpi_resource_pin_group_config::ResourceSource"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, ResourceSource) - 10usize];
    ["Offset of field: acpi_resource_pin_group_config::ResourceSourceLabel"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, ResourceSourceLabel) - 21usize];
    ["Offset of field: acpi_resource_pin_group_config::VendorData"]
        [::core::mem::offset_of!(acpi_resource_pin_group_config, VendorData) - 31usize];
};
pub type ACPI_RESOURCE_PIN_GROUP_CONFIG = acpi_resource_pin_group_config;
#[repr(C)]
pub struct acpi_resource_data {
    pub Irq: __BindgenUnionField<ACPI_RESOURCE_IRQ>,
    pub Dma: __BindgenUnionField<ACPI_RESOURCE_DMA>,
    pub StartDpf: __BindgenUnionField<ACPI_RESOURCE_START_DEPENDENT>,
    pub Io: __BindgenUnionField<ACPI_RESOURCE_IO>,
    pub FixedIo: __BindgenUnionField<ACPI_RESOURCE_FIXED_IO>,
    pub FixedDma: __BindgenUnionField<ACPI_RESOURCE_FIXED_DMA>,
    pub Vendor: __BindgenUnionField<ACPI_RESOURCE_VENDOR>,
    pub VendorTyped: __BindgenUnionField<ACPI_RESOURCE_VENDOR_TYPED>,
    pub EndTag: __BindgenUnionField<ACPI_RESOURCE_END_TAG>,
    pub Memory24: __BindgenUnionField<ACPI_RESOURCE_MEMORY24>,
    pub Memory32: __BindgenUnionField<ACPI_RESOURCE_MEMORY32>,
    pub FixedMemory32: __BindgenUnionField<ACPI_RESOURCE_FIXED_MEMORY32>,
    pub Address16: __BindgenUnionField<ACPI_RESOURCE_ADDRESS16>,
    pub Address32: __BindgenUnionField<ACPI_RESOURCE_ADDRESS32>,
    pub Address64: __BindgenUnionField<ACPI_RESOURCE_ADDRESS64>,
    pub ExtAddress64: __BindgenUnionField<ACPI_RESOURCE_EXTENDED_ADDRESS64>,
    pub ExtendedIrq: __BindgenUnionField<ACPI_RESOURCE_EXTENDED_IRQ>,
    pub GenericReg: __BindgenUnionField<ACPI_RESOURCE_GENERIC_REGISTER>,
    pub Gpio: __BindgenUnionField<ACPI_RESOURCE_GPIO>,
    pub I2cSerialBus: __BindgenUnionField<ACPI_RESOURCE_I2C_SERIALBUS>,
    pub SpiSerialBus: __BindgenUnionField<ACPI_RESOURCE_SPI_SERIALBUS>,
    pub UartSerialBus: __BindgenUnionField<ACPI_RESOURCE_UART_SERIALBUS>,
    pub Csi2SerialBus: __BindgenUnionField<ACPI_RESOURCE_CSI2_SERIALBUS>,
    pub CommonSerialBus: __BindgenUnionField<ACPI_RESOURCE_COMMON_SERIALBUS>,
    pub PinFunction: __BindgenUnionField<ACPI_RESOURCE_PIN_FUNCTION>,
    pub PinConfig: __BindgenUnionField<ACPI_RESOURCE_PIN_CONFIG>,
    pub PinGroup: __BindgenUnionField<ACPI_RESOURCE_PIN_GROUP>,
    pub PinGroupFunction: __BindgenUnionField<ACPI_RESOURCE_PIN_GROUP_FUNCTION>,
    pub PinGroupConfig: __BindgenUnionField<ACPI_RESOURCE_PIN_GROUP_CONFIG>,
    pub ClockInput: __BindgenUnionField<ACPI_RESOURCE_CLOCK_INPUT>,
    pub Address: __BindgenUnionField<ACPI_RESOURCE_ADDRESS>,
    pub bindgen_union_field: [u8; 60usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource_data"][::core::mem::size_of::<acpi_resource_data>() - 60usize];
    ["Alignment of acpi_resource_data"][::core::mem::align_of::<acpi_resource_data>() - 1usize];
    ["Offset of field: acpi_resource_data::Irq"]
        [::core::mem::offset_of!(acpi_resource_data, Irq) - 0usize];
    ["Offset of field: acpi_resource_data::Dma"]
        [::core::mem::offset_of!(acpi_resource_data, Dma) - 0usize];
    ["Offset of field: acpi_resource_data::StartDpf"]
        [::core::mem::offset_of!(acpi_resource_data, StartDpf) - 0usize];
    ["Offset of field: acpi_resource_data::Io"]
        [::core::mem::offset_of!(acpi_resource_data, Io) - 0usize];
    ["Offset of field: acpi_resource_data::FixedIo"]
        [::core::mem::offset_of!(acpi_resource_data, FixedIo) - 0usize];
    ["Offset of field: acpi_resource_data::FixedDma"]
        [::core::mem::offset_of!(acpi_resource_data, FixedDma) - 0usize];
    ["Offset of field: acpi_resource_data::Vendor"]
        [::core::mem::offset_of!(acpi_resource_data, Vendor) - 0usize];
    ["Offset of field: acpi_resource_data::VendorTyped"]
        [::core::mem::offset_of!(acpi_resource_data, VendorTyped) - 0usize];
    ["Offset of field: acpi_resource_data::EndTag"]
        [::core::mem::offset_of!(acpi_resource_data, EndTag) - 0usize];
    ["Offset of field: acpi_resource_data::Memory24"]
        [::core::mem::offset_of!(acpi_resource_data, Memory24) - 0usize];
    ["Offset of field: acpi_resource_data::Memory32"]
        [::core::mem::offset_of!(acpi_resource_data, Memory32) - 0usize];
    ["Offset of field: acpi_resource_data::FixedMemory32"]
        [::core::mem::offset_of!(acpi_resource_data, FixedMemory32) - 0usize];
    ["Offset of field: acpi_resource_data::Address16"]
        [::core::mem::offset_of!(acpi_resource_data, Address16) - 0usize];
    ["Offset of field: acpi_resource_data::Address32"]
        [::core::mem::offset_of!(acpi_resource_data, Address32) - 0usize];
    ["Offset of field: acpi_resource_data::Address64"]
        [::core::mem::offset_of!(acpi_resource_data, Address64) - 0usize];
    ["Offset of field: acpi_resource_data::ExtAddress64"]
        [::core::mem::offset_of!(acpi_resource_data, ExtAddress64) - 0usize];
    ["Offset of field: acpi_resource_data::ExtendedIrq"]
        [::core::mem::offset_of!(acpi_resource_data, ExtendedIrq) - 0usize];
    ["Offset of field: acpi_resource_data::GenericReg"]
        [::core::mem::offset_of!(acpi_resource_data, GenericReg) - 0usize];
    ["Offset of field: acpi_resource_data::Gpio"]
        [::core::mem::offset_of!(acpi_resource_data, Gpio) - 0usize];
    ["Offset of field: acpi_resource_data::I2cSerialBus"]
        [::core::mem::offset_of!(acpi_resource_data, I2cSerialBus) - 0usize];
    ["Offset of field: acpi_resource_data::SpiSerialBus"]
        [::core::mem::offset_of!(acpi_resource_data, SpiSerialBus) - 0usize];
    ["Offset of field: acpi_resource_data::UartSerialBus"]
        [::core::mem::offset_of!(acpi_resource_data, UartSerialBus) - 0usize];
    ["Offset of field: acpi_resource_data::Csi2SerialBus"]
        [::core::mem::offset_of!(acpi_resource_data, Csi2SerialBus) - 0usize];
    ["Offset of field: acpi_resource_data::CommonSerialBus"]
        [::core::mem::offset_of!(acpi_resource_data, CommonSerialBus) - 0usize];
    ["Offset of field: acpi_resource_data::PinFunction"]
        [::core::mem::offset_of!(acpi_resource_data, PinFunction) - 0usize];
    ["Offset of field: acpi_resource_data::PinConfig"]
        [::core::mem::offset_of!(acpi_resource_data, PinConfig) - 0usize];
    ["Offset of field: acpi_resource_data::PinGroup"]
        [::core::mem::offset_of!(acpi_resource_data, PinGroup) - 0usize];
    ["Offset of field: acpi_resource_data::PinGroupFunction"]
        [::core::mem::offset_of!(acpi_resource_data, PinGroupFunction) - 0usize];
    ["Offset of field: acpi_resource_data::PinGroupConfig"]
        [::core::mem::offset_of!(acpi_resource_data, PinGroupConfig) - 0usize];
    ["Offset of field: acpi_resource_data::ClockInput"]
        [::core::mem::offset_of!(acpi_resource_data, ClockInput) - 0usize];
    ["Offset of field: acpi_resource_data::Address"]
        [::core::mem::offset_of!(acpi_resource_data, Address) - 0usize];
};
pub type ACPI_RESOURCE_DATA = acpi_resource_data;
#[repr(C, packed)]
pub struct acpi_resource {
    pub Type: UINT32,
    pub Length: UINT32,
    pub Data: ACPI_RESOURCE_DATA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_resource"][::core::mem::size_of::<acpi_resource>() - 68usize];
    ["Alignment of acpi_resource"][::core::mem::align_of::<acpi_resource>() - 1usize];
    ["Offset of field: acpi_resource::Type"][::core::mem::offset_of!(acpi_resource, Type) - 0usize];
    ["Offset of field: acpi_resource::Length"]
        [::core::mem::offset_of!(acpi_resource, Length) - 4usize];
    ["Offset of field: acpi_resource::Data"][::core::mem::offset_of!(acpi_resource, Data) - 8usize];
};
pub type ACPI_RESOURCE = acpi_resource;
#[repr(C)]
pub struct acpi_pci_routing_table {
    pub Length: UINT32,
    pub Pin: UINT32,
    pub Address: UINT64,
    pub SourceIndex: UINT32,
    pub __bindgen_anon_1: acpi_pci_routing_table__bindgen_ty_1,
}
#[repr(C)]
pub struct acpi_pci_routing_table__bindgen_ty_1 {
    pub Pad: __BindgenUnionField<[::core::ffi::c_char; 4usize]>,
    pub __bindgen_anon_1: __BindgenUnionField<acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1 {
    pub __Empty_Source: acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub Source: __IncompleteArrayField<::core::ffi::c_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(
        ) - 0usize];
    ["Alignment of acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(
        ) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1::__Empty_Source"][::core::mem::offset_of!(
        acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1,
        __Empty_Source
    )
        - 0usize];
    ["Offset of field: acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1::Source"][::core::mem::offset_of!(
        acpi_pci_routing_table__bindgen_ty_1__bindgen_ty_1,
        Source
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pci_routing_table__bindgen_ty_1"]
        [::core::mem::size_of::<acpi_pci_routing_table__bindgen_ty_1>() - 4usize];
    ["Alignment of acpi_pci_routing_table__bindgen_ty_1"]
        [::core::mem::align_of::<acpi_pci_routing_table__bindgen_ty_1>() - 1usize];
    ["Offset of field: acpi_pci_routing_table__bindgen_ty_1::Pad"]
        [::core::mem::offset_of!(acpi_pci_routing_table__bindgen_ty_1, Pad) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pci_routing_table"][::core::mem::size_of::<acpi_pci_routing_table>() - 24usize];
    ["Alignment of acpi_pci_routing_table"]
        [::core::mem::align_of::<acpi_pci_routing_table>() - 8usize];
    ["Offset of field: acpi_pci_routing_table::Length"]
        [::core::mem::offset_of!(acpi_pci_routing_table, Length) - 0usize];
    ["Offset of field: acpi_pci_routing_table::Pin"]
        [::core::mem::offset_of!(acpi_pci_routing_table, Pin) - 4usize];
    ["Offset of field: acpi_pci_routing_table::Address"]
        [::core::mem::offset_of!(acpi_pci_routing_table, Address) - 8usize];
    ["Offset of field: acpi_pci_routing_table::SourceIndex"]
        [::core::mem::offset_of!(acpi_pci_routing_table, SourceIndex) - 16usize];
};
pub type ACPI_PCI_ROUTING_TABLE = acpi_pci_routing_table;
pub const ACPI_EXECUTE_TYPE_OSL_GLOBAL_LOCK_HANDLER: ACPI_EXECUTE_TYPE = 0;
pub const ACPI_EXECUTE_TYPE_OSL_NOTIFY_HANDLER: ACPI_EXECUTE_TYPE = 1;
pub const ACPI_EXECUTE_TYPE_OSL_GPE_HANDLER: ACPI_EXECUTE_TYPE = 2;
pub const ACPI_EXECUTE_TYPE_OSL_DEBUGGER_MAIN_THREAD: ACPI_EXECUTE_TYPE = 3;
pub const ACPI_EXECUTE_TYPE_OSL_DEBUGGER_EXEC_THREAD: ACPI_EXECUTE_TYPE = 4;
pub const ACPI_EXECUTE_TYPE_OSL_EC_POLL_HANDLER: ACPI_EXECUTE_TYPE = 5;
pub const ACPI_EXECUTE_TYPE_OSL_EC_BURST_HANDLER: ACPI_EXECUTE_TYPE = 6;
pub type ACPI_EXECUTE_TYPE = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_signal_fatal_info {
    pub Type: UINT32,
    pub Code: UINT32,
    pub Argument: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_signal_fatal_info"][::core::mem::size_of::<acpi_signal_fatal_info>() - 12usize];
    ["Alignment of acpi_signal_fatal_info"]
        [::core::mem::align_of::<acpi_signal_fatal_info>() - 4usize];
    ["Offset of field: acpi_signal_fatal_info::Type"]
        [::core::mem::offset_of!(acpi_signal_fatal_info, Type) - 0usize];
    ["Offset of field: acpi_signal_fatal_info::Code"]
        [::core::mem::offset_of!(acpi_signal_fatal_info, Code) - 4usize];
    ["Offset of field: acpi_signal_fatal_info::Argument"]
        [::core::mem::offset_of!(acpi_signal_fatal_info, Argument) - 8usize];
};
pub type ACPI_SIGNAL_FATAL_INFO = acpi_signal_fatal_info;
unsafe extern "C" {
    pub fn AcpiOsInitialize() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsTerminate() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsGetRootPointer() -> ACPI_PHYSICAL_ADDRESS;
}
unsafe extern "C" {
    pub fn AcpiOsPredefinedOverride(
        InitVal: *const ACPI_PREDEFINED_NAMES,
        NewVal: *mut ACPI_STRING,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsTableOverride(
        ExistingTable: *mut ACPI_TABLE_HEADER,
        NewTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsPhysicalTableOverride(
        ExistingTable: *mut ACPI_TABLE_HEADER,
        NewAddress: *mut ACPI_PHYSICAL_ADDRESS,
        NewTableLength: *mut UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsCreateLock(OutHandle: *mut *mut ::core::ffi::c_void) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsDeleteLock(Handle: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn AcpiOsAcquireLock(Handle: *mut ::core::ffi::c_void) -> ACPI_SIZE;
}
unsafe extern "C" {
    pub fn AcpiOsReleaseLock(Handle: *mut ::core::ffi::c_void, Flags: ACPI_SIZE);
}
unsafe extern "C" {
    pub fn AcpiOsCreateSemaphore(
        MaxUnits: UINT32,
        InitialUnits: UINT32,
        OutHandle: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsDeleteSemaphore(Handle: *mut ::core::ffi::c_void) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsWaitSemaphore(
        Handle: *mut ::core::ffi::c_void,
        Units: UINT32,
        Timeout: UINT16,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsSignalSemaphore(Handle: *mut ::core::ffi::c_void, Units: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsAllocate(Size: ACPI_SIZE) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn AcpiOsAllocateZeroed(Size: ACPI_SIZE) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn AcpiOsFree(Memory: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn AcpiOsMapMemory(
        Where: ACPI_PHYSICAL_ADDRESS,
        Length: ACPI_SIZE,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn AcpiOsUnmapMemory(LogicalAddress: *mut ::core::ffi::c_void, Size: ACPI_SIZE);
}
unsafe extern "C" {
    pub fn AcpiOsGetPhysicalAddress(
        LogicalAddress: *mut ::core::ffi::c_void,
        PhysicalAddress: *mut ACPI_PHYSICAL_ADDRESS,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsCreateCache(
        CacheName: *mut ::core::ffi::c_char,
        ObjectSize: UINT16,
        MaxDepth: UINT16,
        ReturnCache: *mut *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsDeleteCache(Cache: *mut *mut ::core::ffi::c_void) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsPurgeCache(Cache: *mut *mut ::core::ffi::c_void) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsAcquireObject(Cache: *mut *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn AcpiOsReleaseObject(
        Cache: *mut *mut ::core::ffi::c_void,
        Object: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsInstallInterruptHandler(
        InterruptNumber: UINT32,
        ServiceRoutine: ACPI_OSD_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsRemoveInterruptHandler(
        InterruptNumber: UINT32,
        ServiceRoutine: ACPI_OSD_HANDLER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsGetThreadId() -> UINT64;
}
unsafe extern "C" {
    pub fn AcpiOsExecute(
        Type: ACPI_EXECUTE_TYPE,
        Function: ACPI_OSD_EXEC_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsWaitEventsComplete();
}
unsafe extern "C" {
    pub fn AcpiOsSleep(Milliseconds: UINT64);
}
unsafe extern "C" {
    pub fn AcpiOsStall(Microseconds: UINT32);
}
unsafe extern "C" {
    pub fn AcpiOsReadPort(
        Address: ACPI_IO_ADDRESS,
        Value: *mut UINT32,
        Width: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsWritePort(Address: ACPI_IO_ADDRESS, Value: UINT32, Width: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsReadMemory(
        Address: ACPI_PHYSICAL_ADDRESS,
        Value: *mut UINT64,
        Width: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsWriteMemory(
        Address: ACPI_PHYSICAL_ADDRESS,
        Value: UINT64,
        Width: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsReadPciConfiguration(
        PciId: *mut ACPI_PCI_ID,
        Reg: UINT32,
        Value: *mut UINT64,
        Width: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsWritePciConfiguration(
        PciId: *mut ACPI_PCI_ID,
        Reg: UINT32,
        Value: UINT64,
        Width: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsReadable(Pointer: *mut ::core::ffi::c_void, Length: ACPI_SIZE) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn AcpiOsWritable(Pointer: *mut ::core::ffi::c_void, Length: ACPI_SIZE) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn AcpiOsGetTimer() -> UINT64;
}
unsafe extern "C" {
    pub fn AcpiOsSignal(Function: UINT32, Info: *mut ::core::ffi::c_void) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsEnterSleep(SleepState: UINT8, RegaValue: UINT32, RegbValue: UINT32)
    -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsPrintf(Format: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn AcpiOsVprintf(Format: *const ::core::ffi::c_char, Args: *mut __va_list_tag);
}
unsafe extern "C" {
    pub fn AcpiOsRedirectOutput(Destination: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn AcpiOsGetLine(
        Buffer: *mut ::core::ffi::c_char,
        BufferLength: UINT32,
        BytesRead: *mut UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsInitializeDebugger() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsTerminateDebugger();
}
unsafe extern "C" {
    pub fn AcpiOsWaitCommandReady() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsNotifyCommandComplete() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsTracePoint(
        Type: ACPI_TRACE_EVENT_TYPE,
        Begin: BOOLEAN,
        Aml: *mut UINT8,
        Pathname: *mut ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn AcpiOsGetTableByName(
        Signature: *mut ::core::ffi::c_char,
        Instance: UINT32,
        Table: *mut *mut ACPI_TABLE_HEADER,
        Address: *mut ACPI_PHYSICAL_ADDRESS,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsGetTableByIndex(
        Index: UINT32,
        Table: *mut *mut ACPI_TABLE_HEADER,
        Instance: *mut UINT32,
        Address: *mut ACPI_PHYSICAL_ADDRESS,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsGetTableByAddress(
        Address: ACPI_PHYSICAL_ADDRESS,
        Table: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiOsOpenDirectory(
        Pathname: *mut ::core::ffi::c_char,
        WildcardSpec: *mut ::core::ffi::c_char,
        RequestedFileType: ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn AcpiOsGetNextFilename(DirHandle: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn AcpiOsCloseDirectory(DirHandle: *mut ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fde_info {
    pub Floppy0: UINT32,
    pub Floppy1: UINT32,
    pub Floppy2: UINT32,
    pub Floppy3: UINT32,
    pub Tape: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_fde_info"][::core::mem::size_of::<acpi_fde_info>() - 20usize];
    ["Alignment of acpi_fde_info"][::core::mem::align_of::<acpi_fde_info>() - 4usize];
    ["Offset of field: acpi_fde_info::Floppy0"]
        [::core::mem::offset_of!(acpi_fde_info, Floppy0) - 0usize];
    ["Offset of field: acpi_fde_info::Floppy1"]
        [::core::mem::offset_of!(acpi_fde_info, Floppy1) - 4usize];
    ["Offset of field: acpi_fde_info::Floppy2"]
        [::core::mem::offset_of!(acpi_fde_info, Floppy2) - 8usize];
    ["Offset of field: acpi_fde_info::Floppy3"]
        [::core::mem::offset_of!(acpi_fde_info, Floppy3) - 12usize];
    ["Offset of field: acpi_fde_info::Tape"]
        [::core::mem::offset_of!(acpi_fde_info, Tape) - 16usize];
};
pub type ACPI_FDE_INFO = acpi_fde_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_grt_info {
    pub Year: UINT16,
    pub Month: UINT8,
    pub Day: UINT8,
    pub Hour: UINT8,
    pub Minute: UINT8,
    pub Second: UINT8,
    pub Valid: UINT8,
    pub Milliseconds: UINT16,
    pub Timezone: UINT16,
    pub Daylight: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_grt_info"][::core::mem::size_of::<acpi_grt_info>() - 16usize];
    ["Alignment of acpi_grt_info"][::core::mem::align_of::<acpi_grt_info>() - 2usize];
    ["Offset of field: acpi_grt_info::Year"][::core::mem::offset_of!(acpi_grt_info, Year) - 0usize];
    ["Offset of field: acpi_grt_info::Month"]
        [::core::mem::offset_of!(acpi_grt_info, Month) - 2usize];
    ["Offset of field: acpi_grt_info::Day"][::core::mem::offset_of!(acpi_grt_info, Day) - 3usize];
    ["Offset of field: acpi_grt_info::Hour"][::core::mem::offset_of!(acpi_grt_info, Hour) - 4usize];
    ["Offset of field: acpi_grt_info::Minute"]
        [::core::mem::offset_of!(acpi_grt_info, Minute) - 5usize];
    ["Offset of field: acpi_grt_info::Second"]
        [::core::mem::offset_of!(acpi_grt_info, Second) - 6usize];
    ["Offset of field: acpi_grt_info::Valid"]
        [::core::mem::offset_of!(acpi_grt_info, Valid) - 7usize];
    ["Offset of field: acpi_grt_info::Milliseconds"]
        [::core::mem::offset_of!(acpi_grt_info, Milliseconds) - 8usize];
    ["Offset of field: acpi_grt_info::Timezone"]
        [::core::mem::offset_of!(acpi_grt_info, Timezone) - 10usize];
    ["Offset of field: acpi_grt_info::Daylight"]
        [::core::mem::offset_of!(acpi_grt_info, Daylight) - 12usize];
    ["Offset of field: acpi_grt_info::Reserved"]
        [::core::mem::offset_of!(acpi_grt_info, Reserved) - 13usize];
};
pub type ACPI_GRT_INFO = acpi_grt_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtm_info {
    pub PioSpeed0: UINT32,
    pub DmaSpeed0: UINT32,
    pub PioSpeed1: UINT32,
    pub DmaSpeed1: UINT32,
    pub Flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gtm_info"][::core::mem::size_of::<acpi_gtm_info>() - 20usize];
    ["Alignment of acpi_gtm_info"][::core::mem::align_of::<acpi_gtm_info>() - 4usize];
    ["Offset of field: acpi_gtm_info::PioSpeed0"]
        [::core::mem::offset_of!(acpi_gtm_info, PioSpeed0) - 0usize];
    ["Offset of field: acpi_gtm_info::DmaSpeed0"]
        [::core::mem::offset_of!(acpi_gtm_info, DmaSpeed0) - 4usize];
    ["Offset of field: acpi_gtm_info::PioSpeed1"]
        [::core::mem::offset_of!(acpi_gtm_info, PioSpeed1) - 8usize];
    ["Offset of field: acpi_gtm_info::DmaSpeed1"]
        [::core::mem::offset_of!(acpi_gtm_info, DmaSpeed1) - 12usize];
    ["Offset of field: acpi_gtm_info::Flags"]
        [::core::mem::offset_of!(acpi_gtm_info, Flags) - 16usize];
};
pub type ACPI_GTM_INFO = acpi_gtm_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pld_info {
    pub Revision: UINT8,
    pub IgnoreColor: UINT8,
    pub Red: UINT8,
    pub Green: UINT8,
    pub Blue: UINT8,
    pub Width: UINT16,
    pub Height: UINT16,
    pub UserVisible: UINT8,
    pub Dock: UINT8,
    pub Lid: UINT8,
    pub Panel: UINT8,
    pub VerticalPosition: UINT8,
    pub HorizontalPosition: UINT8,
    pub Shape: UINT8,
    pub GroupOrientation: UINT8,
    pub GroupToken: UINT8,
    pub GroupPosition: UINT8,
    pub Bay: UINT8,
    pub Ejectable: UINT8,
    pub OspmEjectRequired: UINT8,
    pub CabinetNumber: UINT8,
    pub CardCageNumber: UINT8,
    pub Reference: UINT8,
    pub Rotation: UINT8,
    pub Order: UINT8,
    pub Reserved: UINT8,
    pub VerticalOffset: UINT16,
    pub HorizontalOffset: UINT16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_pld_info"][::core::mem::size_of::<acpi_pld_info>() - 34usize];
    ["Alignment of acpi_pld_info"][::core::mem::align_of::<acpi_pld_info>() - 2usize];
    ["Offset of field: acpi_pld_info::Revision"]
        [::core::mem::offset_of!(acpi_pld_info, Revision) - 0usize];
    ["Offset of field: acpi_pld_info::IgnoreColor"]
        [::core::mem::offset_of!(acpi_pld_info, IgnoreColor) - 1usize];
    ["Offset of field: acpi_pld_info::Red"][::core::mem::offset_of!(acpi_pld_info, Red) - 2usize];
    ["Offset of field: acpi_pld_info::Green"]
        [::core::mem::offset_of!(acpi_pld_info, Green) - 3usize];
    ["Offset of field: acpi_pld_info::Blue"][::core::mem::offset_of!(acpi_pld_info, Blue) - 4usize];
    ["Offset of field: acpi_pld_info::Width"]
        [::core::mem::offset_of!(acpi_pld_info, Width) - 6usize];
    ["Offset of field: acpi_pld_info::Height"]
        [::core::mem::offset_of!(acpi_pld_info, Height) - 8usize];
    ["Offset of field: acpi_pld_info::UserVisible"]
        [::core::mem::offset_of!(acpi_pld_info, UserVisible) - 10usize];
    ["Offset of field: acpi_pld_info::Dock"]
        [::core::mem::offset_of!(acpi_pld_info, Dock) - 11usize];
    ["Offset of field: acpi_pld_info::Lid"][::core::mem::offset_of!(acpi_pld_info, Lid) - 12usize];
    ["Offset of field: acpi_pld_info::Panel"]
        [::core::mem::offset_of!(acpi_pld_info, Panel) - 13usize];
    ["Offset of field: acpi_pld_info::VerticalPosition"]
        [::core::mem::offset_of!(acpi_pld_info, VerticalPosition) - 14usize];
    ["Offset of field: acpi_pld_info::HorizontalPosition"]
        [::core::mem::offset_of!(acpi_pld_info, HorizontalPosition) - 15usize];
    ["Offset of field: acpi_pld_info::Shape"]
        [::core::mem::offset_of!(acpi_pld_info, Shape) - 16usize];
    ["Offset of field: acpi_pld_info::GroupOrientation"]
        [::core::mem::offset_of!(acpi_pld_info, GroupOrientation) - 17usize];
    ["Offset of field: acpi_pld_info::GroupToken"]
        [::core::mem::offset_of!(acpi_pld_info, GroupToken) - 18usize];
    ["Offset of field: acpi_pld_info::GroupPosition"]
        [::core::mem::offset_of!(acpi_pld_info, GroupPosition) - 19usize];
    ["Offset of field: acpi_pld_info::Bay"][::core::mem::offset_of!(acpi_pld_info, Bay) - 20usize];
    ["Offset of field: acpi_pld_info::Ejectable"]
        [::core::mem::offset_of!(acpi_pld_info, Ejectable) - 21usize];
    ["Offset of field: acpi_pld_info::OspmEjectRequired"]
        [::core::mem::offset_of!(acpi_pld_info, OspmEjectRequired) - 22usize];
    ["Offset of field: acpi_pld_info::CabinetNumber"]
        [::core::mem::offset_of!(acpi_pld_info, CabinetNumber) - 23usize];
    ["Offset of field: acpi_pld_info::CardCageNumber"]
        [::core::mem::offset_of!(acpi_pld_info, CardCageNumber) - 24usize];
    ["Offset of field: acpi_pld_info::Reference"]
        [::core::mem::offset_of!(acpi_pld_info, Reference) - 25usize];
    ["Offset of field: acpi_pld_info::Rotation"]
        [::core::mem::offset_of!(acpi_pld_info, Rotation) - 26usize];
    ["Offset of field: acpi_pld_info::Order"]
        [::core::mem::offset_of!(acpi_pld_info, Order) - 27usize];
    ["Offset of field: acpi_pld_info::Reserved"]
        [::core::mem::offset_of!(acpi_pld_info, Reserved) - 28usize];
    ["Offset of field: acpi_pld_info::VerticalOffset"]
        [::core::mem::offset_of!(acpi_pld_info, VerticalOffset) - 30usize];
    ["Offset of field: acpi_pld_info::HorizontalOffset"]
        [::core::mem::offset_of!(acpi_pld_info, HorizontalOffset) - 32usize];
};
pub type ACPI_PLD_INFO = acpi_pld_info;
unsafe extern "C" {
    #[doc = " Public globals and runtime configuration options\n"]
    pub static mut AcpiGbl_EnableInterpreterSlack: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_AutoSerializeMethods: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_CreateOsiMethod: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_UseDefaultRegisterWidths: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_EnableTableValidation: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_EnableAmlDebugObject: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_CopyDsdtLocally: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_DoNotUseXsdt: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_Use32BitFadtAddresses: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_Use32BitFacsAddresses: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_TruncateIoAddresses: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_DisableAutoRepair: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_DisableSsdtTableInstall: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_RuntimeNamespaceOverride: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_OsiData: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_ReducedHardware: BOOLEAN;
}
unsafe extern "C" {
    pub static mut AcpiGbl_UseGlobalLock: BOOLEAN;
}
unsafe extern "C" {
    pub static mut AcpiGbl_MaxLoopIterations: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiGbl_IgnorePackageResolutionErrors: BOOLEAN;
}
unsafe extern "C" {
    pub static mut AcpiGbl_TraceFlags: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiGbl_TraceMethodName: *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub static mut AcpiGbl_TraceDbgLevel: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiGbl_TraceDbgLayer: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiDbgLevel: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiDbgLayer: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiGbl_DisplayDebugTimer: UINT8;
}
unsafe extern "C" {
    pub static mut AcpiGbl_FADT: ACPI_TABLE_FADT;
}
unsafe extern "C" {
    pub static mut AcpiCurrentGpeCount: UINT32;
}
unsafe extern "C" {
    pub static mut AcpiGbl_SystemAwakeAndRunning: BOOLEAN;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInitializeTables(
        InitialStorage: *mut ACPI_TABLE_DESC,
        InitialTableCount: UINT32,
        AllowResize: BOOLEAN,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInitializeSubsystem() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEnableSubsystem(Flags: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInitializeObjects(Flags: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiTerminate() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEnable() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDisable() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiSubsystemStatus() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetSystemInfo(RetBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetStatistics(Stats: *mut ACPI_STATISTICS) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiFormatException(Exception: ACPI_STATUS) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiPurgeCachedObjects() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallInterface(InterfaceName: ACPI_STRING) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveInterface(InterfaceName: ACPI_STRING) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiUpdateInterfaces(Action: UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiCheckAddressRange(
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Address: ACPI_PHYSICAL_ADDRESS,
        Length: ACPI_SIZE,
        Warn: BOOLEAN,
    ) -> UINT32;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDecodePldBuffer(
        InBuffer: *mut UINT8,
        Length: ACPI_SIZE,
        ReturnBuffer: *mut *mut ACPI_PLD_INFO,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallTable(Table: *mut ACPI_TABLE_HEADER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallPhysicalTable(Address: ACPI_PHYSICAL_ADDRESS) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiLoadTable(Table: *mut ACPI_TABLE_HEADER, TableIdx: *mut UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiUnloadTable(TableIndex: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiUnloadParentTable(Object: ACPI_HANDLE) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiLoadTables() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiReallocateRootTable() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiFindRootPointer(RsdpAddress: *mut ACPI_PHYSICAL_ADDRESS) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetTableHeader(
        Signature: ACPI_STRING,
        Instance: UINT32,
        OutTableHeader: *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetTable(
        Signature: ACPI_STRING,
        Instance: UINT32,
        OutTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiPutTable(Table: *mut ACPI_TABLE_HEADER);
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetTableByIndex(
        TableIndex: UINT32,
        OutTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallTableHandler(
        Handler: ACPI_TABLE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveTableHandler(Handler: ACPI_TABLE_HANDLER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiWalkNamespace(
        Type: ACPI_OBJECT_TYPE,
        StartObject: ACPI_HANDLE,
        MaxDepth: UINT32,
        DescendingCallback: ACPI_WALK_CALLBACK,
        AscendingCallback: ACPI_WALK_CALLBACK,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetDevices(
        HID: *mut ::core::ffi::c_char,
        UserFunction: ACPI_WALK_CALLBACK,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetName(
        Object: ACPI_HANDLE,
        NameType: UINT32,
        RetPathPtr: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetHandle(
        Parent: ACPI_HANDLE,
        Pathname: *const ::core::ffi::c_char,
        RetHandle: *mut ACPI_HANDLE,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiAttachData(
        Object: ACPI_HANDLE,
        Handler: ACPI_OBJECT_HANDLER,
        Data: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDetachData(Object: ACPI_HANDLE, Handler: ACPI_OBJECT_HANDLER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetData(
        Object: ACPI_HANDLE,
        Handler: ACPI_OBJECT_HANDLER,
        Data: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDebugTrace(
        Name: *const ::core::ffi::c_char,
        DebugLevel: UINT32,
        DebugLayer: UINT32,
        Flags: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEvaluateObject(
        Object: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        ParameterObjects: *mut ACPI_OBJECT_LIST,
        ReturnObjectBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEvaluateObjectTyped(
        Object: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        ExternalParams: *mut ACPI_OBJECT_LIST,
        ReturnBuffer: *mut ACPI_BUFFER,
        ReturnType: ACPI_OBJECT_TYPE,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetObjectInfo(
        Object: ACPI_HANDLE,
        ReturnBuffer: *mut *mut ACPI_DEVICE_INFO,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallMethod(Buffer: *mut UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetNextObject(
        Type: ACPI_OBJECT_TYPE,
        Parent: ACPI_HANDLE,
        Child: ACPI_HANDLE,
        OutHandle: *mut ACPI_HANDLE,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetType(Object: ACPI_HANDLE, OutType: *mut ACPI_OBJECT_TYPE) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetParent(Object: ACPI_HANDLE, OutHandle: *mut ACPI_HANDLE) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallInitializationHandler(
        Handler: ACPI_INIT_HANDLER,
        Function: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallSciHandler(
        Address: ACPI_SCI_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveSciHandler(Address: ACPI_SCI_HANDLER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallGlobalEventHandler(
        Handler: ACPI_GBL_EVENT_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallFixedEventHandler(
        AcpiEvent: UINT32,
        Handler: ACPI_EVENT_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveFixedEventHandler(
        AcpiEvent: UINT32,
        Handler: ACPI_EVENT_HANDLER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallGpeHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Type: UINT32,
        Address: ACPI_GPE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallGpeRawHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Type: UINT32,
        Address: ACPI_GPE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveGpeHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Address: ACPI_GPE_HANDLER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallNotifyHandler(
        Device: ACPI_HANDLE,
        HandlerType: UINT32,
        Handler: ACPI_NOTIFY_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveNotifyHandler(
        Device: ACPI_HANDLE,
        HandlerType: UINT32,
        Handler: ACPI_NOTIFY_HANDLER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallAddressSpaceHandler(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
        Setup: ACPI_ADR_SPACE_SETUP,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallAddressSpaceHandlerNo_Reg(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
        Setup: ACPI_ADR_SPACE_SETUP,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiExecuteRegMethods(Device: ACPI_HANDLE, SpaceId: ACPI_ADR_SPACE_TYPE) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveAddressSpaceHandler(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallExceptionHandler(Handler: ACPI_EXCEPTION_HANDLER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallInterfaceHandler(Handler: ACPI_INTERFACE_HANDLER) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiAcquireGlobalLock(Timeout: UINT16, Handle: *mut UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiReleaseGlobalLock(Handle: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiAcquireMutex(
        Handle: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        Timeout: UINT16,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiReleaseMutex(Handle: ACPI_HANDLE, Pathname: ACPI_STRING) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEnableEvent(Event: UINT32, Flags: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDisableEvent(Event: UINT32, Flags: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiClearEvent(Event: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetEventStatus(Event: UINT32, EventStatus: *mut ACPI_EVENT_STATUS) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiUpdateAllGpes() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEnableGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDisableGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiClearGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiSetGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32, Action: UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiFinishGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiMaskGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32, IsMasked: BOOLEAN)
    -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiMarkGpeForWake(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiSetupGpeForWake(
        ParentDevice: ACPI_HANDLE,
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiSetGpeWakeMask(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Action: UINT8,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetGpeStatus(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        EventStatus: *mut ACPI_EVENT_STATUS,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDispatchGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> UINT32;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiDisableAllGpes() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEnableAllRuntimeGpes() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiEnableAllWakeupGpes() -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiAnyGpeStatusSet() -> UINT32;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiGetGpeDevice(GpeIndex: UINT32, GpeDevice: *mut ACPI_HANDLE) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiInstallGpeBlock(
        GpeDevice: ACPI_HANDLE,
        GpeBlockAddress: *mut ACPI_GENERIC_ADDRESS,
        RegisterCount: UINT32,
        InterruptNumber: UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    #[doc = " ACPICA public interface prototypes\n"]
    pub fn AcpiRemoveGpeBlock(GpeDevice: ACPI_HANDLE) -> ACPI_STATUS;
}
#[doc = " ACPICA public interface prototypes\n"]
pub type ACPI_WALK_RESOURCE_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(
        Resource: *mut ACPI_RESOURCE,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
unsafe extern "C" {
    pub fn AcpiGetVendorResource(
        Device: ACPI_HANDLE,
        Name: *mut ::core::ffi::c_char,
        Uuid: *mut ACPI_VENDOR_UUID,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetCurrentResources(Device: ACPI_HANDLE, RetBuffer: *mut ACPI_BUFFER)
    -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetPossibleResources(
        Device: ACPI_HANDLE,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetEventResources(
        DeviceHandle: ACPI_HANDLE,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiWalkResourceBuffer(
        Buffer: *mut ACPI_BUFFER,
        UserFunction: ACPI_WALK_RESOURCE_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiWalkResources(
        Device: ACPI_HANDLE,
        Name: *mut ::core::ffi::c_char,
        UserFunction: ACPI_WALK_RESOURCE_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiSetCurrentResources(Device: ACPI_HANDLE, InBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetIrqRoutingTable(Device: ACPI_HANDLE, RetBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiResourceToAddress64(
        Resource: *mut ACPI_RESOURCE,
        Out: *mut ACPI_RESOURCE_ADDRESS64,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiBufferToResource(
        AmlBuffer: *mut UINT8,
        AmlBufferLength: UINT16,
        ResourcePtr: *mut *mut ACPI_RESOURCE,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiReset() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiRead(Value: *mut UINT64, Reg: *mut ACPI_GENERIC_ADDRESS) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiWrite(Value: UINT64, Reg: *mut ACPI_GENERIC_ADDRESS) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiReadBitRegister(RegisterId: UINT32, ReturnValue: *mut UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiWriteBitRegister(RegisterId: UINT32, Value: UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetSleepTypeData(
        SleepState: UINT8,
        Slp_TypA: *mut UINT8,
        Slp_TypB: *mut UINT8,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiEnterSleepStatePrep(SleepState: UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiEnterSleepState(SleepState: UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiEnterSleepStateS4bios() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiLeaveSleepStatePrep(SleepState: UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiLeaveSleepState(SleepState: UINT8) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiSetFirmwareWakingVector(
        PhysicalAddress: ACPI_PHYSICAL_ADDRESS,
        PhysicalAddress64: ACPI_PHYSICAL_ADDRESS,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetTimerResolution(Resolution: *mut UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetTimer(Ticks: *mut UINT32) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiGetTimerDuration(
        StartTicks: UINT32,
        EndTicks: UINT32,
        TimeElapsed: *mut UINT32,
    ) -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiError(
        ModuleName: *const ::core::ffi::c_char,
        LineNumber: UINT32,
        Format: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn AcpiException(
        ModuleName: *const ::core::ffi::c_char,
        LineNumber: UINT32,
        Status: ACPI_STATUS,
        Format: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn AcpiWarning(
        ModuleName: *const ::core::ffi::c_char,
        LineNumber: UINT32,
        Format: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn AcpiInfo(Format: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn AcpiBiosError(
        ModuleName: *const ::core::ffi::c_char,
        LineNumber: UINT32,
        Format: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn AcpiBiosException(
        ModuleName: *const ::core::ffi::c_char,
        LineNumber: UINT32,
        Status: ACPI_STATUS,
        Format: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn AcpiBiosWarning(
        ModuleName: *const ::core::ffi::c_char,
        LineNumber: UINT32,
        Format: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn AcpiInitializeDebugger() -> ACPI_STATUS;
}
unsafe extern "C" {
    pub fn AcpiTerminateDebugger();
}
unsafe extern "C" {
    pub fn AcpiRunDebugger(BatchBuffer: *mut ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn AcpiSetDebuggerThreadId(ThreadId: UINT64);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::core::ffi::c_uint,
    pub fp_offset: ::core::ffi::c_uint,
    pub overflow_arg_area: *mut ::core::ffi::c_void,
    pub reg_save_area: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::core::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::core::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::core::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::core::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::core::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::core::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
